<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Red Hat Enterprise Linux 8 的新玩意 第6篇 module 的简介及操作示例</title>
      <link href="2021/02/20/RHEL8_CentOS8_module_introduction/"/>
      <url>2021/02/20/RHEL8_CentOS8_module_introduction/</url>
      
        <content type="html"><![CDATA[<p><br></br></p><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>这个文档介绍了在RHEL8.x ，CentOS8.x 上面, 如何对AppStream 软件仓库中的模块进行查询，安装，等操作。适用于Linux 系统的管理人员，维护人员等。<br><br></br></p><h1 id="2-软件包介绍"><a href="#2-软件包介绍" class="headerlink" title="2 软件包介绍"></a>2 软件包介绍</h1><p>从RHEL8,CentOS8 开始，软件包分为两个主要的仓库，BaseOS 和 AppStream。</p><ul><li><p>BaseOS<br>提供了OS 的基础软件包，例如grub2， kernel，lib 等等。这个仓库里面的软件包是以RPM 格式直接提供的。</p></li><li><p>AppStream<br>提供了用户应用程序，例如http, python, php, gcc 等等。这个仓库里面软件包则是通过两种格式提供，一个是RPM 格式，而另外一个就是module 了。这可能会问，为什么会使用这样的方式来管理呢？ 主要是这样的：</p><ul><li> 这样可以同时提供多个版本用户应用程序，具有更多灵活性</li><li> 这样可以方便使用到最新的用户应用程序，便于随时根据需要随时升降级</li><li> 应用升级，降级不会影响到基础软件包（如通过BaseOS提供的内容）</li><li> 这样可以把一系列相关的用户应用RPM通过module形式打包起来，通过module来是管理这一系列的应用，减少复杂性。<br><br></br><h1 id="3-AppStraem-中的软件包的打包方式介绍"><a href="#3-AppStraem-中的软件包的打包方式介绍" class="headerlink" title="3 AppStraem 中的软件包的打包方式介绍"></a>3 AppStraem 中的软件包的打包方式介绍</h1></li></ul></li><li><p>独立的RPM 格式<br>这个也就是我们所熟知的传统的RPM包的格式了。</p></li><li><p>Modules 模块的形式<br>Modules 这种方式呢，其实就是把一系列强相关的RPM组合成一个逻辑上的模块单元。 例如httpd 模块（包含了httpd，httpd-devel，mod_http,mod_ss等一系列的RPM）。它这个里面呢，所有的RPM都是同时编译，测试，以及发布的。 所以通过这样的方式，就具有了更好的兼容性，稳定性，以及灵活性。<br><br></br></p><h1 id="4-module-的详细介绍"><a href="#4-module-的详细介绍" class="headerlink" title="4 module 的详细介绍"></a>4 module 的详细介绍</h1><p>module 里面，包含了两个重要的概念， 一个是module的stream， 另外一个就是module的profiles了。 下面我们来仔细看一下</p></li><li><p>Streams<br>它通过版本来进行管理的，可以理解为module 的版本，比如1.0， 2.0 等等(可以参考下面的例子 Stream的信息)。 可以理解为它是AppStream里面的一个子repo。 最小的单元一系列RPM被放入一个对应的版本的module stream里面。跟着module stream一起发布，更新。 而不同的版本的module stream 可以独立接收到更新。而我们则可以根据需要，通过命令来进行对module stream 启用和禁用或者默认。 启用则说明我们可以使用到这个module stream里面对应的RPM包；相对而言，如果禁用，我们就是无法使用这个module stream里面对应的RPM包了。这样会出现一种现象，比如我的AppStream源里面明明有其中一个版本的RPM， 但是我却无法使用它。这就是因为这个RPM版本对应的module stream被禁用了，因为这个版本的RPM是这个straem的一员，自然也就没法使用它了。而同一个module，同一时间只能有一个启用的stream。而默认情况下，会有一个默认其中的stream， 这样可以不用做任何的动作的情况下就可以使用到默认 stream的RPM包了。同样，module stream 也会与RPM类似有依赖关系。<br>比如下面这个例子，我们可以看到httpd 这个module有两个stream， 2.4和1.0 两个版本。其中 2.4 是启用的stream ，并且是default的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Red Hat Enterprise Linux 8 for x86_64 - AppStream (RPMs)</span><br><span class="line">Name         Stream         Profiles                      Summary</span><br><span class="line">httpd        2.4 [d][e]     common [d], devel, minimal    Apache HTTP Server</span><br><span class="line">httpd        1.0            common [d], devel, minimal    Apache HTTP Server</span><br><span class="line">Hint: [d]efault, [e]nabled, [x]disabled, [i]nstalled</span><br></pre></td></tr></table></figure></li><li><p>Profiles<br>它是用过目的来进行管理的，可以理解为module的使用描述。 它描述了对应的使用范围的以及一系列的RPM包，类似development，minimal， 等等；不同的profile里面会包含不用数量的RPM包。比如development profile里面则会包含devel RPM包； 而minimal profile里面则不会包含devel 的RPM包。 所以这样客户更方便我们来根据需要来选择对应的profile 来安装对应module，这样我们安装了我们需要的RPM了。同样，我们也可以有default的profile，这样默认情况下，我们不需要做任何就可以在安装时，使用default的profile了。<br>比如下面这个例子，我们可以看到http的这个module有三个profile，common，devel和minimal。 而common则是default的profile。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Red Hat Enterprise Linux 8 for x86_64 - AppStream (RPMs)</span><br><span class="line">Name         Stream         Profiles                      Summary</span><br><span class="line">httpd        2.4 [d][e]     common [d], devel, minimal    Apache HTTP Server</span><br><span class="line">httpd        2.0            common [d], devel, minimal    Apache HTTP Server</span><br><span class="line">Hint: [d]efault, [e]nabled, [x]disabled, [i]nstalled</span><br></pre></td></tr></table></figure><p><br></br></p><h1 id="5-module-的操作示例"><a href="#5-module-的操作示例" class="headerlink" title="5 module 的操作示例"></a>5 module 的操作示例</h1><h2 id="5-1-显示当前系统中可用的-module"><a href="#5-1-显示当前系统中可用的-module" class="headerlink" title="5.1 显示当前系统中可用的 module"></a>5.1 显示当前系统中可用的 module</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum module list</span><br></pre></td></tr></table></figure></li><li><p>示例。 我们可以看到当前系统所有可用的module，它们的stream信息（d=default，e=enabled）。profile信息，描述的等等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Red Hat Enterprise Linux 8 for x86_64 - AppStream (RPMs)</span><br><span class="line">Name                 Stream          Profiles        Summary</span><br><span class="line">container-tools      rhel8 [d][e]    common [d]      Common tools and dependencies for container runtimes</span><br><span class="line">container-tools      1.0             common [d]      Common tools and dependencies for container runtimes</span><br><span class="line">container-tools      2.0             common [d]      Common tools and dependencies for container runtimes</span><br><span class="line">go-toolset           rhel8 [d][e]    common [d]      Go</span><br><span class="line">idm                  client [d]      common [d]      RHEL IdM long term support client</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h2 id="5-2-显示module详细信息，可以查看模块描述，profile，提供的RPM包等等。"><a href="#5-2-显示module详细信息，可以查看模块描述，profile，提供的RPM包等等。" class="headerlink" title="5.2 显示module详细信息，可以查看模块描述，profile，提供的RPM包等等。"></a>5.2 显示module详细信息，可以查看模块描述，profile，提供的RPM包等等。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum module info module-name</span><br></pre></td></tr></table></figure></li><li><p>示例。可以看到stream版本，profile，里面包含的包，以及版本的等等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Name             : httpd</span><br><span class="line">Stream           : 2.4 [d][e][a]</span><br><span class="line">Version          : 8000020190405071959</span><br><span class="line">Context          : 55190bc5</span><br><span class="line">Architecture     : x86_64</span><br><span class="line">Profiles         : common [d], devel, minimal</span><br><span class="line">Default profiles : common</span><br><span class="line">Repo             : rhel-8-for-x86_64-appstream-rpms</span><br><span class="line">Summary          : Apache HTTP Server</span><br><span class="line">Description      : Apache httpd is a powerful, efficient, and extensible HTTP server.</span><br><span class="line">Requires         : platform:[el8]</span><br><span class="line">Artifacts        : httpd-0:2.4.37-11.module+el8.0.0+2969+90015743.src</span><br><span class="line">                 : httpd-0:2.4.37-11.module+el8.0.0+2969+90015743.x86_64</span><br><span class="line">                 : httpd-debuginfo-0:2.4.37-11.module+el8.0.0+2969+90015743.x86_64</span><br><span class="line">                 : httpd-debugsource-0:2.4.37-11.module+el8.0.0+2969+90015743.x86_64</span><br><span class="line">                 : httpd-devel-0:2.4.37-11.module+el8.0.0+2969+90015743.x86_64</span><br><span class="line">                 : httpd-filesystem-0:2.4.37-11.module+el8.0.0+2969+90015743.noarch</span><br><span class="line">                 : httpd-manual-0:2.4.37-11.module+el8.0.0+2969+90015743.noarch</span><br><span class="line">                 : httpd-tools-0:2.4.37-11.module+el8.0.0+2969+90015743.x86_64</span><br><span class="line">                 : httpd-tools-debuginfo-0:2.4.37-11.module+el8.0.0+2969+90015743.x86_64</span><br><span class="line">                 : mod_http2-0:1.11.3-2.module+el8.0.0+2969+90015743.src</span><br><span class="line">                 : mod_http2-0:1.11.3-2.module+el8.0.0+2969+90015743.x86_64</span><br><span class="line">                 : mod_http2-debuginfo-0:1.11.3-2.module+el8.0.0+2969+90015743.x86_64</span><br><span class="line">                 : mod_http2-debugsource-0:1.11.3-2.module+el8.0.0+2969+90015743.x86_64</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h2 id="5-3-显示对应的profile里面的包含那些具体的包。"><a href="#5-3-显示对应的profile里面的包含那些具体的包。" class="headerlink" title="5.3 显示对应的profile里面的包含那些具体的包。"></a>5.3 显示对应的profile里面的包含那些具体的包。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum module info --profile module-name</span><br></pre></td></tr></table></figure></li><li><p>示例 实现了module的版本，还有其中不同的profile包含了什么包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># yum module info --profile httpd</span><br><span class="line"></span><br><span class="line">Name    : httpd:2.4:820190206142837:9edba152:x86_64</span><br><span class="line">common  : httpd</span><br><span class="line">        : httpd-filesystem</span><br><span class="line">        : httpd-tools</span><br><span class="line">        : mod_http2</span><br><span class="line">        : mod_ssl</span><br><span class="line">devel   : httpd</span><br><span class="line">        : httpd-devel</span><br><span class="line">        : httpd-filesystem</span><br><span class="line">        : httpd-tools</span><br><span class="line">minimal : httpd</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><h2 id="5-4-显示当前module状态，比如里面的enabled，disable等状态。"><a href="#5-4-显示当前module状态，比如里面的enabled，disable等状态。" class="headerlink" title="5.4 显示当前module状态，比如里面的enabled，disable等状态。"></a>5.4 显示当前module状态，比如里面的enabled，disable等状态。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum module list module-name</span><br></pre></td></tr></table></figure></li><li><p>示例 模块的信息，Stream的信息，default，profile信息等。（注意，如果不在enabled状态，是yum whatprovides 是无法看到对应的rpm的）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># yum module list php</span><br><span class="line">Red Hat Enterprise Linux 8 for x86_64 - AppStream (RPMs)</span><br><span class="line">Name             Stream          Profiles                             Summary</span><br><span class="line">php              7.2 [d]         common [d], devel, minimal           PHP scripting language</span><br><span class="line">php              7.3             common [d], devel, minimal           PHP scripting language</span><br><span class="line">php              7.4             common [d], devel, minimal           PHP scripting language</span><br><span class="line">Hint: [d]efault, [e]nabled, [x]disabled, [i]nstalled</span><br></pre></td></tr></table></figure><h2 id="5-5-查找那个模块提供了RPM"><a href="#5-5-查找那个模块提供了RPM" class="headerlink" title="5.5 查找那个模块提供了RPM"></a>5.5 查找那个模块提供了RPM</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum module provides package</span><br></pre></td></tr></table></figure></li><li><p>示例 我们查找那个podman RPM 的详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># yum module provides podman</span><br><span class="line">podman-1.0.0-2.git921f98f.module+el8+2784+9a0c1dfe.x86_64</span><br><span class="line">Module   : container-tools:1.0:820190220135513:20125149:x86_64</span><br><span class="line">Profiles : common</span><br><span class="line">Repo     : rhel-8-for-x86_64-appstream-rpms</span><br><span class="line">Summary  : Common tools and dependencies for container runtimes</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">podman-1.6.4-23.module+el8.3.0+8377+eff33c85.x86_64</span><br><span class="line">Module   : container-tools:2.0:8030020201008133618:830d479e:x86_64</span><br><span class="line">Profiles : common</span><br><span class="line">Repo     : rhel-8-for-x86_64-appstream-rpms</span><br><span class="line">Summary  : Common tools and dependencies for container runtimes</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">podman-1.9.3-2.module+el8.2.1+6867+366c07d6.x86_64</span><br><span class="line">Module   : container-tools:rhel8:8020120200601155013:ffd2803a:x86_64</span><br><span class="line">Profiles : common</span><br><span class="line">Repo     : rhel-8-for-x86_64-appstream-rpms</span><br><span class="line">Summary  : Common tools and dependencies for container runtimes</span><br></pre></td></tr></table></figure><h2 id="5-6-禁用一个对应的module-stream"><a href="#5-6-禁用一个对应的module-stream" class="headerlink" title="5.6 禁用一个对应的module stream"></a>5.6 禁用一个对应的module stream</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum module disable module-name:stream</span><br></pre></td></tr></table></figure></li><li><p>示例 禁用stream 版本rhel8 的 “container-tools”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># yum module disable container-tools:rhel8</span><br><span class="line">Only module name is required. Ignoring unneeded information in argument: &#39;container-tools:rhel8&#39;</span><br><span class="line">Dependencies resolved.</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"> Package         Architecture                    Version        Repository     Size</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Disabling module profiles:</span><br><span class="line"> container-tools&#x2F;common</span><br><span class="line">Disabling modules:</span><br><span class="line"> container-tools</span><br><span class="line">Transaction Summary</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Is this ok [y&#x2F;N]: y</span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure><h2 id="5-7-启用一个对应的module-stream"><a href="#5-7-启用一个对应的module-stream" class="headerlink" title="5.7 启用一个对应的module stream"></a>5.7 启用一个对应的module stream</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum module enable module-name:stream</span><br></pre></td></tr></table></figure></li><li><p>示例 启用 stream 版本 2.0 的 “container-tools” （注意，需要先要将原来其中的其他stearm 禁用掉。）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># yum module enable container-tools:2.0</span><br><span class="line">Dependencies resolved.</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"> Package          Architecture                    Version              Repository     Size</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Enabling module streams:  container-tools                                                  2.0</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Is this ok [y&#x2F;N]: y</span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure><h2 id="5-8-安装一个指定的模块"><a href="#5-8-安装一个指定的模块" class="headerlink" title="5.8 安装一个指定的模块"></a>5.8 安装一个指定的模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum module install module-name</span><br></pre></td></tr></table></figure></li><li><p>示例 (安装默认的container-tools module stream,如果要安装其他stream则需要将它enable才能安装)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># yum module install container-tools</span><br><span class="line">Last metadata expiration check: 2:41:25 ago on Sun 08 Nov 2020 09:10:32 AM CST.</span><br><span class="line">Dependencies resolved.</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"> Package      Arch Version                      Repository                           Size</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Upgrading:</span><br><span class="line"> buildah      x86_64    1.15.1-2.module+el8.3.0+8221+97165c3f  rhel-8-for-x86_64-appstream-rpms  8.0 M</span><br><span class="line"> conmon       x86_64    2:2.0.20-2.module+el8.3.0+8221+97165c3f  rhel-8-for-x86_64-appstream-rpms  49 k</span><br><span class="line">.....</span><br><span class="line">Transaction Summary</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Install   8 Packages</span><br><span class="line">Upgrade  12 Packages</span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">......</span><br><span class="line">  toolbox-0.0.8-1.module+el8.3.0+8221+97165c3f.noarch</span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure><h2 id="5-9-删除一个指定的模块"><a href="#5-9-删除一个指定的模块" class="headerlink" title="5.9 删除一个指定的模块"></a>5.9 删除一个指定的模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum module remove --all module-name:stream</span><br></pre></td></tr></table></figure></li><li><p>示例 这样就可以删除之前安装的container-tools的默认的stream 版本了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># yum module remove container-tools:rhel8</span><br><span class="line">Dependencies resolved.</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"> Package    Architecture Version      Repository       Size</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">Removed:</span><br><span class="line">  cockpit-podman-18.1-2.module+el8.3.0+8221+97165c3f.noarch crun-0.14.1-2.module+el8.3.0+8221+97165c3f.x86_64</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure><p>到此，RHEL8.x CentOS8.x 的module 简介及操作示例就介绍完毕了。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux 技巧(原创) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Red Hat Enterprise Linux 8 的新玩意 第5篇tigervnc</title>
      <link href="2021/02/19/configure_tigervnc_on_rhel82/"/>
      <url>2021/02/19/configure_tigervnc_on_rhel82/</url>
      
        <content type="html"><![CDATA[<h1 id="Red-Hat-Enterprise-Linux-8-的新玩意-第5篇tigervnc"><a href="#Red-Hat-Enterprise-Linux-8-的新玩意-第5篇tigervnc" class="headerlink" title="Red Hat Enterprise Linux 8 的新玩意 第5篇tigervnc"></a>Red Hat Enterprise Linux 8 的新玩意 第5篇tigervnc</h1><p><br></br></p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1. 环境"></a>1. 环境</h2><ul><li>Red Hat Enterprise Linux release 8.2 (Ootpa)</li><li>4.18.0-193.el8.x86_64</li><li>tigervnc-server-1.10.1-9.el8_3.x86_64<br><br></br><h2 id="2-安装需要的-VNC-组件"><a href="#2-安装需要的-VNC-组件" class="headerlink" title="2. 安装需要的 VNC 组件"></a>2. 安装需要的 VNC 组件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install -y tigervnc tigervnc-server</span><br></pre></td></tr></table></figure><br></br><h2 id="3-配置vncserver访问的password"><a href="#3-配置vncserver访问的password" class="headerlink" title="3. 配置vncserver访问的password"></a>3. 配置vncserver访问的password</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vncpasswd</span><br></pre></td></tr></table></figure><br></br><h2 id="4-创建需要的systemd文件-（使用tigervnc-server自带的例子文件就可以了）"><a href="#4-创建需要的systemd文件-（使用tigervnc-server自带的例子文件就可以了）" class="headerlink" title="4. 创建需要的systemd文件 （使用tigervnc-server自带的例子文件就可以了）"></a>4. 创建需要的systemd文件 （使用tigervnc-server自带的例子文件就可以了）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cp &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;vncserver@.service &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vncserver@\:1.service</span><br></pre></td></tr></table></figure><br></br><h2 id="5-添加需要访问的用户"><a href="#5-添加需要访问的用户" class="headerlink" title="5. 添加需要访问的用户"></a>5. 添加需要访问的用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># echo &quot;:1&#x3D;root&quot; &gt;&gt; &#x2F;etc&#x2F;tigervnc&#x2F;vncserver.users</span><br></pre></td></tr></table></figure><br></br><h2 id="6-重新加载daemon然后启动vncserver-（可以配置enable）"><a href="#6-重新加载daemon然后启动vncserver-（可以配置enable）" class="headerlink" title="6. 重新加载daemon然后启动vncserver （可以配置enable）"></a>6. 重新加载daemon然后启动vncserver （可以配置enable）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># systemctl daemon-reload</span><br><span class="line"># systemctl start vncserver@\:1.service</span><br><span class="line"># 可选</span><br><span class="line"># systemctl enable vncserver@\:1.service</span><br></pre></td></tr></table></figure><br></br><h2 id="附录-1：-配置文件-usr-lib-systemd-system-vncserver-1-service"><a href="#附录-1：-配置文件-usr-lib-systemd-system-vncserver-1-service" class="headerlink" title="附录 1： 配置文件 /usr/lib/systemd/system/vncserver@\:1.service"></a>附录 1： 配置文件 <code>/usr/lib/systemd/system/vncserver@\:1.service</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># egrep -v &quot;^#|^$&quot; -r &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;vncserver@\:1.service</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Remote desktop service (VNC)</span><br><span class="line">After&#x3D;syslog.target network.target</span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;forking</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;libexec&#x2F;vncsession-start %i</span><br><span class="line">PIDFile&#x3D;&#x2F;var&#x2F;run&#x2F;vncsession-%i.pid</span><br><span class="line">SELinuxContext&#x3D;system_u:system_r:vnc_session_t:s0</span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><br></br><h2 id="附录-2：-配置文件-etc-tigervnc-vncserver-users"><a href="#附录-2：-配置文件-etc-tigervnc-vncserver-users" class="headerlink" title="附录 2： 配置文件 /etc/tigervnc/vncserver.users"></a>附录 2： 配置文件 <code>/etc/tigervnc/vncserver.users</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># TigerVNC User assignment</span><br><span class="line">#</span><br><span class="line"># This file assigns users to specific VNC display numbers.</span><br><span class="line"># The syntax is &lt;display&gt;&#x3D;&lt;username&gt;. E.g.:</span><br><span class="line">#</span><br><span class="line"># :2&#x3D;andrew</span><br><span class="line"># :3&#x3D;lisa</span><br><span class="line">:1&#x3D;root</span><br></pre></td></tr></table></figure><br></br><h2 id="附录-3：-可能会碰到的错误"><a href="#附录-3：-可能会碰到的错误" class="headerlink" title="附录 3： 可能会碰到的错误"></a>附录 3： 可能会碰到的错误</h2></li><li>使用了错误的vncserver@:1.service 文件 （因为cp了原来 RHEL7 的配置文件， 使用tigervnc-server自带的例子文件就可以了）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># systemctl status  vncserver@\:1.service</span><br><span class="line">● vncserver@:1.service - Remote desktop service (VNC)</span><br><span class="line">   Loaded: loaded (&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vncserver@:1.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: failed (Result: protocol) since Fri 2021-02-19 17:00:12 CST; 5s ago</span><br><span class="line">  Process: 34992 ExecStart&#x3D;&#x2F;usr&#x2F;sbin&#x2F;runuser -l root -c &#x2F;usr&#x2F;bin&#x2F;vncserver :1 (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)</span><br><span class="line">  Process: 34990 ExecStartPre&#x3D;&#x2F;bin&#x2F;sh -c &#x2F;usr&#x2F;bin&#x2F;vncserver -kill :1 &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 || : (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)</span><br><span class="line"></span><br><span class="line">Feb 19 17:00:12 rhel82 systemd[1]: Starting Remote desktop service (VNC)...</span><br><span class="line">Feb 19 17:00:12 rhel82 systemd[1]: vncserver@:1.service: Can&#39;t open PID file &#x2F;root&#x2F;.vnc&#x2F;rhel82:1.pid (yet?) after start: No such file or di&gt;</span><br><span class="line">Feb 19 17:00:12 rhel82 systemd[1]: vncserver@:1.service: Failed with result &#39;protocol&#39;.</span><br><span class="line">Feb 19 17:00:12 rhel82 systemd[1]: Failed to start Remote desktop service (VNC).</span><br></pre></td></tr></table></figure></li><li>没有添加vnc用户到 <code>/etc/tigervnc/vncserver.users</code> （增加对应的用户就可以了）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># systemctl status vncserver@\:1.service -l</span><br><span class="line">● vncserver@:1.service - Remote desktop service (VNC)</span><br><span class="line">   Loaded: loaded (&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vncserver@:1.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: failed (Result: exit-code) since Fri 2021-02-19 17:09:37 CST; 3s ago</span><br><span class="line">  Process: 35662 ExecStart&#x3D;&#x2F;usr&#x2F;libexec&#x2F;vncsession-start :1 (code&#x3D;exited, status&#x3D;1&#x2F;FAILURE)</span><br><span class="line"></span><br><span class="line">Feb 19 17:09:37 rhel82 systemd[1]: Starting Remote desktop service (VNC)...</span><br><span class="line">Feb 19 17:09:37 rhel82 vncsession-start[35662]: No user configured for display :1</span><br><span class="line">Feb 19 17:09:37 rhel82 systemd[1]: vncserver@:1.service: Control process exited, code&#x3D;exited status&#x3D;1</span><br><span class="line">Feb 19 17:09:37 rhel82 systemd[1]: vncserver@:1.service: Failed with result &#39;exit-code&#39;.</span><br><span class="line">Feb 19 17:09:37 rhel82 systemd[1]: Failed to start Remote desktop service (VNC).</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux 技巧(原创) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux小玩意之使用 convert2rhel 工具做系统迁移</title>
      <link href="2021/02/19/public_convert2rhel/"/>
      <url>2021/02/19/public_convert2rhel/</url>
      
        <content type="html"><![CDATA[<h1 id="1-conert2rhel简介"><a href="#1-conert2rhel简介" class="headerlink" title="1. conert2rhel简介"></a>1. conert2rhel简介</h1><h2 id="1-1-通过conert2rhel工具-我们可以方便的从-CentOS-直接迁移到-Red-Hat-Enterprise-Linux-RHEL"><a href="#1-1-通过conert2rhel工具-我们可以方便的从-CentOS-直接迁移到-Red-Hat-Enterprise-Linux-RHEL" class="headerlink" title="1.1 通过conert2rhel工具, 我们可以方便的从 CentOS 直接迁移到 Red Hat Enterprise Linux (RHEL)."></a>1.1 通过conert2rhel工具, 我们可以方便的从 CentOS 直接迁移到 Red Hat Enterprise Linux (RHEL).</h2><p><strong>重要: 在进行convert之前,强烈建议做好相应的备份. 当然,我们也可以联系Red Hat尝试获取支持</strong></p><h1 id="2-conert2rhel-迁移的步骤"><a href="#2-conert2rhel-迁移的步骤" class="headerlink" title="2. conert2rhel 迁移的步骤"></a>2. conert2rhel 迁移的步骤</h1><p><strong>注意: 使用的时候,建议做一个版本的对应. 比如我用CentOS 6.10 迁移到RHEL 6.10 作为一个例子</strong></p><h2 id="2-1-在原有的CentOS-6-10-上安装-Fedora-EPEL-repository"><a href="#2-1-在原有的CentOS-6-10-上安装-Fedora-EPEL-repository" class="headerlink" title="2.1 在原有的CentOS 6.10 上安装 Fedora EPEL repository"></a>2.1 在原有的CentOS 6.10 上安装 Fedora EPEL repository</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># rpm -ivh https:&#x2F;&#x2F;dl.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;epel-release-latest-6.noarch.rpm</span><br></pre></td></tr></table></figure><h2 id="2-2-安装-convert2rhel-工具"><a href="#2-2-安装-convert2rhel-工具" class="headerlink" title="2.2 安装 convert2rhel 工具."></a>2.2 安装 convert2rhel 工具.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install -y convert2rhel</span><br></pre></td></tr></table></figure><h2 id="2-3-使用RHEL6-10-ISO-作为本地的-repo-我们也可以使用http-ftp-配合RHEL-6-10搭建的源-这个例子将-RHEL6-10-的ISO-挂载在”-mnt-iso”下-并建立一个本地repo-文件"><a href="#2-3-使用RHEL6-10-ISO-作为本地的-repo-我们也可以使用http-ftp-配合RHEL-6-10搭建的源-这个例子将-RHEL6-10-的ISO-挂载在”-mnt-iso”下-并建立一个本地repo-文件" class="headerlink" title="2.3 使用RHEL6.10 ISO 作为本地的 repo (我们也可以使用http/ ftp 配合RHEL 6.10搭建的源). 这个例子将 RHEL6.10 的ISO 挂载在”/mnt/iso”下. 并建立一个本地repo 文件."></a>2.3 使用RHEL6.10 ISO 作为本地的 repo (我们也可以使用http/ ftp 配合RHEL 6.10搭建的源). 这个例子将 RHEL6.10 的ISO 挂载在”/mnt/iso”下. 并建立一个本地repo 文件.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;yum.repos.d&#x2F;rhel-6-server-rpms.repo</span><br><span class="line">[rhel-6-server-rpms]</span><br><span class="line">name &#x3D; rhel-6-server-rpms</span><br><span class="line">baseurl &#x3D; file:&#x2F;&#x2F;&#x2F;mnt&#x2F;iso</span><br><span class="line">enabled &#x3D; 1</span><br><span class="line">gpgcheck &#x3D; 0</span><br></pre></td></tr></table></figure><h2 id="2-4-建立完毕-使用-“yum-repolist”-就可以看到我们建立的repo了"><a href="#2-4-建立完毕-使用-“yum-repolist”-就可以看到我们建立的repo了" class="headerlink" title="2.4 建立完毕, 使用 “yum repolist” 就可以看到我们建立的repo了"></a>2.4 建立完毕, 使用 “yum repolist” 就可以看到我们建立的repo了</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># yum repolist</span><br><span class="line">......</span><br><span class="line">repo id             repo name           status</span><br><span class="line">rhel-6-server-rpms  rhel-6-server-rpms  0</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h2 id="2-5-开始进行系统的迁移"><a href="#2-5-开始进行系统的迁移" class="headerlink" title="2.5 开始进行系统的迁移"></a>2.5 开始进行系统的迁移</h2><h3 id="2-5-1-执行命令进行系统的迁移-“–enablerepo”-参数后面-接我们local-repo的源的名字-“rhel-6-server-rpms”-过程中-会有5次需要确认-输入”y”的地方-以安装为-“Desktop-Server-Platform-Development-X-Window-System”-的CentOS6-10系统-整个切换大约需要10分钟"><a href="#2-5-1-执行命令进行系统的迁移-“–enablerepo”-参数后面-接我们local-repo的源的名字-“rhel-6-server-rpms”-过程中-会有5次需要确认-输入”y”的地方-以安装为-“Desktop-Server-Platform-Development-X-Window-System”-的CentOS6-10系统-整个切换大约需要10分钟" class="headerlink" title="2.5.1 执行命令进行系统的迁移 ( “–enablerepo” 参数后面 接我们local repo的源的名字 “rhel-6-server-rpms”). 过程中,会有5次需要确认, 输入”y”的地方. 以安装为 “Desktop,  Server Platform Development, X Window System” 的CentOS6.10系统,整个切换大约需要10分钟."></a>2.5.1 执行命令进行系统的迁移 ( “–enablerepo” 参数后面 接我们local repo的源的名字 “rhel-6-server-rpms”). 过程中,会有5次需要确认, 输入”y”的地方. 以安装为 “Desktop,  Server Platform Development, X Window System” 的CentOS6.10系统,整个切换大约需要10分钟.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># convert2rhel --disable-submgr --disablerepo &quot;*&quot; --enablerepo rhel-6-server-rpms --debug</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">WARNING - By continuing you accept this EULA.</span><br><span class="line">Continue with the system conversion? [y&#x2F;n]: y</span><br><span class="line">...</span><br><span class="line">WARNING - The following packages will be removed...</span><br><span class="line">Continue with the system conversion? [y&#x2F;n]: y</span><br><span class="line">...</span><br><span class="line">WARNING - Only packages signed by CentOS are to be reinstalled. Red Hat support won&#39;t be provided for the following third party packages:</span><br><span class="line">Continue with the system conversion? [y&#x2F;n]: y</span><br><span class="line">...</span><br><span class="line">WARNING - The tool allows rollback of any action until this point.</span><br><span class="line">WARNING - By continuing all further changes on the system will need to be reverted manually by the user, if necessary.</span><br><span class="line">Continue with the system conversion? [y&#x2F;n]: y</span><br><span class="line">...</span><br><span class="line">WARNING - The convert2rhel is going to force-replace the only kernel installed, which has the same NEVRA as the only available RHEL kernel. If anything goes wrong with such replacement, the system will become unbootable. If you want the convert2rhel to install the RHEL kernel in a safer manner, you can install a different version of kernel first and then run convert2rhel again.</span><br><span class="line"></span><br><span class="line">Continue with the system conversion? [y&#x2F;n]: y</span><br></pre></td></tr></table></figure><h3 id="2-5-2-切换完毕之后-重启加载新的内核-整个切换的过程就结束了-简单好用吧-P"><a href="#2-5-2-切换完毕之后-重启加载新的内核-整个切换的过程就结束了-简单好用吧-P" class="headerlink" title="2.5.2 切换完毕之后,重启加载新的内核. 整个切换的过程就结束了.(简单好用吧 :P)"></a>2.5.2 切换完毕之后,重启加载新的内核. 整个切换的过程就结束了.(简单好用吧 :P)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WARNING - In order to boot the RHEL kernel, restart of the system is needed.</span><br><span class="line">[root@localhost ~]#reboot</span><br></pre></td></tr></table></figure><h1 id="我们也可以打开下面的链接-找到更多的参考信息"><a href="#我们也可以打开下面的链接-找到更多的参考信息" class="headerlink" title="我们也可以打开下面的链接,找到更多的参考信息."></a>我们也可以打开下面的链接,找到更多的参考信息.</h1><p><a href="https://access.redhat.com/articles/2360841">https://access.redhat.com/articles/2360841</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux 技巧(原创) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>手动安装 kpatch 编译环境</title>
      <link href="2021/02/19/kpatch_install_manuall_CN/"/>
      <url>2021/02/19/kpatch_install_manuall_CN/</url>
      
        <content type="html"><![CDATA[<h1 id="手动安装-kpatch-编译环境"><a href="#手动安装-kpatch-编译环境" class="headerlink" title="手动安装 kpatch 编译环境"></a>手动安装 kpatch 编译环境</h1><p><br></br></p><h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1. 环境"></a>1. 环境</h1><ul><li>Red Hat Enterprise Linux 7.6</li><li>3.10.0-957.el7.x86_64</li><li>ccache-3.3.4-1.el7.x86_64.rpm<br><br></br><h1 id="2-安装编译依赖的rpm-包"><a href="#2-安装编译依赖的rpm-包" class="headerlink" title="2. 安装编译依赖的rpm 包"></a>2. 安装编译依赖的rpm 包</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install gcc kernel-devel-$(uname -r) elfutils elfutils-devel pesign yum-utils zlib-devel binutils-devel newt-devel python-devel perl-ExtUtils-Embed audit-libs-devel numactl-devel pciutils-devel bison ncurses-devel gcc-plugin-devel kernel-debuginfo kernel-debuginfo-common gcc-plugin-devel patchutils</span><br></pre></td></tr></table></figure><br></br><h1 id="3-创建-ccache，-可以优化编译的速度-（可选步骤，但是建议安装）"><a href="#3-创建-ccache，-可以优化编译的速度-（可选步骤，但是建议安装）" class="headerlink" title="3. 创建 ccache， 可以优化编译的速度 （可选步骤，但是建议安装）"></a>3. 创建 ccache， 可以优化编译的速度 （可选步骤，但是建议安装）</h1></li><li>(ccache represents “compiler cache” which is a tool for the gcc compiler used to compile the same program over and over again with little downtime, While it may take a few seconds longer to compile a program the first time with ccache, subsequent compiles will be much, much faster.)<h2 id="3-1-安装ccache-rpm-包"><a href="#3-1-安装ccache-rpm-包" class="headerlink" title="3.1 安装ccache rpm 包"></a>3.1 安装ccache rpm 包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install https:&#x2F;&#x2F;dl.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;7&#x2F;x86_64&#x2F;Packages&#x2F;c&#x2F;ccache-3.3.4-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><h2 id="3-2-设置最大可用的cache-大小"><a href="#3-2-设置最大可用的cache-大小" class="headerlink" title="3.2 设置最大可用的cache 大小"></a>3.2 设置最大可用的cache 大小</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ccache --max-size&#x3D;8G</span><br></pre></td></tr></table></figure><h2 id="3-3-修改-gcc-别名，这样在调用gcc的时候就可以使用ccache了"><a href="#3-3-修改-gcc-别名，这样在调用gcc的时候就可以使用ccache了" class="headerlink" title="3.3 修改 gcc 别名，这样在调用gcc的时候就可以使用ccache了"></a>3.3 修改 gcc 别名，这样在调用gcc的时候就可以使用ccache了</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;profile.d&#x2F;gcc.sh</span><br><span class="line">alias gcc&#x3D;&quot;ccache gcc&quot;</span><br><span class="line"># source &#x2F;etc&#x2F;profile.d&#x2F;gcc.sh</span><br></pre></td></tr></table></figure><br></br><h1 id="4-下载kpatch-源代码"><a href="#4-下载kpatch-源代码" class="headerlink" title="4. 下载kpatch 源代码"></a>4. 下载kpatch 源代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># git clone https:&#x2F;&#x2F;github.com&#x2F;dynup&#x2F;kpatch.git</span><br></pre></td></tr></table></figure><br></br><h1 id="5-编译安装kpatch源代码"><a href="#5-编译安装kpatch源代码" class="headerlink" title="5. 编译安装kpatch源代码"></a>5. 编译安装kpatch源代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"># make -j2 &amp;&amp; make install</span><br><span class="line">make -C kpatch-build</span><br><span class="line">make -C kpatch</span><br><span class="line">make[1]: Entering directory &#96;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;kpatch&#39;</span><br><span class="line">make[1]: Nothing to be done for &#96;all&#39;.</span><br><span class="line">make[1]: Leaving directory &#96;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;kpatch&#39;</span><br><span class="line">make -C kmod</span><br><span class="line">make[1]: Entering directory &#96;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;kpatch-build&#39;</span><br><span class="line">gcc -MMD -MP -I..&#x2F;kmod&#x2F;patch -Iinsn -Wall -Wsign-compare -g -Werror   -c -o create-diff-object.o create-diff-object.c</span><br><span class="line">make[1]: Entering directory &#96;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;kmod&#39;</span><br><span class="line">make -C core clean</span><br><span class="line">make[2]: Entering directory &#96;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;kmod&#x2F;core&#39;</span><br><span class="line">rm -f -Rf .*.o.cmd .*.ko.cmd .tmp_versions *.o *.ko *.mod.c \</span><br><span class="line">Module.symvers</span><br><span class="line">make[2]: Leaving directory &#96;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;kmod&#x2F;core&#39;</span><br><span class="line">make -C core</span><br><span class="line">make[2]: Entering directory &#96;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;kmod&#x2F;core&#39;</span><br><span class="line">make -C &#x2F;lib&#x2F;modules&#x2F;3.10.0-957.el7.x86_64&#x2F;build M&#x3D;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;kmod&#x2F;core kpatch.ko</span><br><span class="line">gcc -MMD -MP -I..&#x2F;kmod&#x2F;patch -Iinsn -Wall -Wsign-compare -g -Werror   -c -o kpatch-elf.o kpatch-elf.c</span><br><span class="line">gcc -MMD -MP -I..&#x2F;kmod&#x2F;patch -Iinsn -Wall -Wsign-compare -g -Werror   -c -o lookup.o lookup.c</span><br><span class="line">gcc -MMD -MP -I..&#x2F;kmod&#x2F;patch -Iinsn -Wall -Wsign-compare -g -Werror   -c -o insn&#x2F;insn.o insn&#x2F;insn.c</span><br><span class="line">gcc -MMD -MP -I..&#x2F;kmod&#x2F;patch -Iinsn -Wall -Wsign-compare -g -Werror   -c -o insn&#x2F;inat.o insn&#x2F;inat.c</span><br><span class="line">gcc -MMD -MP -I..&#x2F;kmod&#x2F;patch -Iinsn -Wall -Wsign-compare -g -Werror   -c -o create-klp-module.o create-klp-module.c</span><br><span class="line">make[3]: Entering directory &#96;&#x2F;usr&#x2F;src&#x2F;kernels&#x2F;3.10.0-957.el7.x86_64&#39;</span><br><span class="line">make[3]: warning: jobserver unavailable: using -j1.  Add &#96;+&#39; to parent make rule.</span><br><span class="line">gcc -MMD -MP -I..&#x2F;kmod&#x2F;patch -Iinsn -Wall -Wsign-compare -g -Werror   -c -o create-kpatch-module.o create-kpatch-module.c</span><br><span class="line">  CC [M]  &#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;kmod&#x2F;core&#x2F;core.o</span><br><span class="line">gcc   create-diff-object.o kpatch-elf.o lookup.o insn&#x2F;insn.o insn&#x2F;inat.o  -lelf -o create-diff-object</span><br><span class="line">gcc   create-klp-module.o kpatch-elf.o  -lelf -o create-klp-module</span><br><span class="line">gcc   create-kpatch-module.o kpatch-elf.o  -lelf -o create-kpatch-module</span><br><span class="line">make[1]: Leaving directory &#96;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;kpatch-build&#39;</span><br><span class="line">make -C man</span><br><span class="line">make[1]: Entering directory &#96;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;man&#39;</span><br><span class="line">gzip -c -9 kpatch.1 &gt; kpatch.1.gz</span><br><span class="line">gzip -c -9 kpatch-build.1 &gt; kpatch-build.1.gz</span><br><span class="line">make[1]: Leaving directory &#96;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;man&#39;</span><br><span class="line">make -C contrib</span><br><span class="line">make[1]: Entering directory &#96;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;contrib&#39;</span><br><span class="line">make[1]: Nothing to be done for &#96;all&#39;.</span><br><span class="line">make[1]: Leaving directory &#96;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;contrib&#39;</span><br><span class="line">  CC [M]  &#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;kmod&#x2F;core&#x2F;shadow.o</span><br><span class="line">  LD [M]  &#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;kmod&#x2F;core&#x2F;kpatch.o</span><br><span class="line">  MODPOST 1 modules</span><br><span class="line">  CC      &#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;kmod&#x2F;core&#x2F;kpatch.mod.o</span><br><span class="line">  LD [M]  &#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;kmod&#x2F;core&#x2F;kpatch.ko</span><br><span class="line">make[3]: Leaving directory &#96;&#x2F;usr&#x2F;src&#x2F;kernels&#x2F;3.10.0-957.el7.x86_64&#39;</span><br><span class="line">make[2]: Leaving directory &#96;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;kmod&#x2F;core&#39;</span><br><span class="line">make[1]: Leaving directory &#96;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;kmod&#39;</span><br><span class="line">make -C kpatch-build install</span><br><span class="line">make[1]: Entering directory &#96;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;kpatch-build&#39;</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;install -d &#x2F;usr&#x2F;local&#x2F;libexec&#x2F;kpatch</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;install create-diff-object create-klp-module create-kpatch-module kpatch-gcc &#x2F;usr&#x2F;local&#x2F;libexec&#x2F;kpatch</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;install -d &#x2F;usr&#x2F;local&#x2F;bin</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;install kpatch-build &#x2F;usr&#x2F;local&#x2F;bin</span><br><span class="line">make[1]: Leaving directory &#96;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;kpatch-build&#39;</span><br><span class="line">make -C kpatch install</span><br><span class="line">make[1]: Entering directory &#96;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;kpatch&#39;</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;install -d &#x2F;usr&#x2F;local&#x2F;sbin</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;install kpatch &#x2F;usr&#x2F;local&#x2F;sbin</span><br><span class="line">make[1]: Leaving directory &#96;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;kpatch&#39;</span><br><span class="line">make -C kmod install</span><br><span class="line">make[1]: Entering directory &#96;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;kmod&#39;</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;install -d &#x2F;usr&#x2F;local&#x2F;lib&#x2F;kpatch&#x2F;3.10.0-957.el7.x86_64</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;install -m 644 core&#x2F;kpatch.ko &#x2F;usr&#x2F;local&#x2F;lib&#x2F;kpatch&#x2F;3.10.0-957.el7.x86_64</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;install -m 644 core&#x2F;Module.symvers &#x2F;usr&#x2F;local&#x2F;lib&#x2F;kpatch&#x2F;3.10.0-957.el7.x86_64</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;install -d &#x2F;usr&#x2F;local&#x2F;share&#x2F;kpatch&#x2F;patch</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;install -m 644 patch&#x2F;* &#x2F;usr&#x2F;local&#x2F;share&#x2F;kpatch&#x2F;patch</span><br><span class="line">make[1]: Leaving directory &#96;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;kmod&#39;</span><br><span class="line">make -C man install</span><br><span class="line">make[1]: Entering directory &#96;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;man&#39;</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;install -d &#x2F;usr&#x2F;local&#x2F;share&#x2F;man&#x2F;man1</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;install -m 644 kpatch.1.gz &#x2F;usr&#x2F;local&#x2F;share&#x2F;man&#x2F;man1</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;install -m 644 kpatch-build.1.gz &#x2F;usr&#x2F;local&#x2F;share&#x2F;man&#x2F;man1</span><br><span class="line">make[1]: Leaving directory &#96;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;man&#39;</span><br><span class="line">make -C contrib install</span><br><span class="line">make[1]: Entering directory &#96;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;contrib&#39;</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;install -d &#x2F;usr&#x2F;local&#x2F;lib&#x2F;systemd&#x2F;system</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;install -m 0644 kpatch.service &#x2F;usr&#x2F;local&#x2F;lib&#x2F;systemd&#x2F;system</span><br><span class="line">sed -i &#39;s~PREFIX~&#x2F;usr&#x2F;local~&#39; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;kpatch.service</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;install -d &#x2F;etc&#x2F;init</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;install -m 0644 kpatch.conf &#x2F;etc&#x2F;init</span><br><span class="line">sed -i &#39;s~PREFIX~&#x2F;usr&#x2F;local~&#39; &#x2F;etc&#x2F;init&#x2F;kpatch.conf</span><br><span class="line">make[1]: Leaving directory &#96;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;contrib&#39;</span><br></pre></td></tr></table></figure><br></br><h1 id="6-检查ccache是否正常工作"><a href="#6-检查ccache是否正常工作" class="headerlink" title="6. 检查ccache是否正常工作"></a>6. 检查ccache是否正常工作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># ccache -s</span><br><span class="line">cache directory                     &#x2F;root&#x2F;.ccache</span><br><span class="line">primary config                      &#x2F;root&#x2F;.ccache&#x2F;ccache.conf</span><br><span class="line">secondary config      (readonly)    &#x2F;etc&#x2F;ccache.conf</span><br><span class="line">cache hit (direct)                     0</span><br><span class="line">cache hit (preprocessed)               0</span><br><span class="line">cache miss                             2</span><br><span class="line">cache hit rate                      0.00 %</span><br><span class="line">called for link                        2</span><br><span class="line">called for preprocessing              16</span><br><span class="line">no input file                         75</span><br><span class="line">cleanups performed                     0</span><br><span class="line">files in cache                         4</span><br><span class="line">cache size                         733.2 kB</span><br><span class="line">max cache size                       5.0 GB</span><br></pre></td></tr></table></figure><br></br><h1 id="7-编译生成kpatch模块"><a href="#7-编译生成kpatch模块" class="headerlink" title="7. 编译生成kpatch模块"></a>7. 编译生成kpatch模块</h1></li><li>我已经提前修改了内核代码，所以就可以直接生成kpatch了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># ccache make -j2</span><br><span class="line">patch &lt; patch</span><br><span class="line">patching file testmod_drv.c</span><br><span class="line">KCFLAGS&#x3D;&quot;-ffunction-sections -fdata-sections&quot; &#x2F;usr&#x2F;bin&#x2F;make -C &#x2F;lib&#x2F;modules&#x2F;3.10.0-957.el7.x86_64&#x2F;build M&#x3D;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;test&#x2F;testmod testmod.ko</span><br><span class="line">make[1]: Entering directory &#96;&#x2F;usr&#x2F;src&#x2F;kernels&#x2F;3.10.0-957.el7.x86_64&#39;</span><br><span class="line">  CC [M]  &#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;test&#x2F;testmod&#x2F;testmod_drv.o</span><br><span class="line">  LD [M]  &#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;test&#x2F;testmod&#x2F;testmod.o</span><br><span class="line">  MODPOST 1 modules</span><br><span class="line">  CC      &#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;test&#x2F;testmod&#x2F;testmod.mod.o</span><br><span class="line">  LD [M]  &#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;test&#x2F;testmod&#x2F;testmod.ko</span><br><span class="line">make[1]: Leaving directory &#96;&#x2F;usr&#x2F;src&#x2F;kernels&#x2F;3.10.0-957.el7.x86_64&#39;</span><br><span class="line">strip --keep-file-symbols -d testmod_drv.o</span><br><span class="line">cp testmod_drv.o testmod_drv.o.patched</span><br><span class="line">patch -R &lt; patch</span><br><span class="line">patching file testmod_drv.c</span><br><span class="line">KCFLAGS&#x3D;&quot;-ffunction-sections -fdata-sections&quot; &#x2F;usr&#x2F;bin&#x2F;make -C &#x2F;lib&#x2F;modules&#x2F;3.10.0-957.el7.x86_64&#x2F;build M&#x3D;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;test&#x2F;testmod testmod.ko</span><br><span class="line">make[1]: Entering directory &#96;&#x2F;usr&#x2F;src&#x2F;kernels&#x2F;3.10.0-957.el7.x86_64&#39;</span><br><span class="line">  CC [M]  &#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;test&#x2F;testmod&#x2F;testmod_drv.o</span><br><span class="line">  LD [M]  &#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;test&#x2F;testmod&#x2F;testmod.o</span><br><span class="line">  MODPOST 1 modules</span><br><span class="line">  CC      &#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;test&#x2F;testmod&#x2F;testmod.mod.o</span><br><span class="line">  LD [M]  &#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;test&#x2F;testmod&#x2F;testmod.ko</span><br><span class="line">make[1]: Leaving directory &#96;&#x2F;usr&#x2F;src&#x2F;kernels&#x2F;3.10.0-957.el7.x86_64&#39;</span><br><span class="line">strip --keep-file-symbols -d testmod_drv.o</span><br><span class="line">cp testmod_drv.o testmod_drv.o.orig</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;make -C &#x2F;lib&#x2F;modules&#x2F;3.10.0-957.el7.x86_64&#x2F;build M&#x3D;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;test&#x2F;testmod clean</span><br><span class="line">make[1]: Entering directory &#96;&#x2F;usr&#x2F;src&#x2F;kernels&#x2F;3.10.0-957.el7.x86_64&#39;</span><br><span class="line">  CLEAN   &#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;test&#x2F;testmod&#x2F;.tmp_versions</span><br><span class="line">  CLEAN   &#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;test&#x2F;testmod&#x2F;Module.symvers</span><br><span class="line">make[1]: Leaving directory &#96;&#x2F;usr&#x2F;src&#x2F;kernels&#x2F;3.10.0-957.el7.x86_64&#39;</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;make -C &#x2F;lib&#x2F;modules&#x2F;3.10.0-957.el7.x86_64&#x2F;build M&#x3D;&#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;test&#x2F;testmod testmod.ko</span><br><span class="line">make[1]: Entering directory &#96;&#x2F;usr&#x2F;src&#x2F;kernels&#x2F;3.10.0-957.el7.x86_64&#39;</span><br><span class="line">  CC [M]  &#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;test&#x2F;testmod&#x2F;testmod_drv.o</span><br><span class="line">  LD [M]  &#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;test&#x2F;testmod&#x2F;testmod.o</span><br><span class="line">  MODPOST 1 modules</span><br><span class="line">  CC      &#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;test&#x2F;testmod&#x2F;testmod.mod.o</span><br><span class="line">  LD [M]  &#x2F;mnt&#x2F;kpatchDemoSam&#x2F;kpatch&#x2F;test&#x2F;testmod&#x2F;testmod.ko</span><br><span class="line">make[1]: Leaving directory &#96;&#x2F;usr&#x2F;src&#x2F;kernels&#x2F;3.10.0-957.el7.x86_64&#39;</span><br></pre></td></tr></table></figure><br></br><h1 id="8-安装测试生成的kpatch模块"><a href="#8-安装测试生成的kpatch模块" class="headerlink" title="8. 安装测试生成的kpatch模块"></a>8. 安装测试生成的kpatch模块</h1><h2 id="8-1-确认已经生成"><a href="#8-1-确认已经生成" class="headerlink" title="8.1 确认已经生成"></a>8.1 确认已经生成</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ls *.ko</span><br><span class="line">testmod.ko</span><br></pre></td></tr></table></figure><h2 id="8-2-安装kpatch模块"><a href="#8-2-安装kpatch模块" class="headerlink" title="8.2 安装kpatch模块"></a>8.2 安装kpatch模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># kpatch install testmod.ko</span><br><span class="line">installing testmod.ko (3.10.0-957.el7.x86_64)</span><br><span class="line">Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;kpatch.service to &#x2F;usr&#x2F;local&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;kpatch.service.</span><br></pre></td></tr></table></figure><h2 id="8-3-确认模块已经安装完毕"><a href="#8-3-确认模块已经安装完毕" class="headerlink" title="8.3 确认模块已经安装完毕"></a>8.3 确认模块已经安装完毕</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@vm2rhel76 (i_am_vm2_rhel76) testmod]# kpatch list</span><br><span class="line">Loaded patch modules:</span><br><span class="line"></span><br><span class="line">Installed patch modules:</span><br><span class="line">testmod (3.10.0-957.el7.x86_64)</span><br></pre></td></tr></table></figure><h2 id="8-4-卸载kpatch模块"><a href="#8-4-卸载kpatch模块" class="headerlink" title="8.4 卸载kpatch模块"></a>8.4 卸载kpatch模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># kpatch uninstall testmod.ko</span><br><span class="line">uninstalling testmod.ko (3.10.0-957.el7.x86_64)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux 技巧(原创) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>K8S 的 kubectl 常用命令</title>
      <link href="2021/02/19/K8S_kubectl_cheat_sheet/"/>
      <url>2021/02/19/K8S_kubectl_cheat_sheet/</url>
      
        <content type="html"><![CDATA[<h1 id="1-查询节点信息"><a href="#1-查询节点信息" class="headerlink" title="1 查询节点信息"></a>1 查询节点信息</h1><ul><li>简单的输出<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get node</span><br></pre></td></tr></table></figure></li><li>使用describe 显示更多信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl describe node vm40ckamaster144</span><br></pre></td></tr></table></figure></li><li>输出yaml格式的详细信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get node --output yaml</span><br></pre></td></tr></table></figure></li><li>编辑(可以添加 node-role.kubernetes.io/node: “” 到 label)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl edit node vm40ckanode145</span><br></pre></td></tr></table></figure></li><li>输出集群的信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl config view</span><br></pre></td></tr></table></figure><h1 id="2-输出集群信息"><a href="#2-输出集群信息" class="headerlink" title="2 输出集群信息"></a>2 输出集群信息</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl cluster-info</span><br></pre></td></tr></table></figure><h1 id="3-查询所有的namespace"><a href="#3-查询所有的namespace" class="headerlink" title="3 查询所有的namespace"></a>3 查询所有的namespace</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get pod --all-namespaces</span><br></pre></td></tr></table></figure><h1 id="4-查看指定namespace的pod-状态"><a href="#4-查看指定namespace的pod-状态" class="headerlink" title="4 查看指定namespace的pod 状态"></a>4 查看指定namespace的pod 状态</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get pod -n default</span><br></pre></td></tr></table></figure><h1 id="5-查看pod的详细信息"><a href="#5-查看pod的详细信息" class="headerlink" title="5 查看pod的详细信息"></a>5 查看pod的详细信息</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl describe pod coredns-f9fd979d6-x4z5k -n kube-system</span><br></pre></td></tr></table></figure><h1 id="6-编辑pod的状态"><a href="#6-编辑pod的状态" class="headerlink" title="6 编辑pod的状态"></a>6 编辑pod的状态</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl edit pod coredns-f9fd979d6-x4z5k -n kube-system</span><br></pre></td></tr></table></figure><h1 id="7-输出pod-的完整信息"><a href="#7-输出pod-的完整信息" class="headerlink" title="7 输出pod 的完整信息"></a>7 输出pod 的完整信息</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get pods busybox -o wide</span><br></pre></td></tr></table></figure><h1 id="8-看deployment-的信息"><a href="#8-看deployment-的信息" class="headerlink" title="8 看deployment 的信息"></a>8 看deployment 的信息</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get deployment -n kube-system</span><br></pre></td></tr></table></figure><h1 id="9-检查deployment-的详细信息"><a href="#9-检查deployment-的详细信息" class="headerlink" title="9 检查deployment 的详细信息"></a>9 检查deployment 的详细信息</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl describe deployment -n kube-system</span><br></pre></td></tr></table></figure><h1 id="10-建立、删除namespace"><a href="#10-建立、删除namespace" class="headerlink" title="10 建立、删除namespace"></a>10 建立、删除namespace</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># kubectl create namespace develop</span><br><span class="line"># kubectl delete namespaces develop</span><br></pre></td></tr></table></figure><h1 id="11-添加一个service，之后就可以通过集群任何一个节点IP-port访问"><a href="#11-添加一个service，之后就可以通过集群任何一个节点IP-port访问" class="headerlink" title="11 添加一个service，之后就可以通过集群任何一个节点IP+port访问"></a>11 添加一个service，之后就可以通过集群任何一个节点IP+port访问</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># kubectl expose pods&#x2F;kubernetes-bootcamp --type&#x3D;&quot;NodePort&quot; --port&#x3D;8080</span><br><span class="line">service&#x2F;kubernetes-bootcamp exposed</span><br></pre></td></tr></table></figure><h1 id="12-清除一个taints"><a href="#12-清除一个taints" class="headerlink" title="12 清除一个taints"></a>12 清除一个taints</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl taint node vm40ckamaster144 node-role.kubernetes.io&#x2F;master:NoSchedule-</span><br></pre></td></tr></table></figure><h1 id="13-scale-out-一个deployment"><a href="#13-scale-out-一个deployment" class="headerlink" title="13 scale out 一个deployment"></a>13 scale out 一个deployment</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl scale deployment&#x2F;coredns --replicas&#x3D;3 -n kube-system</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 云原生 容器(原创) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>openvswitch 系列第一篇 简介及基本数据结构</title>
      <link href="2021/02/16/openvswitch_section1_brief_and_struct/"/>
      <url>2021/02/16/openvswitch_section1_brief_and_struct/</url>
      
        <content type="html"><![CDATA[<p>openvswitch 系列第一篇 简介及基本数据结构</p><h1 id="1-openvswitch"><a href="#1-openvswitch" class="headerlink" title="1. openvswitch"></a>1. openvswitch</h1><h2 id="1-1-基本描述"><a href="#1-1-基本描述" class="headerlink" title="1.1 基本描述"></a>1.1 基本描述</h2><p>datapath为ovs内核模块，负责执行数据交换，也就是把从接收端口收到的数据包在流表中进行匹配，并执行匹配到的动作。内核中可以实现多个datapath(可以理解为桥,就是我们用ovs-vsctl看到的br0/br1之类), 一个datapath类似一个物理交换机,它可以对应多个vport(vport类似物理交换机的端口概念)。一个datapth关联一个flow table，一个flow table包含多个条目，每个条目包括两个内容：一个是flow的 match/key; 另一个是对应的action. 最常见的action是在不同vport中进行转发。</p><p>当一个数据报到达vport, 内核首先将它的flow key解析出来,之后在内核模块datapath的flow cache (大小为(sizeof(struct sw_flow)+ (nr_cpu_ids * sizeof(struct flow_stats <em>) = ( 1248 + 6</em>8 )=1296, 根据系统实际的CUP的数量多少会稍有不同)中的flow table中查找. 如果找到匹配的flow 规则,则去执行对应的action. 如果没有找到匹配的flow规则,则将数据报通过netlink的方式发送到用户空间的ovs-vswitchd处理,而用户空间的流表空间(65536)大的多,所以匹配到的几率也更高,通过在用户空间查找,并执行对应的action;如果找到,会通过netlink把用户空间的流表推送到datapath的flow cache中,后续的报文就可以直接在内核态处理.如果最后还是没有找到,那就使用默认的流表规则(丢掉这个包,或者其他).</p><p>用户空间有两个进程组成：ovs-vswitchd和ovsdb-server。<br>ovsdb-server保存了ovs-vswitchd的配置信息，ovsdb通常是一个文件, 并且保存在文件系统中，通常来说是/etc/openvswitch/conf.db<br>ovs-vswitchd是一个daemon，北向与Controller通过OpenFlow协议通信.南向与openvswitch内核模块通过netlink通信.东西向过OVSDB协议与ovsdb-server通信.</p><h2 id="1-2-openvswitch-内核模块示例"><a href="#1-2-openvswitch-内核模块示例" class="headerlink" title="1.2 openvswitch 内核模块示例"></a>1.2 openvswitch 内核模块示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># lsmod |grep openvswitch</span><br><span class="line">openvswitch           114793  3</span><br><span class="line">nf_nat_ipv6            14131  1 openvswitch</span><br><span class="line">nf_defrag_ipv6         35104  2 openvswitch,nf_conntrack_ipv6</span><br><span class="line">nf_nat_ipv4            14115  2 openvswitch,iptable_nat</span><br><span class="line">nf_nat                 26787  4 openvswitch,nf_nat_ipv4,nf_nat_ipv6,nf_nat_masquerade_ipv4</span><br><span class="line">nf_conntrack          133095  8 openvswitch,nf_nat,nf_nat_ipv4,nf_nat_ipv6,xt_conntrack,nf_nat_masquerade_ipv4,nf_conntrack_ipv4,nf_conntrack_ipv6</span><br><span class="line">libcrc32c              12644  4 xfs,openvswitch,nf_nat,nf_conntrack</span><br></pre></td></tr></table></figure><h2 id="1-3-通过openvswitch实现的bridge示例"><a href="#1-3-通过openvswitch实现的bridge示例" class="headerlink" title="1.3 通过openvswitch实现的bridge示例"></a>1.3 通过openvswitch实现的bridge示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl list-br</span><br><span class="line">br0</span><br></pre></td></tr></table></figure><h2 id="1-4-通过openvswitch实现的bridge里面的voprt示例"><a href="#1-4-通过openvswitch实现的bridge里面的voprt示例" class="headerlink" title="1.4 通过openvswitch实现的bridge里面的voprt示例"></a>1.4 通过openvswitch实现的bridge里面的voprt示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl list-ports br0</span><br><span class="line">vport1</span><br><span class="line">vport2</span><br></pre></td></tr></table></figure><h2 id="1-5-通过openvswitch实现的bridge和vport的整体概览"><a href="#1-5-通过openvswitch实现的bridge和vport的整体概览" class="headerlink" title="1.5 通过openvswitch实现的bridge和vport的整体概览."></a>1.5 通过openvswitch实现的bridge和vport的整体概览.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl show</span><br><span class="line">173a48d6-dbd3-420d-9433-384c437451a8</span><br><span class="line">    Bridge &quot;br0&quot;</span><br><span class="line">        fail_mode: secure</span><br><span class="line">        Port &quot;br0&quot;</span><br><span class="line">            Interface &quot;br0&quot;</span><br><span class="line">                type: internal</span><br><span class="line">        Port &quot;vport1&quot;</span><br><span class="line">            Interface &quot;vport1&quot;</span><br><span class="line">                type: internal</span><br><span class="line">        Port &quot;vport2&quot;</span><br><span class="line">            Interface &quot;vport2&quot;</span><br><span class="line">                type: internal</span><br><span class="line">    ovs_version: &quot;2.0.0&quot;</span><br></pre></td></tr></table></figure><h2 id="1-6-流表示例"><a href="#1-6-流表示例" class="headerlink" title="1.6 流表示例"></a>1.6 流表示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ovs-ofctl dump-flows br0</span><br><span class="line">NXST_FLOW reply (xid&#x3D;0x4):</span><br><span class="line"> cookie&#x3D;0x0, duration&#x3D;24.784s, table&#x3D;0, n_packets&#x3D;0, n_bytes&#x3D;0, idle_age&#x3D;24, ip,nw_src&#x3D;200.200.200.0 actions&#x3D;drop</span><br></pre></td></tr></table></figure><h1 id="2-相对应的结构体示例"><a href="#2-相对应的结构体示例" class="headerlink" title="2. 相对应的结构体示例"></a>2. 相对应的结构体示例</h1><h2 id="2-1-datapath的代码描述-datapath-类似数据通路-其实是bridge的抽象"><a href="#2-1-datapath的代码描述-datapath-类似数据通路-其实是bridge的抽象" class="headerlink" title="2.1 datapath的代码描述 (datapath 类似数据通路,其实是bridge的抽象)"></a>2.1 datapath的代码描述 (datapath 类似数据通路,其实是bridge的抽象)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">struct datapath &#123;</span><br><span class="line">struct rcu_head rcu; &#x2F;&#x2F; RCU回调, 用来负责推迟延迟销毁datapath</span><br><span class="line">struct list_head list_node; &#x2F;&#x2F; datapath链表,主要用来把datapath连接起来.</span><br><span class="line">struct flow_table table; &#x2F;&#x2F; datapath里面的流表</span><br><span class="line">struct hlist_head *ports; &#x2F;&#x2F; datapath里面的Switch ports. 是以哈希表的形式表示.  %OVSP_LOCAL 这个端口一直在datapath建立的时候就存在. 用 ovs_mutex 和 RCU 来进行锁保护.</span><br><span class="line">struct dp_stats_percpu __percpu *stats_percpu; &#x2F;&#x2F; Pre-CPU的datapath状态信息</span><br><span class="line">possible_net_t net; &#x2F;&#x2F; datapat的网络命名空间的引用.</span><br><span class="line">u32 user_features; &#x2F;&#x2F; datapath用户所具有的能力.</span><br><span class="line">u32 max_headroom; &#x2F;&#x2F;留给datapath里面的所有vports使用的最大headroom.</span><br><span class="line">  struct hlist_head *meters; &#x2F;&#x2F; datapath的meters, 参数之类.</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-2-vport的代码描述"><a href="#2-2-vport的代码描述" class="headerlink" title="2.2 vport的代码描述"></a>2.2 vport的代码描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">struct vport &#123;</span><br><span class="line">struct net_device *dev; &#x2F;&#x2F; 指向net_device的指针</span><br><span class="line">struct datapath*dp; &#x2F;&#x2F; 指向这个port所在datapath的指针,表示该端口是属于哪个datapath的</span><br><span class="line">struct vport_portids __rcu *upcall_portids; &#x2F;&#x2F;通过RCU机制保护的结构 &#39;struct vport_portids&#39;</span><br><span class="line">u16 port_no; &#x2F;&#x2F;在datapath里面所有端口数组的索引,唯一标识该端口.因为一个datapath上有多个端口，而这些端口都是用哈希链表来存储的，所以这是链表元素（里面没有数据，只有next和prev前驱后继指针，数据部分就是vport结构体中的其他成员）</span><br><span class="line">struct hlist_node hash_node; &#x2F;&#x2F;在设备hash表里面的元素</span><br><span class="line">struct hlist_node dp_hash_node; &#x2F;&#x2F;在datapath的hash表里面的元素</span><br><span class="line">const struct vport_ops *ops; &#x2F;&#x2F; 指向操作函数的指针,结构体里面存放了很多操作函数的函数指针</span><br><span class="line">struct list_head detach_list; &#x2F;&#x2F;用来在net-exit调用时撤销vport的链表</span><br><span class="line">struct rcu_head rcu; &#x2F;&#x2F;撤销datapath的RCU 回调函数头</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-3-流表flow-table-有五部分组成-一个是流表-另外是流表的实例-流表的内容-流表的key值-流表操作集和"><a href="#2-3-流表flow-table-有五部分组成-一个是流表-另外是流表的实例-流表的内容-流表的key值-流表操作集和" class="headerlink" title="2.3  流表flow_table (有五部分组成,一个是流表,另外是流表的实例,流表的内容,流表的key值,流表操作集和)"></a>2.3  流表flow_table (有五部分组成,一个是流表,另外是流表的实例,流表的内容,流表的key值,流表操作集和)</h2><h3 id="2-3-1-流表"><a href="#2-3-1-流表" class="headerlink" title="2.3.1 流表"></a>2.3.1 流表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct flow_table &#123; &#x2F;&#x2F; 流表</span><br><span class="line">struct table_instance __rcu *ti;  &#x2F;&#x2F; 具体流表实例</span><br><span class="line">struct table_instance __rcu *ufid_ti; &#x2F;&#x2F;包含unique flow identifier的流实例,</span><br><span class="line">struct list_head mask_list; &#x2F;&#x2F; 链表用来串联整个流表 (一般配合container_of使用来获取结构体的头指针)</span><br><span class="line">unsigned long last_rehash; &#x2F;&#x2F; 会初始化为当前的jiffies. 用来计间用</span><br><span class="line">unsigned int count; &#x2F;&#x2F; 具体流表的个数, ovs_flow_tbl_init流表初始化时,会置为0</span><br><span class="line">unsigned int ufid_count; &#x2F;&#x2F; 具体unique flow identifier流表的个数,ovs_flow_tbl_init流表初始化时,会置为0</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-流表的具体实例"><a href="#2-3-2-流表的具体实例" class="headerlink" title="2.3.2 流表的具体实例"></a>2.3.2 流表的具体实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct table_instance &#123; &#x2F;&#x2F;流表的具体实例</span><br><span class="line">struct flex_array *buckets; &#x2F;&#x2F;哈希桶地址指针. 具体的流表项, 主要是方便处理.(真实的流表应该在这里面)</span><br><span class="line">unsigned int n_buckets; &#x2F;&#x2F; 哈希桶个数</span><br><span class="line">struct rcu_head rcu;&#x2F;&#x2F; 操作(撤销?)流表的RCU 回调函数头</span><br><span class="line">int node_ver;  &#x2F;&#x2F;node_ver的存在使得我们可以控制sw_flow的哪个hlist_node链入到bucket中</span><br><span class="line">u32 hash_seed; &#x2F;&#x2F;哈希算法需要的种子</span><br><span class="line">bool keep_flows;&#x2F;&#x2F;是否保留流表项</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-流表里面所具体保存的内容"><a href="#2-3-3-流表里面所具体保存的内容" class="headerlink" title="2.3.3 流表里面所具体保存的内容"></a>2.3.3 流表里面所具体保存的内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">struct sw_flow &#123; &#x2F;&#x2F; 流表里面所具体保存的内容.</span><br><span class="line">struct rcu_head rcu; &#x2F;&#x2F; rcu保护机制 (撤销流表项的RCU 回调函数头)</span><br><span class="line">struct &#123;</span><br><span class="line">struct hlist_node node[2]; &#x2F;&#x2F; 两个节点指针，用来链接作用，前驱后继指针</span><br><span class="line">u32 hash; &#x2F;&#x2F; hash值</span><br><span class="line">&#125; flow_table, ufid_table; &#x2F;&#x2F; 为两种流表各定义对应的结构.</span><br><span class="line">int stats_last_writer;&#x2F;&#x2F; 最近一个CPU写操作的ID</span><br><span class="line">struct sw_flow_key key; &#x2F;&#x2F; 流表中的key值, 这个是个关键东东了,关系到报文要匹配那些流表key</span><br><span class="line">struct sw_flow_id id; &#x2F;&#x2F; 流表自身的ID</span><br><span class="line">struct cpumask cpu_used_mask; &#x2F;&#x2F; 也是流表中的key</span><br><span class="line">struct sw_flow_mask *mask; &#x2F;&#x2F; 要匹配的mask结构体</span><br><span class="line">struct sw_flow_actions __rcu *sf_acts; &#x2F;&#x2F; 相应的action动作.  使用了rcu机制保护的.</span><br><span class="line">struct flow_stats __rcu *stats[]; &#x2F;* 数据流的状态,每一个CPU上都有,第一个是流建立的时候, 其余的是在获取stats[0].lock锁之后,根据需求分配. 使用了rcu机制保护的.</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-3-4-流表中的key值，主要是保存数据包中协议相关信息，这是报文要进行流表匹配的关键结构"><a href="#2-3-4-流表中的key值，主要是保存数据包中协议相关信息，这是报文要进行流表匹配的关键结构" class="headerlink" title="2.3.4 流表中的key值，主要是保存数据包中协议相关信息，这是报文要进行流表匹配的关键结构"></a>2.3.4 流表中的key值，主要是保存数据包中协议相关信息，这是报文要进行流表匹配的关键结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">struct sw_flow_key &#123;</span><br><span class="line">u8 tun_opts[IP_TUNNEL_OPTS_MAX];</span><br><span class="line">u8 tun_opts_len;</span><br><span class="line">struct ip_tunnel_key tun_key;&#x2F;&#x2F; 隧道的封装key.</span><br><span class="line">struct &#123;</span><br><span class="line">u32priority;&#x2F;&#x2F; 包的Qos优先级</span><br><span class="line">u32skb_mark;&#x2F;&#x2F; skb包的标记</span><br><span class="line">u16in_port;&#x2F;&#x2F; 包进入的端口号或者DP_MAX_PORTS</span><br><span class="line">&#125; __packed phy; &#x2F;&#x2F; Safe when right after &#39;tun_key&#39;.</span><br><span class="line">u8 mac_proto;&#x2F;&#x2F; 链路层协议, 比如 Ethernet, ATM 等等</span><br><span class="line">u8 tun_proto;&#x2F;&#x2F; 封装协议, 比如GRE, VXLAN 等等</span><br><span class="line">u32 ovs_flow_hash;&#x2F;&#x2F; Datapath 所计算出的 hash 值</span><br><span class="line">u32 recirc_id;&#x2F;&#x2F; 转发的ID Recirculation ID.</span><br><span class="line">struct &#123;</span><br><span class="line">u8     src[ETH_ALEN];&#x2F;&#x2F; Ethernet源mac地址</span><br><span class="line">u8     dst[ETH_ALEN];&#x2F;&#x2F; Ethernet目的mac地址</span><br><span class="line">struct vlan_head vlan; &#x2F;&#x2F; vlan 的信息, 802.1q or 802.1ad 类型 以及vlan id</span><br><span class="line">struct vlan_head cvlan; &#x2F;&#x2F; vlan 的信息给Conntrack用的, 802.1q or 802.1ad 类型 以及vlan id</span><br><span class="line">__be16 type;&#x2F;&#x2F; 以太网帧类型</span><br><span class="line">&#125; eth; &#x2F;&#x2F; 2 层的. 数据链路层的匹配信息.</span><br><span class="line">u8 ct_state; &#x2F;&#x2F; Conntrack的状态,有或者没有</span><br><span class="line">u8 ct_orig_proto;&#x2F;&#x2F;Conntrack 的原始路径的ip协议. 其实用来表示有没有包含original direction key 内容.</span><br><span class="line">union &#123;</span><br><span class="line">struct &#123;</span><br><span class="line">__be32 top_lse;&#x2F;* top label stack entry *&#x2F;</span><br><span class="line">&#125; mpls;</span><br><span class="line">struct &#123;</span><br><span class="line">u8     proto;&#x2F;&#x2F; IP包协议类型 TCP：6；UDP：17；ARP操作码类型用低8位表示</span><br><span class="line">u8     tos;    &#x2F;&#x2F; IP包服务类型</span><br><span class="line">u8     ttl;    &#x2F;&#x2F; IP包生存时间，经过多少跳路由</span><br><span class="line">u8     frag;&#x2F;&#x2F; 网桥中的OVS_FRAG_TYPE_*标记</span><br><span class="line">&#125; ip; &#x2F;&#x2F; 3 层的. ip 层的匹配信息.</span><br><span class="line">&#125;;</span><br><span class="line">u16 ct_zone;&#x2F;&#x2F; 追踪连接状态区</span><br><span class="line">struct &#123;</span><br><span class="line">__be16 src;&#x2F;&#x2F; TCP&#x2F;UDP&#x2F;SCTP的源端口，应用层发送数据的端口</span><br><span class="line">__be16 dst;&#x2F;&#x2F; TCP&#x2F;UDP&#x2F;SCTP的目的端口，也是指应用层传输数据端口</span><br><span class="line">__be16 flags;&#x2F;&#x2F; TCP 的标记</span><br><span class="line">&#125; tp; &#x2F;&#x2F; 4 层的. 传输层的匹配信息</span><br><span class="line">union &#123;</span><br><span class="line">struct &#123;</span><br><span class="line">struct &#123;</span><br><span class="line">__be32 src;&#x2F;&#x2F; IP源地址</span><br><span class="line">__be32 dst;&#x2F;&#x2F; IP目的地址</span><br><span class="line">&#125; addr; &#x2F;&#x2F; IP 的信息</span><br><span class="line">union &#123;</span><br><span class="line">struct &#123;</span><br><span class="line">__be32 src;  &#x2F;&#x2F; Conntrack IP源地址</span><br><span class="line">__be32 dst; &#x2F;&#x2F; Conntrack IP目的地址</span><br><span class="line">&#125; ct_orig;&#x2F;&#x2F; 追踪连接的原始目的区域</span><br><span class="line">struct &#123;</span><br><span class="line">u8 sha[ETH_ALEN];&#x2F;&#x2F; ARP的源Mac地址</span><br><span class="line">u8 tha[ETH_ALEN];&#x2F;&#x2F; ARP的目的Mac地址</span><br><span class="line">&#125; arp; &#x2F;&#x2F; arp 的信息</span><br><span class="line">&#125;;</span><br><span class="line">&#125; ipv4; &#x2F;&#x2F; IPv4 的信息</span><br><span class="line">struct &#123;</span><br><span class="line">struct &#123;</span><br><span class="line">struct in6_addr src;&#x2F;&#x2F; IPv6 源地址</span><br><span class="line">struct in6_addr dst;&#x2F;&#x2F; IPv6 目的地址</span><br><span class="line">&#125; addr; &#x2F;&#x2F; IPv6 的IP层信息</span><br><span class="line">__be32 label;&#x2F;&#x2F; IPv6 流的标示</span><br><span class="line">union &#123;</span><br><span class="line">struct &#123;</span><br><span class="line">struct in6_addr src; &#x2F;&#x2F; Conntrack IP源地址</span><br><span class="line">struct in6_addr dst; &#x2F;&#x2F; Conntrack IP目的地址</span><br><span class="line">&#125; ct_orig;&#x2F;&#x2F; 追踪连接的原始目的区域</span><br><span class="line">struct &#123;</span><br><span class="line">struct in6_addr target;&#x2F;&#x2F; Neighbor Discovery 目标地址</span><br><span class="line">u8 sll[ETH_ALEN];&#x2F;&#x2F; Neighbor Discovery 源链接层地址</span><br><span class="line">u8 tll[ETH_ALEN];&#x2F;&#x2F; Neighbor Discovery 目标接层地址</span><br><span class="line">&#125; nd; &#x2F;&#x2F;Neighbor Discovery (ND) protocol 是一个IPV6 的协议. 主机或者路由使用ND协议去侦测邻居的链路层地址,在必要的时候,可以及时清除无效的cache</span><br><span class="line">&#125;;</span><br><span class="line">&#125; ipv6; &#x2F;&#x2F; IPV6 信息.</span><br><span class="line">struct ovs_key_nsh nsh;  &#x2F;&#x2F; 网络服务头</span><br><span class="line">&#125;;</span><br><span class="line">struct &#123;</span><br><span class="line">&#x2F;&#x2F; Connection tracking fields 连接监测的信息, CT主要用来做网络连接状态的识别. OVS2.5版本开始支持. 涉及到有状态的防火墙和无状态的防火墙.Openstack则从M版开始，使用OVS的新特性，来实现“有状态防火墙”中的“Security Group”功能</span><br><span class="line">struct &#123;</span><br><span class="line">__be16 src;&#x2F;* CT orig tuple tp src port. 连接监测源端口.用于“有状态防火墙”的流识别</span><br><span class="line">__be16 dst;&#x2F;* CT orig tuple tp dst port. 连接监测目的端口.用于“有状态防火墙”的流识别</span><br><span class="line">&#125; orig_tp;</span><br><span class="line">u32 mark;</span><br><span class="line">struct ovs_key_ct_labels labels; &#x2F;&#x2F; 这个是个32bit联合体,作为一个labels</span><br><span class="line">&#125; ct; &#x2F;&#x2F; Connection tracking, 报文进来可能会先进入这里,如果有的话, 然后匹配自身的流表之后再去匹配datapath的流表,再之后执行action.</span><br><span class="line"></span><br><span class="line">&#125; __aligned(BITS_PER_LONG&#x2F;8); &#x2F;&#x2F; 主要是用来做数据对齐用的. 考虑到存取的效率, 在64bit机器上,就是8字节对齐</span><br></pre></td></tr></table></figure><h3 id="2-3-5-流表项操作-也就是能对流表做些什么操作"><a href="#2-3-5-流表项操作-也就是能对流表做些什么操作" class="headerlink" title="2.3.5 流表项操作, 也就是能对流表做些什么操作."></a>2.3.5 流表项操作, 也就是能对流表做些什么操作.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct sw_flow_actions &#123;</span><br><span class="line">struct rcu_head rcu; &#x2F;&#x2F; 要操作流表,肯定要个rcu来加锁同步了.</span><br><span class="line">size_t orig_len;&#x2F;&#x2F; 来自 flow_cmd_new netlink actions 操作的长度</span><br><span class="line">u32 actions_len;  &#x2F;&#x2F; 操作的长度.</span><br><span class="line">struct nlattr actions[]; &#x2F;&#x2F;流表项的操作集合,这个是一个netlink的结构,一个就是数据包的长度,一个就是类型.</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>到此,第一部分就介绍完毕了. 后续会有网桥的操作,vport的操作,数据报的处理等等的介绍…</p>]]></content>
      
      
      <categories>
          
          <category> 网络 OVS(原创) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Red Hat Enterprise Linux 8 的新玩意 第4篇 通过`grub`配置Kernel启动参数</title>
      <link href="2021/02/16/RHEL8-news-toys-section4_Kernel_cmdline/"/>
      <url>2021/02/16/RHEL8-news-toys-section4_Kernel_cmdline/</url>
      
        <content type="html"><![CDATA[<h1 id="Red-Hat-Enterprise-Linux-8-RHEL8-的新玩意-第4篇-通过grub配置Kernel启动参数"><a href="#Red-Hat-Enterprise-Linux-8-RHEL8-的新玩意-第4篇-通过grub配置Kernel启动参数" class="headerlink" title="Red Hat Enterprise Linux 8 (RHEL8) 的新玩意 第4篇 通过grub配置Kernel启动参数"></a>Red Hat Enterprise Linux 8 (RHEL8) 的新玩意 第4篇 通过<code>grub</code>配置Kernel启动参数</h1><p><strong>内核启动参数</strong>, 简单的说就是可以给内核传递参数，并且用于控制内核行为方式.</p><h2 id="1-通常来说我们有3种方式可以给内核传递参数"><a href="#1-通常来说我们有3种方式可以给内核传递参数" class="headerlink" title="1 通常来说我们有3种方式可以给内核传递参数"></a>1 通常来说我们有3种方式可以给内核传递参数</h2><h3 id="1-1-在编译内核时侯-添加我们要的参数"><a href="#1-1-在编译内核时侯-添加我们要的参数" class="headerlink" title="1.1 在编译内核时侯,添加我们要的参数"></a>1.1 在编译内核时侯,添加我们要的参数</h3><h3 id="1-2-内核启动时通过boootloader添加-比如通过gurb或者uboot-arm或者ppc平台"><a href="#1-2-内核启动时通过boootloader添加-比如通过gurb或者uboot-arm或者ppc平台" class="headerlink" title="1.2 内核启动时通过boootloader添加,比如通过gurb或者uboot (arm或者ppc平台)"></a>1.2 内核启动时通过boootloader添加,比如通过<code>gurb</code>或者<code>uboot</code> (arm或者ppc平台)</h3><h3 id="1-3-在系统运行的时候-通过修改-proc和-sys里面对应的文件"><a href="#1-3-在系统运行的时候-通过修改-proc和-sys里面对应的文件" class="headerlink" title="1.3 在系统运行的时候,通过修改/proc和/sys里面对应的文件."></a>1.3 在系统运行的时候,通过修改<code>/proc</code>和<code>/sys</code>里面对应的文件.</h3><h2 id="2-这里-我们讲第二项-内核启动时通过boootloader添加-比如通过gurb或者uboot-通常来说我们可以通过直接修改-boot-grub2-grub-cfg文件来现实-但是我们看到-在RHEL8上面-boot-grub2-grub-cfg居然没有我们熟悉linux-boot-vmlinuz-xxx-x86-64-root-UUID-xxx的条目-这是什么回事-比如我们要重定向串口输出-添加console-ttyS0-115200n8这个参数要加到什么地方-不要紧-让我们先来看看-boot下面都有些什么文件"><a href="#2-这里-我们讲第二项-内核启动时通过boootloader添加-比如通过gurb或者uboot-通常来说我们可以通过直接修改-boot-grub2-grub-cfg文件来现实-但是我们看到-在RHEL8上面-boot-grub2-grub-cfg居然没有我们熟悉linux-boot-vmlinuz-xxx-x86-64-root-UUID-xxx的条目-这是什么回事-比如我们要重定向串口输出-添加console-ttyS0-115200n8这个参数要加到什么地方-不要紧-让我们先来看看-boot下面都有些什么文件" class="headerlink" title="2 这里, 我们讲第二项(内核启动时通过boootloader添加,比如通过gurb或者uboot); 通常来说我们可以通过直接修改/boot/grub2/grub.cfg文件来现实.但是我们看到,在RHEL8上面,/boot/grub2/grub.cfg居然没有我们熟悉linux /boot/vmlinuz-xxx.x86_64 root=UUID=xxx的条目. 这是什么回事,比如我们要重定向串口输出,添加console=ttyS0,115200n8这个参数要加到什么地方?不要紧,让我们先来看看\boot下面都有些什么文件."></a>2 这里, 我们讲第二项(内核启动时通过boootloader添加,比如通过<code>gurb</code>或者<code>uboot</code>); 通常来说我们可以通过直接修改<code>/boot/grub2/grub.cfg</code>文件来现实.但是我们看到,在RHEL8上面,<code>/boot/grub2/grub.cfg</code>居然没有我们熟悉<code>linux /boot/vmlinuz-xxx.x86_64 root=UUID=xxx</code>的条目. 这是什么回事,比如我们要重定向串口输出,添加<code>console=ttyS0,115200n8</code>这个参数要加到什么地方?不要紧,让我们先来看看<code>\boot</code>下面都有些什么文件.</h2><h2 id="3-查看启动目录-boot-的内容-我们知道系统是启动这个内核vmlinuz-4-18-0-80-el8-x86-64"><a href="#3-查看启动目录-boot-的内容-我们知道系统是启动这个内核vmlinuz-4-18-0-80-el8-x86-64" class="headerlink" title="3 查看启动目录/boot/的内容, 我们知道系统是启动这个内核vmlinuz-4.18.0-80.el8.x86_64"></a>3 查看启动目录<code>/boot/</code>的内容, 我们知道系统是启动这个内核<code>vmlinuz-4.18.0-80.el8.x86_64</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@vm3_rhel8 ~]# cd &#x2F;boot&#x2F; &amp;&amp; ls</span><br><span class="line">config-4.18.0-80.el8.x86_64                              initramfs-4.18.0-80.el8.x86_64kdump.img</span><br><span class="line">efi                                                      loader</span><br><span class="line">grub2                                                    System.map-4.18.0-80.el8.x86_64</span><br><span class="line">initramfs-0-rescue-54d1217dfdda4592a9e30059e470cf24.img  vmlinuz-0-rescue-54d1217dfdda4592a9e30059e470cf24</span><br><span class="line">initramfs-4.18.0-80.el8.x86_64.img                       vmlinuz-4.18.0-80.el8.x86_64</span><br></pre></td></tr></table></figure><h2 id="4-知道了系统内核vmlinuz-4-18-0-80-el8-x86-64的名字-我们来找找有配置它的地方-来grub一下"><a href="#4-知道了系统内核vmlinuz-4-18-0-80-el8-x86-64的名字-我们来找找有配置它的地方-来grub一下" class="headerlink" title="4 知道了系统内核vmlinuz-4.18.0-80.el8.x86_64的名字,我们来找找有配置它的地方,来grub一下"></a>4 知道了系统内核<code>vmlinuz-4.18.0-80.el8.x86_64</code>的名字,我们来找找有配置它的地方,来<code>grub</code>一下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@vm3_rhel8 boot]# grep -n &quot;vmlinuz-4.18.0-80.el8.x86_64&quot; -r .&#x2F;</span><br><span class="line">.&#x2F;loader&#x2F;entries&#x2F;54d1217dfdda4592a9e30059e470cf24-4.18.0-80.el8.x86_64.conf:3:linux &#x2F;boot&#x2F;vmlinuz-4.18.0-80.el8.x86_64</span><br><span class="line">.&#x2F;.vmlinuz-4.18.0-80.el8.x86_64.hmac:1:54d1217dfdda4592a9e30059e470cf24  &#x2F;boot&#x2F;vmlinuz-4.18.0-80.el8.x86_64</span><br></pre></td></tr></table></figure><h2 id="5-好了-我们找到了相关的文件-loader-entries-54d1217dfdda4592a9e30059e470cf24-4-18-0-80-el8-x86-64-conf-那就来看看里面都有些什么cat一下"><a href="#5-好了-我们找到了相关的文件-loader-entries-54d1217dfdda4592a9e30059e470cf24-4-18-0-80-el8-x86-64-conf-那就来看看里面都有些什么cat一下" class="headerlink" title="5 好了, 我们找到了相关的文件./loader/entries/54d1217dfdda4592a9e30059e470cf24-4.18.0-80.el8.x86_64.conf, 那就来看看里面都有些什么cat一下."></a>5 好了, 我们找到了相关的文件<code>./loader/entries/54d1217dfdda4592a9e30059e470cf24-4.18.0-80.el8.x86_64.conf</code>, 那就来看看里面都有些什么<code>cat</code>一下.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">title Red Hat Enterprise Linux (4.18.0-80.el8.x86_64) 8.0 (Ootpa)</span><br><span class="line">version 4.18.0-80.el8.x86_64</span><br><span class="line">linux &#x2F;boot&#x2F;vmlinuz-4.18.0-80.el8.x86_64</span><br><span class="line">initrd &#x2F;boot&#x2F;initramfs-4.18.0-80.el8.x86_64.img $tuned_initrd</span><br><span class="line">options $kernelopts $tuned_params</span><br><span class="line">id rhel-20190313123447-4.18.0-80.el8.x86_64</span><br><span class="line">grub_users $grub_users</span><br><span class="line">grub_arg --unrestricted</span><br><span class="line">grub_class kernel.&#x2F;loader&#x2F;entries&#x2F;54d1217dfdda4592a9e30059e470cf24-4.18.0-80.el8.x86_64.conf</span><br></pre></td></tr></table></figure><h2 id="6-有熟悉的面孔吧-看起来我们可以在这配置内核的参数-而且变量kernelopts似乎是对应的启动参数"><a href="#6-有熟悉的面孔吧-看起来我们可以在这配置内核的参数-而且变量kernelopts似乎是对应的启动参数" class="headerlink" title="6 有熟悉的面孔吧,看起来我们可以在这配置内核的参数,而且变量kernelopts似乎是对应的启动参数."></a>6 有熟悉的面孔吧,看起来我们可以在这配置内核的参数,而且变量<code>kernelopts</code>似乎是对应的启动参数.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@vm3_rhel8 boot]# grep -n &quot;kernelopts&quot; -r .&#x2F;</span><br><span class="line">.&#x2F;grub2&#x2F;grubenv:3:kernelopts&#x3D;root&#x3D;UUID&#x3D;06246343-6949-4824-a96f-6ce27ff92cd5 ro crashkernel&#x3D;auto</span><br><span class="line">.&#x2F;loader&#x2F;entries&#x2F;54d1217dfdda4592a9e30059e470cf24-0-rescue.conf:5:options $kernelopts</span><br></pre></td></tr></table></figure><h2 id="7-它在这里定义-那我们就直接编辑添加我们需要的内核参数就好了-改一下-变成这样"><a href="#7-它在这里定义-那我们就直接编辑添加我们需要的内核参数就好了-改一下-变成这样" class="headerlink" title="7 它在这里定义,那我们就直接编辑添加我们需要的内核参数就好了.改一下,变成这样."></a>7 它在这里定义,那我们就直接编辑添加我们需要的内核参数就好了.改一下,变成这样.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;grub2&#x2F;grubenv:3:kernelopts&#x3D;root&#x3D;UUID&#x3D;06246343-6949-4824-a96f-6ce27ff92cd5 ro crashkernel&#x3D;auto console&#x3D;ttyS0,115200n8 console&#x3D;tty0</span><br></pre></td></tr></table></figure><h2 id="8-深入一些-那这个options-kernelopts-又是怎么就能传递到内核去的呢"><a href="#8-深入一些-那这个options-kernelopts-又是怎么就能传递到内核去的呢" class="headerlink" title="8 深入一些,那这个options $kernelopts 又是怎么就能传递到内核去的呢?"></a>8 深入一些,那这个<code>options $kernelopts</code> 又是怎么就能传递到内核去的呢?</h2><h3 id="8-1-小Tips-先来打开个debug开关-我们可以添加set-debug-blscfg-grub会通过函数grub-dprintf输出对应的debug消息-到文件-boot-grub2-grub-cfg-然后注意把启动设置到一个不存在menu-比如set-pager-1-这样的话-gurb就会因为找不到启动项而停住-那我们就可以看到输出呢-另外多说一句-还有这些模块可以用来调试-有兴趣可以试试看"><a href="#8-1-小Tips-先来打开个debug开关-我们可以添加set-debug-blscfg-grub会通过函数grub-dprintf输出对应的debug消息-到文件-boot-grub2-grub-cfg-然后注意把启动设置到一个不存在menu-比如set-pager-1-这样的话-gurb就会因为找不到启动项而停住-那我们就可以看到输出呢-另外多说一句-还有这些模块可以用来调试-有兴趣可以试试看" class="headerlink" title="8.1 小Tips,先来打开个debug开关. 我们可以添加set debug=blscfg(grub会通过函数grub_dprintf输出对应的debug消息)到文件/boot/grub2/grub.cfg; 然后注意把启动设置到一个不存在menu(比如set pager=1). 这样的话,gurb就会因为找不到启动项而停住,那我们就可以看到输出呢. 另外多说一句,还有这些模块可以用来调试(有兴趣可以试试看)."></a>8.1 <strong>小Tips</strong>,先来打开个debug开关. 我们可以添加<code>set debug=blscfg</code>(grub会通过函数<code>grub_dprintf</code>输出对应的debug消息)到文件<code>/boot/grub2/grub.cfg</code>; 然后注意把启动设置到一个不存在menu(比如<code>set pager=1</code>). 这样的话,<code>gurb</code>就会因为找不到启动项而停住,那我们就可以看到输出呢. 另外多说一句,还有这些模块可以用来调试(有兴趣可以试试看).</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;acpi&quot;,&quot;ahci&quot;,&quot;arcdisk&quot;,&quot;archelp&quot;,&quot;ata&quot;,&quot;atkeyb&quot;,&quot;badram&quot;,&quot;blscfg&quot;,&quot;bootp&quot;,&quot;bsd&quot;,&quot;btrfs&quot;,&quot;chain&quot;,&quot;cros&quot;,&quot;crypt&quot;,&quot;cryptodisk&quot;,&quot;devalias&quot;,&quot;disk&quot;,</span><br><span class="line">&quot;diskfilter&quot;,&quot;dl&quot;,&quot;dns&quot;,&quot;drivemap&quot;,&quot;efi&quot;,&quot;efidisk&quot;,&quot;efiemu&quot;,&quot;efiemu&quot;,&quot;system_table,&quot;efinet&quot;,&quot;efinetfs&quot;,&quot;ehci&quot;,&quot;elf&quot;,&quot;exfat&quot;,&quot;expand&quot;,&quot;fb&quot;,&quot;fdtbus&quot;,&quot;fixvideo&quot;,&quot;font&quot;,&quot;fs&quot;,&quot;fw_path&quot;,&quot;geli&quot;,&quot;gpt&quot;,&quot;hostdisk&quot;,&quot;init&quot;,&quot;keystatus&quot;,&quot;linux&quot;,&quot;loader&quot;,&quot;luks&quot;,&quot;memdisk&quot;,&quot;menu&quot;,&quot;mmap&quot;,&quot;modules&quot;,&quot;multiboot_loader&quot;,&quot;nativedisk&quot;,&quot;net&quot;,&quot;ohci&quot;,&quot;partition&quot;,&quot;pata&quot;,&quot;play&quot;,&quot;tempo&quot;pmtimer&quot;,&quot;reiserfs&quot;,&quot;reiserfs_blocktype&quot;,&quot;reiserfs_tree&quot;,&quot;relocator&quot;,&quot;scripting&quot;,&quot;scsi&quot;,&quot;secureboot&quot;,&quot;serial&quot;,&quot;syslinux&quot;,&quot;tftp&quot;,&quot;ubootdisk&quot;,&quot;uhci&quot;,&quot;usb&quot;,&quot;usb_keyboard&quot;,&quot;usbms&quot;,&quot;video&quot;,&quot;xen&quot;,&quot;xen_loader&quot;,&quot;xnu&quot;,&quot;zfs&quot;,</span><br></pre></td></tr></table></figure><h3 id="8-2-通过查看grub的debug输出-看到了options-kernelopts在grub启动时被调用了-所以对应的内核参数也被导入了"><a href="#8-2-通过查看grub的debug输出-看到了options-kernelopts在grub启动时被调用了-所以对应的内核参数也被导入了" class="headerlink" title="8.2 通过查看grub的debug输出. 看到了options $kernelopts在grub启动时被调用了,所以对应的内核参数也被导入了."></a>8.2 通过查看<code>grub</code>的debug输出. 看到了<code>options $kernelopts</code>在<code>grub</code>启动时被调用了,所以对应的内核参数也被导入了.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commands&#x2F;blscfg.c:135: new keyval at 0xbfe42aa0:options:$kernelopts $tuned_params</span><br></pre></td></tr></table></figure><h3 id="8-3-再深入一些-那options-kernelopts具体又是怎么调进去的呢-好办-快速瞄个代码-呵呵-这就是开源的优势之一-想知道内幕-下个代码瞄瞄-通过查阅代码-grub里面的与之对应的函数大概流程如下-都简明易懂-就不多解析咯"><a href="#8-3-再深入一些-那options-kernelopts具体又是怎么调进去的呢-好办-快速瞄个代码-呵呵-这就是开源的优势之一-想知道内幕-下个代码瞄瞄-通过查阅代码-grub里面的与之对应的函数大概流程如下-都简明易懂-就不多解析咯" class="headerlink" title="8.3 再深入一些,那options $kernelopts具体又是怎么调进去的呢?好办,快速瞄个代码(呵呵,这就是开源的优势之一; 想知道内幕,下个代码瞄瞄). 通过查阅代码,grub里面的与之对应的函数大概流程如下,都简明易懂,就不多解析咯."></a>8.3 再深入一些,那<code>options $kernelopts</code>具体又是怎么调进去的呢?好办,快速瞄个代码(呵呵,这就是开源的优势之一; 想知道内幕,下个代码瞄瞄). 通过查阅代码,<code>grub</code>里面的与之对应的函数大概流程如下,都简明易懂,就不多解析咯.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. GRUB_MOD_INIT(blscfg) &#x2F;&#x2F; gurb在启动时,初始化&#39;blscfg&#39;</span><br><span class="line">2. grub_cmd_blscfg (grub_extcmd_context_t ctxt UNUSED,int argc UNUSED,char **args UNUSED) &#x2F;&#x2F; 命令的实现</span><br><span class="line">3. find_entry (struct find_entry_info *info)  &#x2F;&#x2F; 查找启动列表</span><br><span class="line">4. read_entry (const char *filename,const struct grub_dirhook_info *dirhook_info UNUSED,void *data) &#x2F;&#x2F; 找到就将列表读出来</span><br><span class="line">5. bls_add_keyval(struct bls_entry *entry, char *key, char *val) &#x2F;&#x2F; 把列表里面参数解析并添加</span><br></pre></td></tr></table></figure><h2 id="9-到此-内核启动时通过boootloader添加启动参数就结束了-多说一句-grub2-mkconfig命令也可以有类似功能"><a href="#9-到此-内核启动时通过boootloader添加启动参数就结束了-多说一句-grub2-mkconfig命令也可以有类似功能" class="headerlink" title="9 到此,内核启动时通过boootloader添加启动参数就结束了. 多说一句,grub2-mkconfig命令也可以有类似功能."></a>9 到此,内核启动时通过boootloader添加启动参数就结束了. 多说一句,<code>grub2-mkconfig</code>命令也可以有类似功能.</h2><p>好, Red Hat Enterprise Linux 8 (RHEL8) 的新玩意 第4篇 通过<code>grub</code>配置Kernel启动参数就介绍完了. 想要了解更多? 可以参考 GRUB Manual 或者源代码.<br>想要亲手玩一下新玩具? 请随时去 <a href="https://www.redhat.com/">https://www.redhat.com</a> 下载最新的 REHL 8</p><p>也欢迎关注 <code>addos</code> 微信公众号获取更多的,有意思的新玩具 :-)</p>]]></content>
      
      
      <categories>
          
          <category> Linux 技巧(原创) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ansible的playbook 常用的模块例子</title>
      <link href="2021/02/16/ansible_playbook_related/"/>
      <url>2021/02/16/ansible_playbook_related/</url>
      
        <content type="html"><![CDATA[<h1 id="1-copy-复制文件到远端并且备份"><a href="#1-copy-复制文件到远端并且备份" class="headerlink" title="1 copy 复制文件到远端并且备份"></a>1 copy 复制文件到远端并且备份</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: a copy test</span><br><span class="line">  hosts: servera</span><br><span class="line">  become: yes</span><br><span class="line">  tasks:</span><br><span class="line">   - name: task 1</span><br><span class="line">     copy:</span><br><span class="line">       src: &#x2F;tmp&#x2F;testa</span><br><span class="line">       dest: &#x2F;tmp&#x2F;testa</span><br><span class="line">       owner: apache</span><br><span class="line">       group: apache</span><br><span class="line">       mode: 0755</span><br><span class="line">       backup: yes</span><br></pre></td></tr></table></figure><h1 id="2-file-建立文件或者文件夹"><a href="#2-file-建立文件或者文件夹" class="headerlink" title="2 file 建立文件或者文件夹"></a>2 file 建立文件或者文件夹</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: this is file module</span><br><span class="line">  hosts: servera</span><br><span class="line">  become: yes</span><br><span class="line">  tasks:</span><br><span class="line">  - name: file module, create a file name testdir</span><br><span class="line">    file:</span><br><span class="line">     path: &#x2F;tmp&#x2F;testdira</span><br><span class="line">     state: directory</span><br><span class="line">     owner: ansible</span><br><span class="line">     group: ansible</span><br><span class="line">     mode: 700</span><br></pre></td></tr></table></figure><h1 id="3-lineinfile-替换文件内容"><a href="#3-lineinfile-替换文件内容" class="headerlink" title="3 lineinfile 替换文件内容"></a>3 lineinfile 替换文件内容</h1><h2 id="3-1-如果文件存在"><a href="#3-1-如果文件存在" class="headerlink" title="3.1 如果文件存在"></a>3.1 如果文件存在</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: lineinfile test</span><br><span class="line">  hosts: servera</span><br><span class="line">  become: yes</span><br><span class="line">  tasks:</span><br><span class="line">   - name: task 3 lineinfile</span><br><span class="line">     lineinfile:</span><br><span class="line">      dest: &#x2F;tmp&#x2F;sam</span><br><span class="line">      regexp: &#39;this&#39;</span><br><span class="line">      line: &#39;hello world&#39;</span><br><span class="line">      owner: root</span><br><span class="line">      group: root</span><br><span class="line">      mode: 0644</span><br></pre></td></tr></table></figure><h2 id="3-2-文件不存在-使用present和create-变量用引号和大括号-““"><a href="#3-2-文件不存在-使用present和create-变量用引号和大括号-““" class="headerlink" title="3.2 文件不存在 (使用present和create, 变量用引号和大括号 ““)"></a>3.2 文件不存在 (使用present和create, 变量用引号和大括号 ““)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: variables test</span><br><span class="line">  hosts: servera</span><br><span class="line">  become: yes</span><br><span class="line">  vars:</span><br><span class="line">    word: sam</span><br><span class="line">  tasks:</span><br><span class="line">  - name : this is a test</span><br><span class="line">    lineinfile:</span><br><span class="line">      path: &#x2F;tmp&#x2F;testaa</span><br><span class="line">      line: &#39;hello &quot;&#123;&#123; word &#125;&#125;&quot;&#39;</span><br><span class="line">      state: present</span><br><span class="line">      create: yes</span><br><span class="line">    register: result</span><br><span class="line">  - name: debug</span><br><span class="line">    debug:</span><br><span class="line">      var: result</span><br></pre></td></tr></table></figure><h1 id="4-shell-命令使用"><a href="#4-shell-命令使用" class="headerlink" title="4 shell 命令使用"></a>4 shell 命令使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: Shell command</span><br><span class="line">  hosts: servera</span><br><span class="line">  become: yes</span><br><span class="line">  tasks:</span><br><span class="line">  - name: shell test</span><br><span class="line">    shell: &#39;cat &#x2F;tmp&#x2F;sam&#39;</span><br><span class="line">    register: result</span><br><span class="line">  - name: debug</span><br><span class="line">    debug:</span><br><span class="line">     var: result</span><br></pre></td></tr></table></figure><h1 id="5-stat-检查文件是否存在"><a href="#5-stat-检查文件是否存在" class="headerlink" title="5 stat 检查文件是否存在"></a>5 stat 检查文件是否存在</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: stat to check if file there</span><br><span class="line">  hosts: servera</span><br><span class="line">  become: yes</span><br><span class="line">  tasks:</span><br><span class="line">  - name: stat command</span><br><span class="line">    stat:</span><br><span class="line">      path: &#x2F;tmp&#x2F;lee</span><br><span class="line">    register: result</span><br><span class="line">  - name: debug</span><br><span class="line">    debug:</span><br><span class="line">      var: result</span><br></pre></td></tr></table></figure><h1 id="6-setup-获取系统信息"><a href="#6-setup-获取系统信息" class="headerlink" title="6 setup 获取系统信息"></a>6 setup 获取系统信息</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: setup module</span><br><span class="line">  hosts: servera</span><br><span class="line">  become: yes</span><br><span class="line">  tasks:</span><br><span class="line">  - name: task setup</span><br><span class="line">    setup:</span><br><span class="line">    register: result</span><br><span class="line">  - name: debug</span><br><span class="line">    debug:</span><br><span class="line">     var: result</span><br></pre></td></tr></table></figure><h1 id="7-setup-配合filter获取主机信息"><a href="#7-setup-配合filter获取主机信息" class="headerlink" title="7 setup 配合filter获取主机信息"></a>7 setup 配合filter获取主机信息</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@workstation ansible]# ansible servera -m setup -a &quot;filter&#x3D;ansible_default_ipv4&quot;</span><br><span class="line">servera | SUCCESS &#x3D;&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;ansible_default_ipv4&quot;: &#123;</span><br><span class="line">            &quot;address&quot;: &quot;172.25.250.10&quot;,</span><br><span class="line">            &quot;alias&quot;: &quot;eth0&quot;,</span><br><span class="line">            &quot;broadcast&quot;: &quot;172.25.250.255&quot;,</span><br><span class="line">            &quot;gateway&quot;: &quot;172.25.250.254&quot;,</span><br><span class="line">            &quot;interface&quot;: &quot;eth0&quot;,</span><br><span class="line">            &quot;macaddress&quot;: &quot;52:54:00:00:fa:0a&quot;,</span><br><span class="line">            &quot;mtu&quot;: 1500,</span><br><span class="line">            &quot;netmask&quot;: &quot;255.255.255.0&quot;,</span><br><span class="line">            &quot;network&quot;: &quot;172.25.250.0&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;ether&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;changed&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-Template使用-建立-j2的template"><a href="#8-Template使用-建立-j2的template" class="headerlink" title="8 Template使用 (建立.j2的template, )"></a>8 Template使用 (建立.j2的template, )</h1><h2 id="8-1-建立-template-档案"><a href="#8-1-建立-template-档案" class="headerlink" title="8.1 建立 template 档案"></a>8.1 建立 template 档案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># vim playbooks&#x2F;template_hello.j2</span><br><span class="line">Hello &quot;&#123;&#123; sam_veriable &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><h2 id="8-2-导入template并使用"><a href="#8-2-导入template并使用" class="headerlink" title="8.2 导入template并使用"></a>8.2 导入template并使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: template test</span><br><span class="line">  hosts: servera</span><br><span class="line">  become: yes</span><br><span class="line">  vars:</span><br><span class="line">   sam_veriable: &quot;Sam&quot;</span><br><span class="line">  tasks:</span><br><span class="line">  - name: start</span><br><span class="line">    template:</span><br><span class="line">     src: template_hello.j2</span><br><span class="line">     dest: &#x2F;tmp&#x2F;template_hello</span><br></pre></td></tr></table></figure><h2 id="8-3-直接更改参数"><a href="#8-3-直接更改参数" class="headerlink" title="8.3 直接更改参数"></a>8.3 直接更改参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ansible-playbook playbooks&#x2F;template_hello.yml -e &quot;sam_veriable&#x3D;good&quot;</span><br></pre></td></tr></table></figure><h1 id="9-loop的使用"><a href="#9-loop的使用" class="headerlink" title="9 loop的使用"></a>9 loop的使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: myloop</span><br><span class="line">  hosts: servera</span><br><span class="line">  become: true</span><br><span class="line">  tasks:</span><br><span class="line">  - name: install files</span><br><span class="line">    yum:</span><br><span class="line">      name: &quot;&#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">      state: present</span><br><span class="line">    register: result</span><br><span class="line">    loop:</span><br><span class="line">      - httpd</span><br><span class="line">      - ipmitool</span><br><span class="line">    #with_items:</span><br><span class="line">    #   - httpd</span><br><span class="line">    #   - ipmitool</span><br><span class="line">  - name: debug</span><br><span class="line">    debug:</span><br><span class="line">      var: result</span><br></pre></td></tr></table></figure><h1 id="10-vault的使用"><a href="#10-vault的使用" class="headerlink" title="10 vault的使用"></a>10 vault的使用</h1><h2 id="10-1-建立加密文件-这要求输入密码"><a href="#10-1-建立加密文件-这要求输入密码" class="headerlink" title="10.1 建立加密文件. 这要求输入密码"></a>10.1 建立加密文件. 这要求输入密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ansible-vault create playbooks&#x2F;crypttests.yml</span><br></pre></td></tr></table></figure><h2 id="10-2-编辑加密文件-要求输入密码"><a href="#10-2-编辑加密文件-要求输入密码" class="headerlink" title="10.2 编辑加密文件. 要求输入密码"></a>10.2 编辑加密文件. 要求输入密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ansible-vault edit playbooks&#x2F;crypttests.yml</span><br><span class="line">Vault password:</span><br></pre></td></tr></table></figure><h2 id="10-3-更改密码"><a href="#10-3-更改密码" class="headerlink" title="10.3 更改密码."></a>10.3 更改密码.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ansible-vault rekey playbooks&#x2F;crypttests.yml</span><br></pre></td></tr></table></figure><h2 id="10-4-对文件加密"><a href="#10-4-对文件加密" class="headerlink" title="10.4 对文件加密"></a>10.4 对文件加密</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ansible-vault encrypt playbooks&#x2F;crypttests.yml</span><br></pre></td></tr></table></figure><h2 id="10-5-对文件解密"><a href="#10-5-对文件解密" class="headerlink" title="10.5 对文件解密"></a>10.5 对文件解密</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ansible-vault decrypt playbooks&#x2F;crypttests.yml</span><br></pre></td></tr></table></figure><h2 id="10-6-查看文件"><a href="#10-6-查看文件" class="headerlink" title="10.6 查看文件"></a>10.6 查看文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ansible-vault view playbooks&#x2F;crypt.yml</span><br></pre></td></tr></table></figure><h1 id="11-非0状态继续执行-使用ignore-errors"><a href="#11-非0状态继续执行-使用ignore-errors" class="headerlink" title="11 非0状态继续执行, 使用ignore_errors"></a>11 非0状态继续执行, 使用ignore_errors</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: ignore copy error</span><br><span class="line">  hosts: servera</span><br><span class="line">  become: yes</span><br><span class="line">  tasks:</span><br><span class="line">  - name: copy file to dest</span><br><span class="line">    copy:</span><br><span class="line">      src: &#x2F;tmp&#x2F;notify-null</span><br><span class="line">      dest: &#x2F;tmp&#x2F;nofity</span><br><span class="line">      owner: ansible</span><br><span class="line">      group: ansible</span><br><span class="line">      mode: 0644</span><br><span class="line">    ignore_errors: true</span><br><span class="line">    register: result</span><br><span class="line">  - name: ping node</span><br><span class="line">    ping:</span><br><span class="line">  - name: debug</span><br><span class="line">    debug:</span><br><span class="line">     var: result</span><br></pre></td></tr></table></figure><h1 id="12-notify使用"><a href="#12-notify使用" class="headerlink" title="12 notify使用"></a>12 notify使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: notify test</span><br><span class="line">  hosts: servera</span><br><span class="line">  become: yes</span><br><span class="line">  tasks:</span><br><span class="line">  - name: copy a file</span><br><span class="line">    copy:</span><br><span class="line">      src: &#x2F;tmp&#x2F;notify</span><br><span class="line">      dest: &#x2F;tmp&#x2F;notify</span><br><span class="line">      owner: ansible</span><br><span class="line">      group: ansible</span><br><span class="line">      mode: 0755</span><br><span class="line">    notify:</span><br><span class="line">      - echo ok</span><br><span class="line">  handlers:</span><br><span class="line">    - name: echo ok</span><br><span class="line">      shell: &#39;echo ok &gt;&#x2F;tmp&#x2F;ok&#39;</span><br></pre></td></tr></table></figure><h1 id="13-tag-使用"><a href="#13-tag-使用" class="headerlink" title="13 tag 使用"></a>13 tag 使用</h1><h2 id="13-1-编辑"><a href="#13-1-编辑" class="headerlink" title="13.1 编辑"></a>13.1 编辑</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: production</span><br><span class="line">  hosts: production</span><br><span class="line">  become: yes</span><br><span class="line">  tasks:</span><br><span class="line">  - name: ping production</span><br><span class="line">    ping:</span><br><span class="line">    tags: production</span><br><span class="line"></span><br><span class="line">- name: backup</span><br><span class="line">  hosts: backup</span><br><span class="line">  become: yes</span><br><span class="line">  tasks:</span><br><span class="line">  - name: ping backup</span><br><span class="line">    ping:</span><br><span class="line">    tags: backup</span><br></pre></td></tr></table></figure><h2 id="13-2-执行"><a href="#13-2-执行" class="headerlink" title="13.2 执行"></a>13.2 执行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ansible-playbook playbooks&#x2F;mytags.yml -t production</span><br></pre></td></tr></table></figure><h1 id="14-block-和rescue-block里面不能使用ignore-errors"><a href="#14-block-和rescue-block里面不能使用ignore-errors" class="headerlink" title="14 block 和rescue (block里面不能使用ignore_errors)"></a>14 block 和rescue (block里面不能使用ignore_errors)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: inaccess</span><br><span class="line">  hosts: all</span><br><span class="line">  become: yes</span><br><span class="line">  tasks:</span><br><span class="line">  - name: block strcuture</span><br><span class="line">    block:</span><br><span class="line">      - name: block copy</span><br><span class="line">        get_url:</span><br><span class="line">          url: http:&#x2F;&#x2F;materials&#x2F;inaccess.html</span><br><span class="line">          dest: &#x2F;var&#x2F;www&#x2F;html&#x2F;inaccess.html</span><br><span class="line">    rescue:</span><br><span class="line">    - lineinfile:</span><br><span class="line">          path: &#x2F;var&#x2F;www&#x2F;html&#x2F;inaccess.html</span><br><span class="line">          line: &#39;I did not have access to the url&#39;</span><br><span class="line">          create: yes</span><br></pre></td></tr></table></figure><h1 id="15-when-register-条件运行"><a href="#15-when-register-条件运行" class="headerlink" title="15 when, register 条件运行"></a>15 when, register 条件运行</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: selectively update files</span><br><span class="line">  hosts: all</span><br><span class="line">  become: yes</span><br><span class="line">  tasks:</span><br><span class="line">  - name: check if there file there</span><br><span class="line">    shell: &#39;ls &#x2F;etc&#x2F;ansible_abort.txt&#39;</span><br><span class="line">    ignore_errors: yes</span><br><span class="line">    register: result</span><br><span class="line">  - name: create a file</span><br><span class="line">    lineinfile:</span><br><span class="line">      path: &#x2F;etc&#x2F;ansible_abort.txt</span><br><span class="line">      line: &#39;my node is also &#123;&#123; ansible_hostname &#125;&#125;&#39;</span><br><span class="line">      create: yes</span><br><span class="line">    when:</span><br><span class="line">      result.rc !&#x3D; 0</span><br></pre></td></tr></table></figure><h1 id="16-安装role-role-是在galaxy里面使用"><a href="#16-安装role-role-是在galaxy里面使用" class="headerlink" title="16 安装role (role 是在galaxy里面使用)"></a>16 安装role (role 是在galaxy里面使用)</h1><h2 id="16-1-编写galaxy-install-yml文件"><a href="#16-1-编写galaxy-install-yml文件" class="headerlink" title="16.1 编写galaxy_install.yml文件"></a>16.1 编写galaxy_install.yml文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- src:  http:&#x2F;&#x2F;materials&#x2F;do407fun.tar.gz</span><br><span class="line">  name: examfun</span><br></pre></td></tr></table></figure><h2 id="16-2-安装role-安装的路径需要ansible-cfg写明-roles-path-home-ansible-playbooks-roles"><a href="#16-2-安装role-安装的路径需要ansible-cfg写明-roles-path-home-ansible-playbooks-roles" class="headerlink" title="16.2 安装role (安装的路径需要ansible.cfg写明 roles_path = /home/ansible/playbooks/roles)"></a>16.2 安装role (安装的路径需要ansible.cfg写明 <code>roles_path = /home/ansible/playbooks/roles</code>)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-galaxy install -r playbooks&#x2F;galaxy_install.yml</span><br></pre></td></tr></table></figure><h1 id="17-配置log路径"><a href="#17-配置log路径" class="headerlink" title="17 配置log路径"></a>17 配置log路径</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log_path&#x3D; &#x2F;home&#x2F;ansible&#x2F;logs-ansible.log</span><br></pre></td></tr></table></figure><h1 id="18-when-和debug使用-加速可以停用-gather-facts-no"><a href="#18-when-和debug使用-加速可以停用-gather-facts-no" class="headerlink" title="18 when 和debug使用(加速可以停用 gather_facts: no)"></a>18 when 和debug使用(加速可以停用 gather_facts: no)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: test debug info</span><br><span class="line">  hosts: servera</span><br><span class="line">  become: yes</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks:</span><br><span class="line">  - name: retrive host name</span><br><span class="line">    shell: hostname</span><br><span class="line">    register: result</span><br><span class="line">  - name: for debug stdout 3</span><br><span class="line">    debug:</span><br><span class="line">      msg: &#39;result.stdout &quot;&#123;&#123; result.stdout &#125;&#125;&quot;&#39;</span><br><span class="line">  - name: when test</span><br><span class="line">    file:</span><br><span class="line">      path: &#x2F;tmp&#x2F;nogood</span><br><span class="line">      state: touch</span><br><span class="line">    when: result.stdout &#x3D;&#x3D; &quot;servera.lab.example.com&quot;</span><br></pre></td></tr></table></figure><h1 id="19-如何使用ignore-errors-和register-这两个是针对模块或者命令的-所以应该与之平齐"><a href="#19-如何使用ignore-errors-和register-这两个是针对模块或者命令的-所以应该与之平齐" class="headerlink" title="19 如何使用ignore_errors 和register (这两个是针对模块或者命令的,所以应该与之平齐)"></a>19 如何使用ignore_errors 和register (这两个是针对模块或者命令的,所以应该与之平齐)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: check error</span><br><span class="line">  hosts: servera</span><br><span class="line">  become: yes</span><br><span class="line">  tasks:</span><br><span class="line">  - name: ignore error</span><br><span class="line">    lineinfile:</span><br><span class="line">      path: &#39;&#x2F;tmp&#x2F;this&#39;</span><br><span class="line">      state: present</span><br><span class="line">      line: &quot;good day&quot;</span><br><span class="line">    ignore_errors: yes</span><br><span class="line">    register: result</span><br></pre></td></tr></table></figure><h1 id="20-gather-facts-注意事项-不要设置为no-如果需要setup模块的变量如-ansible-hostname"><a href="#20-gather-facts-注意事项-不要设置为no-如果需要setup模块的变量如-ansible-hostname" class="headerlink" title="20 gather_facts 注意事项(不要设置为no 如果需要setup模块的变量如 ansible_hostname)"></a>20 gather_facts 注意事项(不要设置为no 如果需要setup模块的变量如 ansible_hostname)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gather_facts: yes</span><br></pre></td></tr></table></figure><h1 id="21-创建LVM"><a href="#21-创建LVM" class="headerlink" title="21 创建LVM"></a>21 创建LVM</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># pvcreate &#x2F;dev&#x2F;vda2</span><br><span class="line"># vgcreate new_vol_group &#x2F;dev&#x2F;vda1</span><br><span class="line"># lvcreate -L2G -n new_logical_volume new_vol_group</span><br><span class="line"># gfs_mkfs -plock_nolock -j 1 &#x2F;dev&#x2F;new_vol_group&#x2F;new_logical_volume</span><br><span class="line"># mkfs.xfs &#x2F;dev&#x2F;new_vol_group&#x2F;new_logical_volume</span><br></pre></td></tr></table></figure><h1 id="22-改password"><a href="#22-改password" class="headerlink" title="22 改password"></a>22 改password</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@workstation ansible]# ansible-vault rekey --ask-vault-pass playbook&#x2F;crypt.yml</span><br><span class="line">Vault password:</span><br><span class="line">New Vault password:</span><br><span class="line">Confirm New Vault password:</span><br><span class="line">Rekey successful</span><br></pre></td></tr></table></figure><h1 id="23-修改command-shell-返回值"><a href="#23-修改command-shell-返回值" class="headerlink" title="23 修改command shell 返回值"></a>23 修改command shell 返回值</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line"> - name: run this command and ignore the result</span><br><span class="line">   shell: &#x2F;usr&#x2F;bin&#x2F;somecommand || &#x2F;bin&#x2F;true</span><br><span class="line">或</span><br><span class="line">tasks:</span><br><span class="line"> - name: run this command and ignore the result</span><br><span class="line">   shell: &#x2F;usr&#x2F;bin&#x2F;somecommand</span><br><span class="line">   ignore_errors: True</span><br></pre></td></tr></table></figure><h1 id="24-ansible-安装galaxy-role"><a href="#24-ansible-安装galaxy-role" class="headerlink" title="24 ansible 安装galaxy role"></a>24 ansible 安装galaxy role</h1><h2 id="24-1-从galaxy直接安装"><a href="#24-1-从galaxy直接安装" class="headerlink" title="24.1 从galaxy直接安装"></a>24.1 从galaxy直接安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- src: yatesr.timezone</span><br></pre></td></tr></table></figure><h2 id="24-2-从指定路径上面获取"><a href="#24-2-从指定路径上面获取" class="headerlink" title="24.2 从指定路径上面获取"></a>24.2 从指定路径上面获取</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- src: https:&#x2F;&#x2F;github.com&#x2F;bennojoy&#x2F;nginx</span><br></pre></td></tr></table></figure><h2 id="24-3-从指定路径安装并安装为指定名字"><a href="#24-3-从指定路径安装并安装为指定名字" class="headerlink" title="24.3 从指定路径安装并安装为指定名字"></a>24.3 从指定路径安装并安装为指定名字</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- src: https:&#x2F;&#x2F;github.com&#x2F;bennojoy&#x2F;nginx</span><br><span class="line">  name: vagrant</span><br></pre></td></tr></table></figure><h1 id="25-使用-rhsm-repository-模块"><a href="#25-使用-rhsm-repository-模块" class="headerlink" title="25 使用 rhsm_repository 模块"></a>25 使用 rhsm_repository 模块</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- name: Enable a RHSM repository</span><br><span class="line">  rhsm_repository:</span><br><span class="line">    name: rhel-7-server-rpms</span><br><span class="line"></span><br><span class="line">- name: Disable all RHSM repositories</span><br><span class="line">  rhsm_repository:</span><br><span class="line">    name: &#39;*&#39;</span><br><span class="line">    state: disabled</span><br></pre></td></tr></table></figure><h1 id="26-使用-redhat-subscription-模块注册系统，并加入对应的pool"><a href="#26-使用-redhat-subscription-模块注册系统，并加入对应的pool" class="headerlink" title="26 使用 redhat_subscription 模块注册系统，并加入对应的pool"></a>26 使用 redhat_subscription 模块注册系统，并加入对应的pool</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- name: register RHEL</span><br><span class="line">  redhat_subscription:</span><br><span class="line">   state: present</span><br><span class="line">   username: rhn-support-xili</span><br><span class="line">   password: changeme</span><br><span class="line">   pool_ids: 8a85f99c6c8b9588016c8be0f1b50ec1</span><br><span class="line">   force_register: yes</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux 技巧(原创) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux Audit 的使用规则 （可以把这些规则加入到audit.rules里面）</title>
      <link href="2021/02/16/audit_simple_rules/"/>
      <url>2021/02/16/audit_simple_rules/</url>
      
        <content type="html"><![CDATA[<h1 id="1。-可以针对关键文件进行审计。比如："><a href="#1。-可以针对关键文件进行审计。比如：" class="headerlink" title="1。 可以针对关键文件进行审计。比如："></a>1。 可以针对关键文件进行审计。比如：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-w &#x2F;etc&#x2F;passwd -p wa -k passwd</span><br><span class="line">-w &#x2F;etc&#x2F;shadow -p wa -k shadow</span><br><span class="line">-w &#x2F;etc&#x2F;ssh&#x2F;sshd_config -p wa -k sshd</span><br><span class="line">-w &#x2F;etc&#x2F;ssh&#x2F;ssh_config -p wa -k ssh</span><br><span class="line">-w &#x2F;etc&#x2F;crontab -p wa -k crontab</span><br><span class="line">-w &#x2F;etc&#x2F;hosts -p wa -k hosts</span><br><span class="line">-w &#x2F;etc&#x2F;hosts.allow -p wa -k hosts-allow</span><br><span class="line">-w &#x2F;etc&#x2F;hosts.deny -p wa -k hosts-deny</span><br></pre></td></tr></table></figure><h1 id="2。-可以针对用户命令进行审计。比如："><a href="#2。-可以针对用户命令进行审计。比如：" class="headerlink" title="2。 可以针对用户命令进行审计。比如："></a>2。 可以针对用户命令进行审计。比如：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-a exit,always -F arch&#x3D;b64 -S execve -k exec</span><br><span class="line">-a exit,always -F arch&#x3D;b32 -S execve -k exec</span><br></pre></td></tr></table></figure><h1 id="3。-可以针对特定的系统调用进行审计。比如："><a href="#3。-可以针对特定的系统调用进行审计。比如：" class="headerlink" title="3。 可以针对特定的系统调用进行审计。比如："></a>3。 可以针对特定的系统调用进行审计。比如：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-a exit,always -F arch&#x3D;b32 -S kill -k kill_rule</span><br><span class="line">-a exit,always -F arch&#x3D;b64 -S kill -k kill_rule</span><br><span class="line">-a exit,always -F arch&#x3D;b32 -S settimeofday -k time_rule</span><br><span class="line">-a exit,always -F arch&#x3D;b64 -S settimeofday -k time_rule</span><br><span class="line">-a exit,always -F arch&#x3D;b32 -S clock_settime -k time_rule</span><br><span class="line">-a exit,always -F arch&#x3D;b64 -S clock_settime -k time_rule</span><br></pre></td></tr></table></figure><h1 id="4-关于logs，为了防止由于大量的自动脚本运行产生的审计日志频繁flush到磁盘，导致磁盘使用率过高（特别是没有cache直接落盘的RAID卡）。-如果出现此类情况，可以修改flush模式为NONE。可以通过编辑audit配置文件-etc-audit-auditd-conf进行配置，修改如下选项："><a href="#4-关于logs，为了防止由于大量的自动脚本运行产生的审计日志频繁flush到磁盘，导致磁盘使用率过高（特别是没有cache直接落盘的RAID卡）。-如果出现此类情况，可以修改flush模式为NONE。可以通过编辑audit配置文件-etc-audit-auditd-conf进行配置，修改如下选项：" class="headerlink" title="4 关于logs，为了防止由于大量的自动脚本运行产生的审计日志频繁flush到磁盘，导致磁盘使用率过高（特别是没有cache直接落盘的RAID卡）。 如果出现此类情况，可以修改flush模式为NONE。可以通过编辑audit配置文件/etc/audit/auditd.conf进行配置，修改如下选项："></a>4 关于logs，为了防止由于大量的自动脚本运行产生的审计日志频繁flush到磁盘，导致磁盘使用率过高（特别是没有cache直接落盘的RAID卡）。 如果出现此类情况，可以修改flush模式为NONE。可以通过编辑audit配置文件/etc/audit/auditd.conf进行配置，修改如下选项：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush &#x3D; NONE</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux 技巧(原创) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基于 UBI 容器化 Etherpad 并且运行在RHEL8上</title>
      <link href="2021/02/16/container_etherpad/"/>
      <url>2021/02/16/container_etherpad/</url>
      
        <content type="html"><![CDATA[<h2 id="1-建立Dockerfile-文件-（考虑到安全稳定性，这里基于UBI镜像，为了安全起见，可以不要使用root）"><a href="#1-建立Dockerfile-文件-（考虑到安全稳定性，这里基于UBI镜像，为了安全起见，可以不要使用root）" class="headerlink" title="1 建立Dockerfile 文件 （考虑到安全稳定性，这里基于UBI镜像，为了安全起见，可以不要使用root）"></a>1 建立Dockerfile 文件 （考虑到安全稳定性，这里基于UBI镜像，为了安全起见，可以不要使用root）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM registry.redhat.io&#x2F;ubi8&#x2F;ubi</span><br><span class="line">LABEL maintainer&#x3D;&quot;oosTech.com&quot;</span><br><span class="line">RUN yum -y install nodejs npm git iproute &amp;&amp; git clone git:&#x2F;&#x2F;github.com&#x2F;ether&#x2F;etherpad-lite.git etherpad-lite</span><br><span class="line">WORKDIR &#x2F;etherpad-lite</span><br><span class="line">EXPOSE 9001</span><br><span class="line">CMD [ &quot;&#x2F;etherpad-lite&#x2F;bin&#x2F;run.sh&quot; , &quot;--root&quot;]</span><br></pre></td></tr></table></figure><h2 id="2-创建容器"><a href="#2-创建容器" class="headerlink" title="2 创建容器"></a>2 创建容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># podman build -t etherpad:v1 .</span><br></pre></td></tr></table></figure><h2 id="3-容器镜像建立完毕，直接运行容器-（这样就可以本机的9001端口访问到etherpad了）"><a href="#3-容器镜像建立完毕，直接运行容器-（这样就可以本机的9001端口访问到etherpad了）" class="headerlink" title="3 容器镜像建立完毕，直接运行容器 （这样就可以本机的9001端口访问到etherpad了）"></a>3 容器镜像建立完毕，直接运行容器 （这样就可以本机的9001端口访问到etherpad了）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># podman run -d -p 9001:9001 localhost&#x2F;etherpad:v1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux 技巧(原创) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Red Hat Enterprise Linux 8 的新玩意 第1 篇之容器工具 podman</title>
      <link href="2021/02/16/RHEL8-news-toys-section1-podman/"/>
      <url>2021/02/16/RHEL8-news-toys-section1-podman/</url>
      
        <content type="html"><![CDATA[<h1 id="Red-Hat-Enterprise-Linux-8-RHEL8-的新玩意-第1篇-之容器工具-podman"><a href="#Red-Hat-Enterprise-Linux-8-RHEL8-的新玩意-第1篇-之容器工具-podman" class="headerlink" title="Red Hat Enterprise Linux 8 (RHEL8) 的新玩意 第1篇 之容器工具 podman"></a>Red Hat Enterprise Linux 8 (RHEL8) 的新玩意 第1篇 之容器工具 podman</h1><h2 id="podman"><a href="#podman" class="headerlink" title="podman"></a><strong>podman</strong></h2><p>podman 用于操作容器和镜像. 它轻量化,抛弃了后台的daemon, 配合其底层的runc应用; 实现了与docker相同的功能比如pull, push, build, run, commit, tag等等,可用来代替 docker daemon 以及docker 命令行; 同时又拥有其扩展以及不同点:</p><ul><li><p>通过参数<code>-a</code> 或者 <code>--all</code> 来实现对容器,容器镜像的快速清理. 比如, <code>podman rm --all</code> 或者 <code>podman rmi --all</code></p></li><li><p>podman 支持登陆功能, 可以通过登陆 Red Hat 镜像资源来获取 Red Hat 官方容器镜像. (访问Red Hat 镜像资源, 需要通过有效的Red Hat账户来登陆.)</p><ul><li><p>Red Hat 官方镜像资源 registry.redhat.io;</p></li><li><p>Red Hat 维护的第三方资源 registry.connect.redhat.com</p><p>登入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#podman login -u rhn-support-goodluck https:&#x2F;&#x2F;registry.redhat.io</span><br></pre></td></tr></table></figure><p>登出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#podman logout https:&#x2F;&#x2F;registry.redhat.io</span><br></pre></td></tr></table></figure></li></ul></li><li><p>docker 容器的存储路径在 /var/lib/docker 而 podman 则使用 /var/lib/containers</p></li></ul><h3 id="说了这么多-我们还是来具体看看-podman-的一些常用的命令比如-pull-run-build-commit-同时也可以使用-podman-h-来了解更多的命令"><a href="#说了这么多-我们还是来具体看看-podman-的一些常用的命令比如-pull-run-build-commit-同时也可以使用-podman-h-来了解更多的命令" class="headerlink" title="说了这么多,我们还是来具体看看 podman 的一些常用的命令比如 pull, run, build , commit;同时也可以使用 podman -h 来了解更多的命令"></a>说了这么多,我们还是来具体看看 podman 的一些常用的命令比如 pull, run, build , commit;同时也可以使用 podman -h 来了解更多的命令</h3><h3 id="1-podman-pull-这个命令可以用来从HUB上将需要的镜像拷贝到本地"><a href="#1-podman-pull-这个命令可以用来从HUB上将需要的镜像拷贝到本地" class="headerlink" title="1 podman pull 这个命令可以用来从HUB上将需要的镜像拷贝到本地."></a>1 podman pull 这个命令可以用来从HUB上将需要的镜像拷贝到本地.</h3><ul><li>比如将 rhel8-beta 镜像从Red Hat 官方的 registry.redhat.io 拷贝到本地.(记得先login哦)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">podman pull registry.redhat.io&#x2F;rhel8-beta</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@goodluck~]#podman pull registry.redhat.io&#x2F;rhel8-beta</span><br><span class="line">Trying to pull registry.redhat.io&#x2F;rhel8-beta...Getting image source signatures</span><br><span class="line">Copying blob 619051b1good: 66.48 MiB &#x2F; 66.48 MiB [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] 56s</span><br><span class="line">Copying blob 386105aegood: 1.33 KiB &#x2F; 1.33 KiB [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] 56s</span><br><span class="line">Copying config a80dad1cgood: 6.33 KiB &#x2F; 6.33 KiB [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] 0s</span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br><span class="line">a80dad1c19537b0961e485dfa0a43fbe3c0a71cec2cca32d3264e087e396good</span><br></pre></td></tr></table></figure></li><li>比如将 fedora:29 镜像从 docker.io 拷贝到本地.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">podman pull docker.io&#x2F;library&#x2F;fedora:29</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@goodluck~]#podman pull docker.io&#x2F;library&#x2F;fedora:29</span><br><span class="line">Trying to pull docker.io&#x2F;library&#x2F;fedora:29...Getting image source signatures</span><br><span class="line">Copying blob 01eb0781good: 85.81 MiB &#x2F; 85.81 MiB [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] 17s</span><br><span class="line">Copying config d09302f7good: 1.97 KiB &#x2F; 1.97 KiB [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] 0s</span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br><span class="line">d09302f77cfcc3e867829d80ff47f9e7738ffef69730d54ec44341a9fb1dgood</span><br></pre></td></tr></table></figure><h3 id="2-podman-run-等同于-docker-run-通过一个容器镜像来启动一个进程-容器-它拥有独立的文件系统-独立网络和其维护的进程树等等"><a href="#2-podman-run-等同于-docker-run-通过一个容器镜像来启动一个进程-容器-它拥有独立的文件系统-独立网络和其维护的进程树等等" class="headerlink" title="2 podman run 等同于 docker run, 通过一个容器镜像来启动一个进程(容器), 它拥有独立的文件系统,独立网络和其维护的进程树等等"></a>2 podman run 等同于 docker run, 通过一个容器镜像来启动一个进程(容器), 它拥有独立的文件系统,独立网络和其维护的进程树等等</h3></li><li>比如以交互模式来执行一个 RHEL 8 beta 容器<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">podman run -it registry.redhat.io&#x2F;rhel8-beta&#x2F;rhel &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@goodluck~]#podman run -it registry.redhat.io&#x2F;rhel8-beta&#x2F;rhel &#x2F;bin&#x2F;bash</span><br><span class="line">bash-4.4# cat &#x2F;etc&#x2F;redhat-release</span><br><span class="line">Red Hat Enterprise Linux release 8.0 Beta (Ootpa)</span><br><span class="line">bash-4.4# uname -a</span><br><span class="line">Linux 2b225eeecc44 4.18.0-80.el8.x86_64 #1 SMP Wed Mar 13 12:02:46 UTC 2019 x86_64 x86_64 x86_64 GNU&#x2F;Linux</span><br><span class="line">bash-4.4# echo &quot;hello podman :-)&quot;</span><br><span class="line">hello podman :-)</span><br><span class="line">bash-4.4# exit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>小Tips: 如果启动过程中看到类似的信息,可以将 selinux 设置为 permissive<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;bin&#x2F;bash: error while loading shared libraries: libc.so.6: cannot change memory protections</span><br></pre></td></tr></table></figure><h3 id="3-podman-build-生成容器镜像-有两种方法来生成容器镜像"><a href="#3-podman-build-生成容器镜像-有两种方法来生成容器镜像" class="headerlink" title="3 podman build 生成容器镜像,有两种方法来生成容器镜像"></a>3 podman build 生成容器镜像,有两种方法来生成容器镜像</h3></li><li>通过 Dockerfile 来生成一个新的容器镜像我们需要编写一个 Dockerfile ;例子, 我们以 rhel8-beta 为基础, 让容器启动时,执行我们的 <code>hello_podman.sh</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@goodluck~]# cat Dockerfile</span><br><span class="line"># This is a test dockerfile</span><br><span class="line">FROM registry.redhat.io&#x2F;rhel8-beta:latest</span><br><span class="line">ENTRYPOINT [&quot;&#x2F;usr&#x2F;bin&#x2F;hello_podman.sh&quot;]</span><br><span class="line">RUN echo $&#39;#!&#x2F;bin&#x2F;sh \n echo &quot; *** HELLO PODMAN *** &quot;&#39;&gt;&#x2F;usr&#x2F;bin&#x2F;hello_podman.sh &amp;&amp; chmod +x &#x2F;usr&#x2F;bin&#x2F;hello_podman.sh</span><br></pre></td></tr></table></figure>以 hello_podman 为镜像的 tag 生成一个新的容器镜像<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@goodluck~]# podman build -t rhel8-beta:hello_podman .</span><br><span class="line">STEP 1: FROM registry.redhat.io&#x2F;rhel8-beta:latest</span><br><span class="line">STEP 2: ENTRYPOINT [&quot;&#x2F;usr&#x2F;bin&#x2F;hello_podman.sh&quot;]</span><br><span class="line">--&gt; Using cache e010d561555d180015d6c0d30a3f67fa602ea1ae54628d5666235db42f43good</span><br><span class="line">STEP 3: FROM e010d561555d180015d6c0d30a3f67fa602ea1ae54628d5666235db42f43good</span><br><span class="line">STEP 4: RUN echo $&#39;#!&#x2F;bin&#x2F;sh \n echo &quot; *** HELLO PODMAN *** &quot;&#39;&gt;&#x2F;usr&#x2F;bin&#x2F;hello_podman.sh &amp;&amp; chmod +x &#x2F;usr&#x2F;bin&#x2F;hello_podman.sh</span><br><span class="line">--&gt; Using cache a292528dfb8c1477419904d19dce108e3d2c105c6efbf0fd677d1dd47fe7good</span><br><span class="line">STEP 5: COMMIT rhel8-beta:hello_podman</span><br></pre></td></tr></table></figure>执行验证我们的镜像<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@goodluck~]# podman run rhel8-beta:hello_podman</span><br><span class="line"> *** HELLO PODMAN ***</span><br></pre></td></tr></table></figure></li><li>通过修改一个运行中的容器来生成一个新的容器镜像<br>首先,我们执行一个容器并作相应的修改<br>例子和logs<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@goodluck~]# podman run -it registry.redhat.io&#x2F;rhel8-beta &#x2F;bin&#x2F;bash</span><br><span class="line">bash-4.4# echo $&#39;#!&#x2F;bin&#x2F;sh \n echo &quot; *** HELLO PODMAN AGAIN*** &quot;&#39;&gt;&#x2F;usr&#x2F;bin&#x2F;hello_podman_again.sh &amp;&amp; chmod +x &#x2F;usr&#x2F;bin&#x2F;hello_podman_again.sh</span><br><span class="line">bash-4.4# exit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>找出刚刚执行且修改过的容器ID<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@goodluck~]# podman ps -l</span><br><span class="line">CONTAINER ID  IMAGE                                      COMMAND    CREATED             STATUS                         PORTS  NAMES</span><br><span class="line">8dfd64dfgood  registry.redhat.io&#x2F;rhel8-beta&#x2F;rhel:latest  &#x2F;bin&#x2F;bash  About a minute ago  Exited (0) About a minute ago         frosty_bhabha</span><br></pre></td></tr></table></figure>通过 commit 基于刚刚的容器镜像,以 hello_podman_again 为 tag 生成一个新的容器镜像.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@goodluck~]# podman commit 8dfd64dfgood rhel8-beta:hello_podman_again</span><br><span class="line">Getting image source signatures</span><br><span class="line">Skipping blob fba35a2dgood (already present): 200.01 MiB &#x2F; 200.01 MiB [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] 0s</span><br><span class="line">Skipping blob 848ae511good (already present): 10.00 KiB &#x2F; 10.00 KiB [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] 0s</span><br><span class="line">Copying blob aed58d13good: 5.50 KiB &#x2F; 5.50 KiB [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] 0s</span><br><span class="line">Copying config 4036a262good: 3.12 KiB &#x2F; 3.12 KiB [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] 0s</span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br><span class="line">4036a262d1c54477cc8f5014bcb57be323b408c31c78f35a7f6b198a4f6agood</span><br></pre></td></tr></table></figure>执行验证我们的镜像<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@goodluck~]# podman run rhel8-beta:hello_podman_again &#x2F;usr&#x2F;bin&#x2F;hello_podman_again.sh</span><br><span class="line"> *** HELLO PODMAN AGAIN***</span><br></pre></td></tr></table></figure><h4 id="使用-docker-commit-意味着所有对镜像的操作都是黑箱操作，生成的镜像也被称为-黑箱镜像，换句话说，就是除了制作镜像的人知道执行过什么命令、怎么生成的镜像，别人根本无从得知。而且，即使是这个制作镜像的人，过一段时间后也无法记清具体的操作。这种黑箱镜像的维护工作是非常痛苦的"><a href="#使用-docker-commit-意味着所有对镜像的操作都是黑箱操作，生成的镜像也被称为-黑箱镜像，换句话说，就是除了制作镜像的人知道执行过什么命令、怎么生成的镜像，别人根本无从得知。而且，即使是这个制作镜像的人，过一段时间后也无法记清具体的操作。这种黑箱镜像的维护工作是非常痛苦的" class="headerlink" title="使用 docker commit 意味着所有对镜像的操作都是黑箱操作，生成的镜像也被称为 黑箱镜像，换句话说，就是除了制作镜像的人知道执行过什么命令、怎么生成的镜像，别人根本无从得知。而且，即使是这个制作镜像的人，过一段时间后也无法记清具体的操作。这种黑箱镜像的维护工作是非常痛苦的"></a>使用 docker commit 意味着所有对镜像的操作都是黑箱操作，生成的镜像也被称为 黑箱镜像，换句话说，就是除了制作镜像的人知道执行过什么命令、怎么生成的镜像，别人根本无从得知。而且，即使是这个制作镜像的人，过一段时间后也无法记清具体的操作。这种黑箱镜像的维护工作是非常痛苦的</h4></li></ul><h3 id="4-使用inspect-查看容器详细信息"><a href="#4-使用inspect-查看容器详细信息" class="headerlink" title="4. 使用inspect 查看容器详细信息"></a>4. 使用inspect 查看容器详细信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># podman inspect 8dfd64dfgood</span><br></pre></td></tr></table></figure><h3 id="5-使用logs-查看信息"><a href="#5-使用logs-查看信息" class="headerlink" title="5. 使用logs 查看信息"></a>5. 使用logs 查看信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># podman logs -f 8dfd64dfgood</span><br></pre></td></tr></table></figure><h3 id="6-停止一个容器"><a href="#6-停止一个容器" class="headerlink" title="6. 停止一个容器"></a>6. 停止一个容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># podman stop 8dfd64dfgood</span><br></pre></td></tr></table></figure><h3 id="7-查看一个容器的文件系统的改动"><a href="#7-查看一个容器的文件系统的改动" class="headerlink" title="7. 查看一个容器的文件系统的改动"></a>7. 查看一个容器的文件系统的改动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># podman diff 8dfd64dfgood</span><br></pre></td></tr></table></figure><h3 id="8-查看镜像，容器，卷-占用的空间大小"><a href="#8-查看镜像，容器，卷-占用的空间大小" class="headerlink" title="8 查看镜像，容器，卷 占用的空间大小"></a>8 查看镜像，容器，卷 占用的空间大小</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># podman system df</span><br><span class="line">TYPE            TOTAL   ACTIVE   SIZE     RECLAIMABLE</span><br><span class="line">Images          57      4        57.3GB   57.3GB (99%)</span><br><span class="line">Containers      5       0        1.36GB   1.36GB (100%)</span><br><span class="line">Local Volumes   2       1        9.31MB   9.31MB (100%)</span><br></pre></td></tr></table></figure><h3 id="9-启动一个容器-d-已-deamon的形式执行，-p-host的端口：容器的端口"><a href="#9-启动一个容器-d-已-deamon的形式执行，-p-host的端口：容器的端口" class="headerlink" title="9 启动一个容器 -d 已 deamon的形式执行， -p host的端口：容器的端口"></a>9 启动一个容器 -d 已 deamon的形式执行， -p host的端口：容器的端口</h3><p>（格式为 EXPOSE &lt;端口1&gt; [&lt;端口2&gt;…]<br>EXPOSE 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 docker/podman run -P 时，会自动随机映射 EXPOSE 的端口。<br>要将 EXPOSE 和在运行时使用 -p &lt;宿主端口&gt;:&lt;容器端口&gt; 区分开来。-p，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 EXPOSE 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。） 注： 容器是否会长久运行，是和 docker run 指定的命令有关，和 -d 参数无关。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@sam Python-3.4.10]# podman run --rm --name webserver -d -p 8888:80 nginx</span><br><span class="line">5d8a68f639dcdfea6e0a74a4916973b44b2babb0b3998bc0ec1c71f55c99b648</span><br><span class="line">[root@sam Python-3.4.10]# podman ps</span><br><span class="line">CONTAINER ID  IMAGE                           COMMAND               CREATED         STATUS             PORTS                 NAMES</span><br><span class="line">5d8a68f639dc  docker.io&#x2F;library&#x2F;nginx:latest  nginx -g daemon o...  11 seconds ago  Up 11 seconds ago  0.0.0.0:8888-&gt;80&#x2F;tcp  webserver</span><br><span class="line">[root@sam Python-3.4.10]#</span><br></pre></td></tr></table></figure><h3 id="10-进入刚刚的容器-也可以使用attach，-但是注意的，如果exit之后，容器也会终止，-使用exec则不会终止"><a href="#10-进入刚刚的容器-也可以使用attach，-但是注意的，如果exit之后，容器也会终止，-使用exec则不会终止" class="headerlink" title="10 进入刚刚的容器 (也可以使用attach， 但是注意的，如果exit之后，容器也会终止， 使用exec则不会终止)"></a>10 进入刚刚的容器 (也可以使用attach， 但是注意的，如果exit之后，容器也会终止， 使用exec则不会终止)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># podman exec -it webserver bash</span><br></pre></td></tr></table></figure><h3 id="11-使用diff看里面文件的修改"><a href="#11-使用diff看里面文件的修改" class="headerlink" title="11 使用diff看里面文件的修改"></a>11 使用diff看里面文件的修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># podman diff webserver</span><br></pre></td></tr></table></figure><h3 id="12-查看修改的历史（–no-trunc-现实完整命令）"><a href="#12-查看修改的历史（–no-trunc-现实完整命令）" class="headerlink" title="12 查看修改的历史（–no-trunc 现实完整命令）"></a>12 查看修改的历史（–no-trunc 现实完整命令）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># podman history registry.redhat.io&#x2F;rhel7:7.8-crash-v2</span><br></pre></td></tr></table></figure><h3 id="13-导出本地镜像"><a href="#13-导出本地镜像" class="headerlink" title="13 导出本地镜像"></a>13 导出本地镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># docker export 7691a814370e &gt; ubuntu.tar</span><br></pre></td></tr></table></figure><h3 id="14-一次清除所有在推出状态的容器"><a href="#14-一次清除所有在推出状态的容器" class="headerlink" title="14 一次清除所有在推出状态的容器"></a>14 一次清除所有在推出状态的容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># podman container prune</span><br></pre></td></tr></table></figure><h3 id="15-仓库服务器"><a href="#15-仓库服务器" class="headerlink" title="15 仓库服务器"></a>15 仓库服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Registry 注册服务器地址][仓库名][镜像名字]</span><br><span class="line">registry.access.redhat.com&#x2F;rhosp13&#x2F;openstack-nova-compute</span><br></pre></td></tr></table></figure><h3 id="16-查找镜像可以使用search"><a href="#16-查找镜像可以使用search" class="headerlink" title="16 查找镜像可以使用search"></a>16 查找镜像可以使用search</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># podman search centos</span><br></pre></td></tr></table></figure><h3 id="17-通过使用docker-registry建立本地镜像仓库（这将使用官方的-registry-镜像来启动私有仓库。默认情况下，仓库会被创建在容器的-var-lib-registry-目录下。你可以通过-v-参数来将镜像文件存放在本地的指定路径。例如下面的例子将上传的镜像放到本地的-opt-data-registry-目录。）"><a href="#17-通过使用docker-registry建立本地镜像仓库（这将使用官方的-registry-镜像来启动私有仓库。默认情况下，仓库会被创建在容器的-var-lib-registry-目录下。你可以通过-v-参数来将镜像文件存放在本地的指定路径。例如下面的例子将上传的镜像放到本地的-opt-data-registry-目录。）" class="headerlink" title="17 通过使用docker-registry建立本地镜像仓库（这将使用官方的 registry 镜像来启动私有仓库。默认情况下，仓库会被创建在容器的 /var/lib/registry 目录下。你可以通过 -v 参数来将镜像文件存放在本地的指定路径。例如下面的例子将上传的镜像放到本地的 /opt/data/registry 目录。）"></a>17 通过使用docker-registry建立本地镜像仓库（这将使用官方的 registry 镜像来启动私有仓库。默认情况下，仓库会被创建在容器的 /var/lib/registry 目录下。你可以通过 -v 参数来将镜像文件存放在本地的指定路径。例如下面的例子将上传的镜像放到本地的 /opt/data/registry 目录。）</h3><h4 id="17-1-创建好私有仓库之后，就可以使用-podman-tag-来标记一个镜像，然后推送它到仓库。例如私有仓库地址为-127-0-0-1-5000"><a href="#17-1-创建好私有仓库之后，就可以使用-podman-tag-来标记一个镜像，然后推送它到仓库。例如私有仓库地址为-127-0-0-1-5000" class="headerlink" title="17.1 创建好私有仓库之后，就可以使用 podman tag 来标记一个镜像，然后推送它到仓库。例如私有仓库地址为 127.0.0.1:5000"></a>17.1 创建好私有仓库之后，就可以使用 podman tag 来标记一个镜像，然后推送它到仓库。例如私有仓库地址为 127.0.0.1:5000</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># podman run -d -p 5000:5000 --restart&#x3D;always --name registry registry</span><br><span class="line"># podman run -d -p 5000:5000 -v &#x2F;opt&#x2F;data&#x2F;registry:&#x2F;var&#x2F;lib&#x2F;registry registry</span><br></pre></td></tr></table></figure><h4 id="17-2-使用podman-tag来对tag的设置"><a href="#17-2-使用podman-tag来对tag的设置" class="headerlink" title="17.2 使用podman tag来对tag的设置"></a>17.2 使用podman tag来对tag的设置</h4><p>使用 podman tag 将 ubuntu:latest 这个镜像标记为 127.0.0.1:5000/ubuntu:latest。<br>格式为 podman tag IMAGE[:TAG] [REGISTRY_HOST[:REGISTRY_PORT]/]REPOSITORY[:TAG]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># podman tag ubuntu:latest 127.0.0.1:5000&#x2F;ubuntu:latest</span><br></pre></td></tr></table></figure><h3 id="18-创建一个数据卷"><a href="#18-创建一个数据卷" class="headerlink" title="18 创建一个数据卷"></a>18 创建一个数据卷</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># podman volume create sam-volume</span><br></pre></td></tr></table></figure><h3 id="19-查看一个数据卷"><a href="#19-查看一个数据卷" class="headerlink" title="19 查看一个数据卷"></a>19 查看一个数据卷</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># podman volume ls</span><br></pre></td></tr></table></figure><h3 id="20-查看一个数据卷的详细信息"><a href="#20-查看一个数据卷的详细信息" class="headerlink" title="20 查看一个数据卷的详细信息"></a>20 查看一个数据卷的详细信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># podman volume inspect sam-volume</span><br></pre></td></tr></table></figure><h3 id="21-如果需要在删除容器的时候，也删除数据卷"><a href="#21-如果需要在删除容器的时候，也删除数据卷" class="headerlink" title="21 如果需要在删除容器的时候，也删除数据卷"></a>21 如果需要在删除容器的时候，也删除数据卷</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># podman rm -v</span><br></pre></td></tr></table></figure><h3 id="22-清理无主的数据卷"><a href="#22-清理无主的数据卷" class="headerlink" title="22 清理无主的数据卷"></a>22 清理无主的数据卷</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># podman volume prune</span><br></pre></td></tr></table></figure><h2 id="23-挂载一个主机目录作为数据卷-使用-–mount-标记可以指定挂载一个本地主机的目录到容器中去-上面的命令加载主机的-src-webapp-目录到容器的-opt-webapp目录。这个功能在进行测试的时候十分方便，比如用户可以放置一些程序到本地目录中，来查看容器是否正常工作。本地目录的路径必须是绝对路径，-以前使用-v-参数时如果本地目录不存在-podman-会自动为你创建一个文件夹，现在使用-–mount-参数时如果本地目录不存在，podman-会报错。"><a href="#23-挂载一个主机目录作为数据卷-使用-–mount-标记可以指定挂载一个本地主机的目录到容器中去-上面的命令加载主机的-src-webapp-目录到容器的-opt-webapp目录。这个功能在进行测试的时候十分方便，比如用户可以放置一些程序到本地目录中，来查看容器是否正常工作。本地目录的路径必须是绝对路径，-以前使用-v-参数时如果本地目录不存在-podman-会自动为你创建一个文件夹，现在使用-–mount-参数时如果本地目录不存在，podman-会报错。" class="headerlink" title="23 挂载一个主机目录作为数据卷 (使用 –mount 标记可以指定挂载一个本地主机的目录到容器中去). 上面的命令加载主机的 /src/webapp 目录到容器的 /opt/webapp目录。这个功能在进行测试的时候十分方便，比如用户可以放置一些程序到本地目录中，来查看容器是否正常工作。本地目录的路径必须是绝对路径，(以前使用 -v 参数时如果本地目录不存在 podman 会自动为你创建一个文件夹，现在使用 –mount 参数时如果本地目录不存在，podman 会报错。)"></a>23 挂载一个主机目录作为数据卷 (使用 –mount 标记可以指定挂载一个本地主机的目录到容器中去). 上面的命令加载主机的 /src/webapp 目录到容器的 /opt/webapp目录。这个功能在进行测试的时候十分方便，比如用户可以放置一些程序到本地目录中，来查看容器是否正常工作。本地目录的路径必须是绝对路径，(以前使用 -v 参数时如果本地目录不存在 podman 会自动为你创建一个文件夹，现在使用 –mount 参数时如果本地目录不存在，podman 会报错。)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># podman run --name sampinta --mount type&#x3D;bind,source&#x3D;&#x2F;root&#x2F;Pictures,target&#x3D;&#x2F;opt&#x2F; localhost&#x2F;pinta_filezilla:v3</span><br></pre></td></tr></table></figure><h2 id="24-挂载一个本地主机文件作为数据卷"><a href="#24-挂载一个本地主机文件作为数据卷" class="headerlink" title="24 挂载一个本地主机文件作为数据卷"></a>24 挂载一个本地主机文件作为数据卷</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># podman run --name sampinta --mount type&#x3D;bind,source&#x3D;&#x2F;tmp&#x2F;history,target&#x3D;&#x2F;root&#x2F;.bash_history localhost&#x2F;pinta_filezilla:v3</span><br></pre></td></tr></table></figure><h2 id="25-映射指定端口以及针对IP的端口（-p-标记可以多次使用来绑定多个端口）"><a href="#25-映射指定端口以及针对IP的端口（-p-标记可以多次使用来绑定多个端口）" class="headerlink" title="25 映射指定端口以及针对IP的端口（-p 标记可以多次使用来绑定多个端口）"></a>25 映射指定端口以及针对IP的端口（-p 标记可以多次使用来绑定多个端口）</h2><h3 id="25-1-主机的6000端口与容器的5000端口映射"><a href="#25-1-主机的6000端口与容器的5000端口映射" class="headerlink" title="25.1 主机的6000端口与容器的5000端口映射"></a>25.1 主机的6000端口与容器的5000端口映射</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">podman run -d -p 6000:5000 registry.redhat.io&#x2F;rhel7</span><br></pre></td></tr></table></figure><h3 id="25-2-主机的IP上的6000端口与容器的5000端口映射"><a href="#25-2-主机的IP上的6000端口与容器的5000端口映射" class="headerlink" title="25.2 主机的IP上的6000端口与容器的5000端口映射"></a>25.2 主机的IP上的6000端口与容器的5000端口映射</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">podman run -d -p 127.0.0.1:6000:5000 registry.redhat.io&#x2F;rhel7</span><br></pre></td></tr></table></figure><h3 id="25-3-主机的任意端口与容器的5000端口映射"><a href="#25-3-主机的任意端口与容器的5000端口映射" class="headerlink" title="25.3 主机的任意端口与容器的5000端口映射"></a>25.3 主机的任意端口与容器的5000端口映射</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">podman run -d -p 127.0.0.1::5000 registry.redhat.io&#x2F;rhel7</span><br></pre></td></tr></table></figure><h3 id="25-4-主机的IP的6000端口与容器的5000端口通过UDP映射"><a href="#25-4-主机的IP的6000端口与容器的5000端口通过UDP映射" class="headerlink" title="25.4 主机的IP的6000端口与容器的5000端口通过UDP映射"></a>25.4 主机的IP的6000端口与容器的5000端口通过UDP映射</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">podman run -d -p 127.0.0.1:6000:5000&#x2F;udp reg-p 标记可以多次使用来绑定多个端口istry.redhat.io&#x2F;rhel7</span><br></pre></td></tr></table></figure><h3 id="25-5-查看端口映射配置"><a href="#25-5-查看端口映射配置" class="headerlink" title="25.5 查看端口映射配置"></a>25.5 查看端口映射配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">podman port nostalgic_morse 6000</span><br></pre></td></tr></table></figure><h3 id="26-容器互联，我们也可以通过“podman-network”-类命令实现-可以通过使用–dns-DNS-IP指定-容器需要的DNS地址"><a href="#26-容器互联，我们也可以通过“podman-network”-类命令实现-可以通过使用–dns-DNS-IP指定-容器需要的DNS地址" class="headerlink" title="26 容器互联，我们也可以通过“podman network” 类命令实现 (可以通过使用–dns=DNS_IP指定 容器需要的DNS地址)"></a>26 容器互联，我们也可以通过“podman network” 类命令实现 (可以通过使用–dns=DNS_IP指定 容器需要的DNS地址)</h3><h4 id="26-1-创建一个新的网络-（-d指定网络的类型，有overlay，bridge。-其中-overlay-网络类似与-“swarm-mode”）"><a href="#26-1-创建一个新的网络-（-d指定网络的类型，有overlay，bridge。-其中-overlay-网络类似与-“swarm-mode”）" class="headerlink" title="26.1 创建一个新的网络 （-d指定网络的类型，有overlay，bridge。 其中 overlay 网络类似与 “swarm mode”）"></a>26.1 创建一个新的网络 （-d指定网络的类型，有overlay，bridge。 其中 overlay 网络类似与 “swarm mode”）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">podman network create -d bridge test-net</span><br></pre></td></tr></table></figure><h4 id="26-2-运行一个容器并且连接到test-net"><a href="#26-2-运行一个容器并且连接到test-net" class="headerlink" title="26.2 运行一个容器并且连接到test-net"></a>26.2 运行一个容器并且连接到test-net</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">podman run -it --rm --name ubi2-test-net --network test-net registry.redhat.io&#x2F;rhel7:7.8-crash-v2 sh</span><br></pre></td></tr></table></figure><h3 id="27-如果容器需要访问外部网络，需要使用"><a href="#27-如果容器需要访问外部网络，需要使用" class="headerlink" title="27 如果容器需要访问外部网络，需要使用"></a>27 如果容器需要访问外部网络，需要使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_forward &#x3D; 1</span><br></pre></td></tr></table></figure><h3 id="28-podman-ps-显示全的命令"><a href="#28-podman-ps-显示全的命令" class="headerlink" title="28 podman ps 显示全的命令"></a>28 podman ps 显示全的命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a --no-trunc</span><br><span class="line">podman ps -a --no-trunc</span><br></pre></td></tr></table></figure><h3 id="27-（TO-BE-VERIFIED）多个容器互联，推荐docker-compose"><a href="#27-（TO-BE-VERIFIED）多个容器互联，推荐docker-compose" class="headerlink" title="27 （TO BE VERIFIED）多个容器互联，推荐docker compose"></a>27 （TO BE VERIFIED）多个容器互联，推荐docker compose</h3><h3 id="21-TO-BE-VERIFIED-启动一个挂在数据卷的容器（在用-podman-run-命令的时候，使用-–mount-标记来将-数据卷-挂载到容器里。在一次-podman-run-中可以挂载多个-数据卷。下面创建一个名为-web-的容器，并加载一个-数据卷-到容器的-webapp-目录）"><a href="#21-TO-BE-VERIFIED-启动一个挂在数据卷的容器（在用-podman-run-命令的时候，使用-–mount-标记来将-数据卷-挂载到容器里。在一次-podman-run-中可以挂载多个-数据卷。下面创建一个名为-web-的容器，并加载一个-数据卷-到容器的-webapp-目录）" class="headerlink" title="21 (TO BE VERIFIED) 启动一个挂在数据卷的容器（在用 podman run 命令的时候，使用 –mount 标记来将 数据卷 挂载到容器里。在一次 podman run 中可以挂载多个 数据卷。下面创建一个名为 web 的容器，并加载一个 数据卷 到容器的 /webapp 目录）"></a>21 (TO BE VERIFIED) 启动一个挂在数据卷的容器（在用 podman run 命令的时候，使用 –mount 标记来将 数据卷 挂载到容器里。在一次 podman run 中可以挂载多个 数据卷。下面创建一个名为 web 的容器，并加载一个 数据卷 到容器的 /webapp 目录）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ podman run -d -P --name web --mount source&#x3D;sam-volume,target&#x3D;&#x2F;webapp bash</span><br></pre></td></tr></table></figure><p>-p 标记可以多次使用来绑定多个端口</p><p>好, Red Hat Enterprise Linux 8 (RHEL8) 的新玩意 第1篇 之容器工具 podman 就介绍完毕了. 想要了解更多? 可以参考 man podman 和 podman -h<br>想要亲手玩一下新玩具? 请随时去 <a href="https://www.redhat.com/">https://www.redhat.com</a> 下载最新的 REHL 8 咯</p><p>也可以关注 <code>AddOS</code> 微信公众号获取更多的,有意思的新玩具 :-)</p>]]></content>
      
      
      <categories>
          
          <category> Linux 技巧(原创) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Red Hat Enterprise Linux 8 的新玩意 第3篇 之容器工具 skopeo, podman-docker</title>
      <link href="2021/02/16/RHEL8-news-toys-section3-skopeo_podman-docker/"/>
      <url>2021/02/16/RHEL8-news-toys-section3-skopeo_podman-docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Red-Hat-Enterprise-Linux-8-RHEL8-的新玩意-第3篇-之容器工具-skopeo-podman-docker"><a href="#Red-Hat-Enterprise-Linux-8-RHEL8-的新玩意-第3篇-之容器工具-skopeo-podman-docker" class="headerlink" title="Red Hat Enterprise Linux 8 (RHEL8) 的新玩意 第3篇 之容器工具 skopeo, podman-docker"></a>Red Hat Enterprise Linux 8 (RHEL8) 的新玩意 第3篇 之容器工具 skopeo, podman-docker</h1><h2 id="skopeo"><a href="#skopeo" class="headerlink" title="skopeo"></a><strong>skopeo</strong></h2><p>名字挺奇怪,这个是用来做什么的呢? 这个其实是一个容器镜像的拷贝工具, 它可以将容器镜像在容器 registeries中拷贝. 而同时它具有对容器镜像的签名认证功能.<br>让我们来看看它的基本用法.</p><ul><li>搜索容器镜像</li><li>比如我们可以从docker.io 上面来搜索fredora 的镜像<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@vm3_rhel8 ~]# skopeo inspect docker:&#x2F;&#x2F;docker.io&#x2F;fedora</span><br><span class="line">&#123;</span><br><span class="line">    &quot;Name&quot;: &quot;docker.io&#x2F;library&#x2F;fedora&quot;,</span><br><span class="line">    &quot;Digest&quot;: &quot;sha256:2a60898a6dd7da9964b0c59fedcf652e24bfff04142e5488f793c9e8156afd33&quot;,</span><br><span class="line">    &quot;RepoTags&quot;: [</span><br><span class="line">        &quot;20&quot;,</span><br><span class="line">        &quot;21&quot;,</span><br><span class="line">        &quot;22&quot;,</span><br><span class="line">        &quot;23&quot;,</span><br><span class="line">        &quot;24&quot;,</span><br><span class="line">        &quot;25&quot;,</span><br><span class="line">        &quot;26-modular&quot;,</span><br><span class="line">        &quot;26&quot;,</span><br><span class="line">        &quot;27&quot;,</span><br><span class="line">        &quot;28&quot;,</span><br><span class="line">        &quot;29&quot;,</span><br><span class="line">        &quot;30&quot;,</span><br><span class="line">        &quot;31&quot;,</span><br><span class="line">        &quot;branched&quot;,</span><br><span class="line">        &quot;heisenbug&quot;,</span><br><span class="line">        &quot;latest&quot;,</span><br><span class="line">        &quot;modular&quot;,</span><br><span class="line">        &quot;rawhide&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;Created&quot;: &quot;2019-03-12T00:20:38.300667849Z&quot;,</span><br><span class="line">    &quot;DockerVersion&quot;: &quot;18.06.1-ce&quot;,</span><br><span class="line">    &quot;Labels&quot;: &#123;</span><br><span class="line">        &quot;maintainer&quot;: &quot;Clement Verna \u003ccverna@fedoraproject.org\u003e&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;Architecture&quot;: &quot;amd64&quot;,</span><br><span class="line">    &quot;Os&quot;: &quot;linux&quot;,</span><br><span class="line">    &quot;Layers&quot;: [</span><br><span class="line">        &quot;sha256:01eb078129a0d03c93822037082860a3fefdc15b0313f07c6e1c2168aef5401b&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>拷贝镜像 (TO BE CONTINUE )<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux 技巧(原创) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>oom &quot;out_of_memory&quot; implementatoin 介绍</title>
      <link href="2021/02/16/oom%20out_of_memory%20implementatoin_CHN/"/>
      <url>2021/02/16/oom%20out_of_memory%20implementatoin_CHN/</url>
      
        <content type="html"><![CDATA[<h1 id="oom-“out-of-memory”-implementatoin-介绍"><a href="#oom-“out-of-memory”-implementatoin-介绍" class="headerlink" title="oom “out_of_memory” implementatoin 介绍."></a>oom “out_of_memory” implementatoin 介绍.</h1><p>注意,这里是基于内核 kernel-3.10.0-957.el7 (RHEL7.6)</p><h1 id="1-OOM-logs大概长什么样-这里使用手动触发OOM作为例子"><a href="#1-OOM-logs大概长什么样-这里使用手动触发OOM作为例子" class="headerlink" title="1 OOM logs大概长什么样(这里使用手动触发OOM作为例子)."></a>1 OOM logs大概长什么样(这里使用手动触发OOM作为例子).</h1><h2 id="1-1-例子-1"><a href="#1-1-例子-1" class="headerlink" title="1.1 例子 1"></a>1.1 例子 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sep 15 23:08:48 XYZ kernel: SysRq : Manual OOM execution</span><br><span class="line">Sep 15 23:08:48 XYZ kernel: Purging GPU memory, 29 pages freed, 30133 pages still pinned.</span><br></pre></td></tr></table></figure><h2 id="1-2-例子-2"><a href="#1-2-例子-2" class="headerlink" title="1.2 例子 2"></a>1.2 例子 2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Sep 15 23:38:48 XYZ kernel: SysRq : Manual OOM execution</span><br><span class="line">Sep 15 23:38:48 XYZ kernel: kworker&#x2F;5:0 invoked oom-killer: gfp_mask&#x3D;0xd0, order&#x3D;0,</span><br><span class="line">Sep 15 23:38:48 XYZ kernel: Workqueue: events moom_callback</span><br><span class="line">Sep 15 23:38:48 XYZ kernel: Call Trace:</span><br><span class="line">Sep 15 23:38:48 XYZ kernel: [&lt;ffffffffa7161dc1&gt;] dump_stack+0x19&#x2F;0x1b</span><br><span class="line">Sep 15 23:38:48 XYZ kernel: [&lt;ffffffffa715c7ea&gt;] dump_header+0x90&#x2F;0x229</span><br><span class="line">Sep 15 23:38:48 XYZ kernel: [&lt;ffffffffa6bba274&gt;] oom_kill_process+0x254&#x2F;0x3d0</span><br><span class="line">Sep 15 23:38:48 XYZ kernel: [&lt;ffffffffa6bbaab6&gt;] out_of_memory+0x4b6&#x2F;0x4f0</span><br><span class="line">Sep 15 23:38:48 XYZ kernel: [&lt;ffffffffa6e61f0d&gt;] moom_callback+0x4d&#x2F;0x50</span><br></pre></td></tr></table></figure><h1 id="2-看一下OOM的out-of-memory函数-它主要分了7步-先看简化的代码-之后看具体介绍"><a href="#2-看一下OOM的out-of-memory函数-它主要分了7步-先看简化的代码-之后看具体介绍" class="headerlink" title="2 看一下OOM的out_of_memory函数. 它主要分了7步,先看简化的代码,之后看具体介绍:"></a>2 看一下OOM的out_of_memory函数. 它主要分了7步,先看简化的代码,之后看具体介绍:</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">void out_of_memory(struct zonelist *zonelist, gfp_t gfp_mask,</span><br><span class="line">int order, nodemask_t *nodemask, bool force_kill)&#123;</span><br><span class="line">...</span><br><span class="line">blocking_notifier_call_chain(&amp;oom_notify_list, 0, &amp;freed);</span><br><span class="line">if (freed &gt; 0)</span><br><span class="line">return;</span><br><span class="line">...</span><br><span class="line">if (fatal_signal_pending(current) || current-&gt;flags &amp; PF_EXITING) &#123;</span><br><span class="line">set_thread_flag(TIF_MEMDIE);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">check_panic_on_oom(constraint, gfp_mask, order, mpol_mask);</span><br><span class="line"></span><br><span class="line">if (sysctl_oom_kill_allocating_task &amp;&amp; current-&gt;mm &amp;&amp; !oom_unkillable_task(current, NULL, nodemask) &amp;&amp; current-&gt;signal-&gt;oom_score_adj !&#x3D; OOM_SCORE_ADJ_MIN) &#123;</span><br><span class="line">...</span><br><span class="line">oom_kill_process(current, gfp_mask, order, 0, totalpages, NULL, nodemask, &quot;Out of memory (oom_kill_allocating_task)&quot;);</span><br><span class="line">goto out;</span><br><span class="line">&#125;</span><br><span class="line">p &#x3D; select_bad_process(&amp;points, totalpages, mpol_mask, force_kill);</span><br><span class="line">...</span><br><span class="line">if (!p) &#123;</span><br><span class="line">dump_header(NULL, gfp_mask, order, NULL, mpol_mask);</span><br><span class="line">panic(&quot;Out of memory and no killable processes...\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">oom_kill_process(p, gfp_mask, order, points, totalpages, NULL, nodemask, &quot;Out of memory&quot;);</span><br><span class="line">out:</span><br><span class="line">...</span><br><span class="line">schedule_timeout_killable(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第一-如果出现oom-先去处理通知链oom-notify-list的回调函数-如果内存回收成功-表现为freed大于0-则直接返回-然后快乐的收工了"><a href="#第一-如果出现oom-先去处理通知链oom-notify-list的回调函数-如果内存回收成功-表现为freed大于0-则直接返回-然后快乐的收工了" class="headerlink" title="第一, 如果出现oom, 先去处理通知链oom_notify_list的回调函数,如果内存回收成功(表现为freed大于0),则直接返回,然后快乐的收工了."></a>第一, 如果出现oom, 先去处理通知链oom_notify_list的回调函数,如果内存回收成功(表现为freed大于0),则直接返回,然后快乐的收工了.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blocking_notifier_call_chain(&amp;oom_notify_list, 0, &amp;freed);</span><br></pre></td></tr></table></figure><h2 id="第二-如果当前进程current-是一个thread-info结构-正在等待SIGKILL或者正在退出-设置进程标记为”TIF-MEMDIE”-代表进程由于OOM-目前正在关闭-然后直接返回-然后快乐的收工了"><a href="#第二-如果当前进程current-是一个thread-info结构-正在等待SIGKILL或者正在退出-设置进程标记为”TIF-MEMDIE”-代表进程由于OOM-目前正在关闭-然后直接返回-然后快乐的收工了" class="headerlink" title="第二, 如果当前进程current(是一个thread_info结构)正在等待SIGKILL或者正在退出,设置进程标记为”TIF_MEMDIE”(代表进程由于OOM,目前正在关闭), 然后直接返回, 然后快乐的收工了."></a>第二, 如果当前进程current(是一个thread_info结构)正在等待SIGKILL或者正在退出,设置进程标记为”TIF_MEMDIE”(代表进程由于OOM,目前正在关闭), 然后直接返回, 然后快乐的收工了.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (fatal_signal_pending(current) || current-&gt;flags &amp; PF_EXITING)</span><br></pre></td></tr></table></figure><h2 id="第三-限于NUMA场景-x86-64基本都是了-我们也可以看到内核配了CONFIG-NUMA-y-如果配置了vm-panic-on-oom-1-或者其他非0值-比如2-出现OOM-系统就panic了-注意-RHEL8内核作了加强-如果是由于sysrq-trigger的-就不panic了-panic之后也就没的玩了-被迫收工"><a href="#第三-限于NUMA场景-x86-64基本都是了-我们也可以看到内核配了CONFIG-NUMA-y-如果配置了vm-panic-on-oom-1-或者其他非0值-比如2-出现OOM-系统就panic了-注意-RHEL8内核作了加强-如果是由于sysrq-trigger的-就不panic了-panic之后也就没的玩了-被迫收工" class="headerlink" title="第三, 限于NUMA场景(x86_64基本都是了,我们也可以看到内核配了CONFIG_NUMA=y). 如果配置了vm.panic_on_oom=1 (或者其他非0值,比如2)出现OOM, 系统就panic了(注意,RHEL8内核作了加强,如果是由于sysrq-trigger的,就不panic了). panic之后也就没的玩了,被迫收工."></a>第三, 限于NUMA场景(x86_64基本都是了,我们也可以看到内核配了CONFIG_NUMA=y). 如果配置了vm.panic_on_oom=1 (或者其他非0值,比如2)出现OOM, 系统就panic了(注意,RHEL8内核作了加强,如果是由于sysrq-trigger的,就不panic了). panic之后也就没的玩了,被迫收工.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">check_panic_on_oom(constraint, gfp_mask, order, mpol_mask);</span><br></pre></td></tr></table></figure><h2 id="第四-如果配置了vm-oom-kill-allocating-task-1-而且当前进程不是内核进程-也不是1号init进程-而且有内存可以释放-并且进程的oom-score-adj不是-1000-总而言之-就是这个进程具备被kill的条件-那就把它kill掉-然后快乐的收工了"><a href="#第四-如果配置了vm-oom-kill-allocating-task-1-而且当前进程不是内核进程-也不是1号init进程-而且有内存可以释放-并且进程的oom-score-adj不是-1000-总而言之-就是这个进程具备被kill的条件-那就把它kill掉-然后快乐的收工了" class="headerlink" title="第四, 如果配置了vm.oom_kill_allocating_task=1,而且当前进程不是内核进程,也不是1号init进程,而且有内存可以释放, 并且进程的oom_score_adj不是-1000;总而言之,就是这个进程具备被kill的条件, 那就把它kill掉. 然后快乐的收工了."></a>第四, 如果配置了vm.oom_kill_allocating_task=1,而且当前进程不是内核进程,也不是1号init进程,而且有内存可以释放, 并且进程的oom_score_adj不是-1000;总而言之,就是这个进程具备被kill的条件, 那就把它kill掉. 然后快乐的收工了.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (sysctl_oom_kill_allocating_task &amp;&amp; current-&gt;mm &amp;&amp;!oom_unkillable_task(current, NULL, nodemask) &amp;&amp; current-&gt;signal-&gt;oom_score_adj !&#x3D; OOM_SCORE_ADJ_MIN)</span><br></pre></td></tr></table></figure><h2 id="第五-如果跑到了这里-那就要花点心思选一个分数最高的进程来kill了-基本的要点就是每个任务的rss，页表和交换空间使用的RAM的比例-谁totalpages多-那就越危险了-因为totalpages的值会算到得分里面去D-如果是root用户的进程-会给额外3-的折扣-root就是牛呀-如果找到就kill掉它-然后也可以收工了"><a href="#第五-如果跑到了这里-那就要花点心思选一个分数最高的进程来kill了-基本的要点就是每个任务的rss，页表和交换空间使用的RAM的比例-谁totalpages多-那就越危险了-因为totalpages的值会算到得分里面去D-如果是root用户的进程-会给额外3-的折扣-root就是牛呀-如果找到就kill掉它-然后也可以收工了" class="headerlink" title="第五, 如果跑到了这里,那就要花点心思选一个分数最高的进程来kill了. 基本的要点就是每个任务的rss，页表和交换空间使用的RAM的比例, 谁totalpages多, 那就越危险了 (因为totalpages的值会算到得分里面去D, 如果是root用户的进程,会给额外3%的折扣,root就是牛呀.), 如果找到就kill掉它,然后也可以收工了."></a>第五, 如果跑到了这里,那就要花点心思选一个分数最高的进程来kill了. 基本的要点就是每个任务的rss，页表和交换空间使用的RAM的比例, 谁totalpages多, 那就越危险了 (因为totalpages的值会算到得分里面去D, 如果是root用户的进程,会给额外3%的折扣,root就是牛呀.), 如果找到就kill掉它,然后也可以收工了.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select_bad_process(&amp;points, totalpages, mpol_mask, force_kill);</span><br></pre></td></tr></table></figure><h2 id="第六-这一步和第七是二选一的-如果还没找到可以kill的进程-那就倒霉了-输出信息之后就等系统panic了-没的玩了-被迫收工"><a href="#第六-这一步和第七是二选一的-如果还没找到可以kill的进程-那就倒霉了-输出信息之后就等系统panic了-没的玩了-被迫收工" class="headerlink" title="第六, 这一步和第七是二选一的. 如果还没找到可以kill的进程,那就倒霉了. 输出信息之后就等系统panic了.没的玩了,被迫收工"></a>第六, 这一步和第七是二选一的. 如果还没找到可以kill的进程,那就倒霉了. 输出信息之后就等系统panic了.没的玩了,被迫收工</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">panic(&quot;Out of memory and no killable processes...\n&quot;);</span><br></pre></td></tr></table></figure><h2 id="第七-这一步和第六是二选一的-如果找到可以kill的进程-kill掉它-将进程设置为TASK-KILLABLE-然后等待1个jiffies-那就全部打完收工咯"><a href="#第七-这一步和第六是二选一的-如果找到可以kill的进程-kill掉它-将进程设置为TASK-KILLABLE-然后等待1个jiffies-那就全部打完收工咯" class="headerlink" title="第七, 这一步和第六是二选一的. 如果找到可以kill的进程,kill掉它.将进程设置为TASK_KILLABLE, 然后等待1个jiffies,那就全部打完收工咯."></a>第七, 这一步和第六是二选一的. 如果找到可以kill的进程,kill掉它.将进程设置为TASK_KILLABLE, 然后等待1个jiffies,那就全部打完收工咯.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">oom_kill_process(p, gfp_mask, order, points, totalpages, NULL,nodemask, &quot;Out of memory&quot;);</span><br><span class="line">schedule_timeout_killable(1);</span><br></pre></td></tr></table></figure><h1 id="3-再来补充一下前面提到的oom-notify-list的通知链"><a href="#3-再来补充一下前面提到的oom-notify-list的通知链" class="headerlink" title="3 再来补充一下前面提到的oom_notify_list的通知链."></a>3 再来补充一下前面提到的oom_notify_list的通知链.</h1><h1 id="3-1-内核为OOM定义了一个oom-notify-list通知链"><a href="#3-1-内核为OOM定义了一个oom-notify-list通知链" class="headerlink" title="3.1 内核为OOM定义了一个oom_notify_list通知链."></a>3.1 内核为OOM定义了一个oom_notify_list通知链.</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static BLOCKING_NOTIFIER_HEAD(oom_notify_list);</span><br></pre></td></tr></table></figure><h1 id="3-2-一些希望在OOM时-收到内核通知的-就先把自己注册到通知链-目前virtio-balloon和i915注册到了oom-notify-list通知链里面-所以出现OOM-会先在通知链里面找这两个敢死队员-P-如果出现OOM-就先去通知链去找已经注册好的回调函数-这也就是为什么我们能看到第1个OOM的log-而没有出现更多的OOM-logs"><a href="#3-2-一些希望在OOM时-收到内核通知的-就先把自己注册到通知链-目前virtio-balloon和i915注册到了oom-notify-list通知链里面-所以出现OOM-会先在通知链里面找这两个敢死队员-P-如果出现OOM-就先去通知链去找已经注册好的回调函数-这也就是为什么我们能看到第1个OOM的log-而没有出现更多的OOM-logs" class="headerlink" title="3.2 一些希望在OOM时,收到内核通知的, 就先把自己注册到通知链 (目前virtio_balloon和i915注册到了oom_notify_list通知链里面,所以出现OOM, 会先在通知链里面找这两个敢死队员:P). 如果出现OOM, 就先去通知链去找已经注册好的回调函数. 这也就是为什么我们能看到第1个OOM的log,而没有出现更多的OOM logs."></a>3.2 一些希望在OOM时,收到内核通知的, 就先把自己注册到通知链 (目前virtio_balloon和i915注册到了oom_notify_list通知链里面,所以出现OOM, 会先在通知链里面找这两个敢死队员:P). 如果出现OOM, 就先去通知链去找已经注册好的回调函数. 这也就是为什么我们能看到第1个OOM的log,而没有出现更多的OOM logs.</h1><ul><li>virtio_balloon<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vb-&gt;nb.notifier_call &#x3D; virtballoon_oom_notify;</span><br></pre></td></tr></table></figure></li><li>i915<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i915-&gt;mm.oom_notifier.notifier_call &#x3D; i915_gem_shrinker_oom;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux 技巧(原创) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>X86 汇编指令大全</title>
      <link href="2021/02/16/X86_MASN_instructions/"/>
      <url>2021/02/16/X86_MASN_instructions/</url>
      
        <content type="html"><![CDATA[<h1 id="X86-汇编指令大全"><a href="#X86-汇编指令大全" class="headerlink" title="X86 汇编指令大全"></a>X86 汇编指令大全</h1><h1 id="1-数据传输字令"><a href="#1-数据传输字令" class="headerlink" title="1 数据传输字令"></a>1 数据传输字令</h1><h2 id="1-1-通用数据传送指令"><a href="#1-1-通用数据传送指令" class="headerlink" title="1.1 通用数据传送指令."></a>1.1 通用数据传送指令.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MOV     传送字或字节.</span><br><span class="line">MOVSX   先符号扩展,再传送.</span><br><span class="line">MOVZX   先零扩展,再传送.</span><br><span class="line">PUSH    把字压入堆栈.</span><br><span class="line">POP     把字弹出堆栈.</span><br><span class="line">PUSHA   把AX,CX,DX,BX,SP,BP,SI,DI依次压入堆栈.</span><br><span class="line">POPA    把DI,SI,BP,SP,BX,DX,CX,AX依次弹出堆栈.</span><br><span class="line">PUSHAD  把EAX,ECX,EDX,EBX,ESP,EBP,ESI,EDI依次压入堆栈.</span><br><span class="line">POPAD   把EDI,ESI,EBP,ESP,EBX,EDX,ECX,EAX依次弹出堆栈.</span><br><span class="line">BSWAP   交换32位寄存器里字节的顺序</span><br><span class="line">XCHG    交换字或字节.(至少有一个操作数为寄存器,段寄存器不可作为操作数)</span><br><span class="line">CMPXCHG 比较并交换操作数.(第二个操作数必须为累加器AL&#x2F;AX&#x2F;EAX)</span><br><span class="line">XADD    先交换再累加.(结果在第一个操作数里)</span><br><span class="line">XLAT    字节查表转换.----BX指向一张256字节的表的起点,AL为表的索引值(0-255,即0-FFH);返回AL为查表结果.([BX+AL]-&gt;AL)</span><br></pre></td></tr></table></figure><h2 id="1-2-输入输出端口传送指令"><a href="#1-2-输入输出端口传送指令" class="headerlink" title="1.2 输入输出端口传送指令."></a>1.2 输入输出端口传送指令.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IN      I&#x2F;O端口输入. ( 语法: IN   累加器,    &#123;端口号│DX&#125; )</span><br><span class="line">OUT     I&#x2F;O端口输出. ( 语法: OUT &#123;端口号│DX&#125;,累加器 )输入输出端口由立即方式指定时,    其范围是 0-255; 由寄存器 DX 指定时,其范围是    0-65535.</span><br></pre></td></tr></table></figure><h2 id="1-3-目的地址传送指令"><a href="#1-3-目的地址传送指令" class="headerlink" title="1.3 目的地址传送指令."></a>1.3 目的地址传送指令.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LEA     装入有效地址.例: LEA DX,string ;把偏移地址存到DX.</span><br><span class="line">LDS     传送目标指针,把指针内容装入DS.例: LDS SI,string   ;把段地址:偏移地址存到DS:SI.</span><br><span class="line">LES     传送目标指针,把指针内容装入ES.例: LES DI,string   ;把段地址:偏移地址存到ES:DI.</span><br><span class="line">LFS     传送目标指针,把指针内容装入FS.例: LFS DI,string   ;把段地址:偏移地址存到FS:DI.</span><br><span class="line">LGS     传送目标指针,把指针内容装入GS.例: LGS DI,string   ;把段地址:偏移地址存到GS:DI.</span><br><span class="line">LSS     传送目标指针,把指针内容装入SS.例: LSS DI,string   ;把段地址:偏移地址存到SS:DI.</span><br></pre></td></tr></table></figure><h2 id="1-4-标志传送指令"><a href="#1-4-标志传送指令" class="headerlink" title="1.4 标志传送指令."></a>1.4 标志传送指令.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LAHF    标志寄存器传送,把标志装入AH.</span><br><span class="line">SAHF    标志寄存器传送,把AH内容装入标志寄存器.</span><br><span class="line">PUSHF   标志入栈.</span><br><span class="line">POPF    标志出栈.</span><br><span class="line">PUSHD   32位标志入栈.</span><br><span class="line">POPD    32位标志出栈.</span><br></pre></td></tr></table></figure><h1 id="2-算术运算指令"><a href="#2-算术运算指令" class="headerlink" title="2 算术运算指令"></a>2 算术运算指令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ADD     加法.</span><br><span class="line">ADC     带进位加法.</span><br><span class="line">INC     加 1.</span><br><span class="line">AAA     加法的ASCII码调整.</span><br><span class="line">DAA     加法的十进制调整.</span><br><span class="line">SUB     减法.</span><br><span class="line">SBB     带借位减法.</span><br><span class="line">DEC     减 1.</span><br><span class="line">NEG     求反(以    0 减之).</span><br><span class="line">CMP     比较.(两操作数作减法,仅修改标志位,不回送结果).</span><br><span class="line">AAS     减法的ASCII码调整.</span><br><span class="line">DAS     减法的十进制调整.</span><br><span class="line">MUL     无符号乘法.结果回送AH和AL(字节运算),或DX和AX(字运算),</span><br><span class="line">IMUL    整数乘法.结果回送AH和AL(字节运算),或DX和AX(字运算),</span><br><span class="line">AAM     乘法的ASCII码调整.</span><br><span class="line">DIV     无符号除法.结果回送:商回送AL,余数回送AH, (字节运算);或 商回送AX,余数回送DX, (字运算).</span><br><span class="line">IDIV    整数除法.结果回送:商回送AL,余数回送AH, (字节运算);或 商回送AX,余数回送DX, (字运算).</span><br><span class="line">AAD     除法的ASCII码调整.</span><br><span class="line">CBW     字节转换为字. (把AL中字节的符号扩展到AH中去)</span><br><span class="line">CWD     字转换为双字. (把AX中的字的符号扩展到DX中去)</span><br><span class="line">CWDE    字转换为双字. (把AX中的字符号扩展到EAX中去)</span><br><span class="line">CDQ     双字扩展. (把EAX中的字的符号扩展到EDX中去)</span><br></pre></td></tr></table></figure><h1 id="3-逻辑运算指令"><a href="#3-逻辑运算指令" class="headerlink" title="3 逻辑运算指令"></a>3 逻辑运算指令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">AND     与运算.</span><br><span class="line">OR      或运算.</span><br><span class="line">XOR     异或运算.</span><br><span class="line">NOT     取反.</span><br><span class="line">TEST    测试.(两操作数作与运算,仅修改标志位,不回送结果).</span><br><span class="line">SHL     逻辑左移.</span><br><span class="line">SAL     算术左移.(&#x3D;SHL)</span><br><span class="line">SHR     逻辑右移.</span><br><span class="line">SAR     算术右移.(&#x3D;SHR)</span><br><span class="line">ROL     循环左移.</span><br><span class="line">ROR     循环右移.</span><br><span class="line">RCL     通过进位的循环左移.</span><br><span class="line">RCR     通过进位的循环右移.</span><br><span class="line">          以上八种移位指令,其移位次数可达255次.</span><br><span class="line">          移位一次时, 可直接用操作码. 如 SHL AX,1.</span><br><span class="line">          移位&gt;1次时, 则由寄存器CL给出移位次数.</span><br><span class="line">          如 MOV CL,04   SHL AX,CL</span><br></pre></td></tr></table></figure><h1 id="4-串指令"><a href="#4-串指令" class="headerlink" title="4 串指令"></a>4 串指令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">          DS:SI 源串段寄存器 :源串变址.</span><br><span class="line">          ES:DI 目标串段寄存器:目标串变址.</span><br><span class="line">          CX 重复次数计数器.</span><br><span class="line">          AL&#x2F;AX 扫描值.</span><br><span class="line">          D标志   0表示重复操作中SI和DI应自动增量; 1表示应自动减量.</span><br><span class="line">          Z标志   用来控制扫描或比较操作的结束.</span><br><span class="line">MOVS    串传送.( MOVSB 传送字符. MOVSW 传送字. MOVSD 传送双字. )</span><br><span class="line">CMPS    串比较.( CMPSB 比较字符. CMPSW 比较字. )</span><br><span class="line">SCAS    串扫描.把AL或AX的内容与目标串作比较,比较结果反映在标志位.</span><br><span class="line">LODS    装入串.把源串中的元素(字或字节)逐一装入AL或AX中.( LODSB 传送字符. LODSW 传送字.    LODSD 传送双字. )</span><br><span class="line">STOS    保存串.是LODS的逆过程.</span><br><span class="line">REP         当CX&#x2F;ECX&lt;&gt;0时重复.</span><br><span class="line">REPE&#x2F;REPZ   当ZF&#x3D;1或比较结果相等,且CX&#x2F;ECX&lt;&gt;0时重复.</span><br><span class="line">REPNE&#x2F;REPNZ 当ZF&#x3D;0或比较结果不相等,且CX&#x2F;ECX&lt;&gt;0时重复.</span><br><span class="line">REPC        当CF&#x3D;1且CX&#x2F;ECX&lt;&gt;0时重复.</span><br><span class="line">REPNC       当CF&#x3D;0且CX&#x2F;ECX&lt;&gt;0时重复.</span><br></pre></td></tr></table></figure><h1 id="5-程序转移指令"><a href="#5-程序转移指令" class="headerlink" title="5 程序转移指令"></a>5 程序转移指令</h1><h2 id="5-1-无条件转移指令-长转移"><a href="#5-1-无条件转移指令-长转移" class="headerlink" title="5.1 无条件转移指令 (长转移)"></a>5.1 无条件转移指令 (长转移)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JMP         无条件转移指令</span><br><span class="line">CALL        过程调用</span><br><span class="line">RET&#x2F;RETF    过程返回.</span><br></pre></td></tr></table></figure><h2 id="5-2-条件转移指令-短转移-128到-127的距离内-当且仅当-SF-XOR-OF-1时-OP1-lt-OP2"><a href="#5-2-条件转移指令-短转移-128到-127的距离内-当且仅当-SF-XOR-OF-1时-OP1-lt-OP2" class="headerlink" title="5.2 条件转移指令   (短转移,-128到+127的距离内)( 当且仅当(SF XOR OF)=1时,OP1&lt;OP2 )"></a>5.2 条件转移指令   (短转移,-128到+127的距离内)( 当且仅当(SF XOR OF)=1时,OP1&lt;OP2 )</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">JA&#x2F;JNBE     不小于或不等于时转移.</span><br><span class="line">JAE&#x2F;JNB     大于或等于转移.</span><br><span class="line">JB&#x2F;JNAE     小于转移.</span><br><span class="line">JBE&#x2F;JNA     小于或等于转移.</span><br><span class="line">    以上四条,测试无符号整数运算的结果(标志C和Z).</span><br><span class="line">JG&#x2F;JNLE     大于转移.</span><br><span class="line">JGE&#x2F;JNL     大于或等于转移.</span><br><span class="line">JL&#x2F;JNGE     小于转移.</span><br><span class="line">JLE&#x2F;JNG     小于或等于转移.</span><br><span class="line">    以上四条,测试带符号整数运算的结果(标志S,O和Z).</span><br><span class="line">JE&#x2F;JZ       等于转移.</span><br><span class="line">JNE&#x2F;JNZ     不等于时转移.</span><br><span class="line">JC          有进位时转移.</span><br><span class="line">JNC         无进位时转移.</span><br><span class="line">JNO         不溢出时转移.</span><br><span class="line">JNP&#x2F;JPO     奇偶性为奇数时转移.</span><br><span class="line">JNS         符号位为 &quot;0&quot; 时转移.</span><br><span class="line">JO          溢出转移.</span><br><span class="line">JP&#x2F;JPE      奇偶性为偶数时转移.</span><br><span class="line">JS          符号位为 &quot;1&quot; 时转移.</span><br></pre></td></tr></table></figure><h2 id="5-3-循环控制指令-短转移"><a href="#5-3-循环控制指令-短转移" class="headerlink" title="5.3 循环控制指令(短转移)"></a>5.3 循环控制指令(短转移)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LOOP            CX不为零时循环.</span><br><span class="line">LOOPE&#x2F;LOOPZ     CX不为零且标志Z&#x3D;1时循环.</span><br><span class="line">LOOPNE&#x2F;LOOPNZ   CX不为零且标志Z&#x3D;0时循环.</span><br><span class="line">JCXZ            CX为零时转移.</span><br><span class="line">JECXZ           ECX为零时转移.</span><br></pre></td></tr></table></figure><h2 id="5-4-中断指令"><a href="#5-4-中断指令" class="headerlink" title="5.4 中断指令"></a>5.4 中断指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INT         中断指令</span><br><span class="line">INTO        溢出中断</span><br><span class="line">IRET        中断返回</span><br></pre></td></tr></table></figure><h2 id="5-5-处理器控制指令"><a href="#5-5-处理器控制指令" class="headerlink" title="5.5 处理器控制指令"></a>5.5 处理器控制指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HLT         处理器暂停,  直到出现中断或复位信号才继续.</span><br><span class="line">WAIT        当芯片引线TEST为高电平时使CPU进入等待状态.</span><br><span class="line">ESC         转换到外处理器.</span><br><span class="line">LOCK        封锁总线.</span><br><span class="line">NOP         空操作.</span><br><span class="line">STC         置进位标志位.</span><br><span class="line">CLC         清进位标志位.</span><br><span class="line">CMC         进位标志取反.</span><br><span class="line">STD         置方向标志位.</span><br><span class="line">CLD         清方向标志位.</span><br><span class="line">STI         置中断允许位.</span><br><span class="line">CLI         清中断允许位.</span><br></pre></td></tr></table></figure><h1 id="6-伪指令"><a href="#6-伪指令" class="headerlink" title="6 伪指令"></a>6 伪指令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DW          定义字(2字节).</span><br><span class="line">PROC        定义过程.</span><br><span class="line">ENDP        过程结束.</span><br><span class="line">SEGMENT     定义段.</span><br><span class="line">ASSUME      建立段寄存器寻址.</span><br><span class="line">ENDS        段结束.</span><br><span class="line">END         程序结束.</span><br></pre></td></tr></table></figure><h1 id="7-处理机控制指令：标志处理指令"><a href="#7-处理机控制指令：标志处理指令" class="headerlink" title="7 处理机控制指令：标志处理指令"></a>7 处理机控制指令：标志处理指令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CLC     进位位置0指令</span><br><span class="line">CMC     进位位求反指令</span><br><span class="line">STC     进位位置为1指令</span><br><span class="line">CLD     方向标志置1指令</span><br><span class="line">STD     方向标志位置1指令</span><br><span class="line">CLI     中断标志置0指令</span><br><span class="line">STI     中断标志置1指令</span><br><span class="line">NOP     无操作</span><br><span class="line">HLT     停机</span><br><span class="line">WAIT    等待</span><br><span class="line">ESC     换码</span><br><span class="line">LOCK    封锁</span><br></pre></td></tr></table></figure><h1 id="8-浮点运算指令集"><a href="#8-浮点运算指令集" class="headerlink" title="8 浮点运算指令集"></a>8 浮点运算指令集</h1><h2 id="8-1-控制指令-带9B的控制指令前缀F变为FN时浮点不检查，机器码去掉9B"><a href="#8-1-控制指令-带9B的控制指令前缀F变为FN时浮点不检查，机器码去掉9B" class="headerlink" title="8.1 控制指令(带9B的控制指令前缀F变为FN时浮点不检查，机器码去掉9B)"></a>8.1 控制指令(带9B的控制指令前缀F变为FN时浮点不检查，机器码去掉9B)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">FINIT                 初始化浮点部件                  机器码  9B DB E3</span><br><span class="line">FCLEX                 清除异常                         机器码  9B DB E2</span><br><span class="line">FDISI                 浮点检查禁止中断                 机器码  9B DB E1</span><br><span class="line">FENI                  浮点检查禁止中断二            机器码  9B DB E0</span><br><span class="line">WAIT                  同步CPU和FPU                    机器码  9B</span><br><span class="line">FWAIT                 同步CPU和FPU                    机器码  D9 D0</span><br><span class="line">FNOP                  无操作                          机器码  DA E9</span><br><span class="line">FXCH                  交换ST(0)和ST(1)                机器码  D9 C9</span><br><span class="line">FXCH ST(i)            交换ST(0)和ST(i)                机器码  D9 C1iii</span><br><span class="line">FSTSW ax              状态字到ax                       机器码  9B DF E0</span><br><span class="line">FSTSW   word ptr mem  状态字到mem                      机器码  9B DD mm111mmm</span><br><span class="line">FLDCW   word ptr mem  mem到状态字                      机器码  D9 mm101mmm</span><br><span class="line">FSTCW   word ptr mem  控制字到mem                      机器码  9B D9 mm111mmm</span><br><span class="line"></span><br><span class="line">FLDENV  word ptr mem  mem到全环境                      机器码  D9 mm100mmm</span><br><span class="line">FSTENV  word ptr mem  全环境到mem                      机器码  9B D9 mm110mmm</span><br><span class="line">FRSTOR  word ptr mem  mem到FPU状态                    机器码  DD mm100mmm</span><br><span class="line">FSAVE   word ptr mem  FPU状态到mem                    机器码  9B DD mm110mmm</span><br><span class="line"></span><br><span class="line">FFREE ST(i)           标志ST(i)未使用                   机器码  DD C0iii</span><br><span class="line">FDECSTP               减少栈指针1-&gt;0 2-&gt;1             机器码  D9 F6</span><br><span class="line">FINCSTP               增加栈指针0-&gt;1 1-&gt;2             机器码  D9 F7</span><br><span class="line">FSETPM                浮点设置保护                       机器码  DB E4</span><br></pre></td></tr></table></figure><h2 id="8-2-数据传送指令"><a href="#8-2-数据传送指令" class="headerlink" title="8.2 数据传送指令"></a>8.2 数据传送指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">FLDZ                  将0.0装入ST(0)                  机器码  D9 EE</span><br><span class="line">FLD1                  将1.0装入ST(0)                  机器码  D9 E8</span><br><span class="line">FLDPI                 将π装入ST(0)                    机器码  D9 EB</span><br><span class="line">FLDL2T                将ln10&#x2F;ln2装入ST(0)             机器码  D9 E9</span><br><span class="line">FLDL2E                将1&#x2F;ln2装入ST(0)                机器码  D9 EA</span><br><span class="line">FLDLG2                将ln2&#x2F;ln10装入ST(0)             机器码  D9 EC</span><br><span class="line">FLDLN2                将ln2装入ST(0)                  机器码  D9 ED</span><br><span class="line"></span><br><span class="line">FLD    real4 ptr mem  装入mem的单精度浮点数             机器码  D9 mm000mmm</span><br><span class="line">FLD    real8 ptr mem  装入mem的双精度浮点数             机器码  DD mm000mmm</span><br><span class="line">FLD   real10 ptr mem  装入mem的十字节浮点数             机器码  DB mm101mmm</span><br><span class="line"></span><br><span class="line">FILD    word ptr mem  装入mem的二字节整数              机器码  DF mm000mmm</span><br><span class="line">FILD   dword ptr mem  装入mem的四字节整数              机器码  DB mm000mmm</span><br><span class="line">FILD   qword ptr mem  装入mem的八字节整数              机器码  DF mm101mmm</span><br><span class="line"></span><br><span class="line">FBLD   tbyte ptr mem  装入mem的十字节BCD数            机器码  DF mm100mmm</span><br><span class="line"></span><br><span class="line">FST    real4 ptr mem  保存单精度浮点数到mem             机器码  D9 mm010mmm</span><br><span class="line">FST    real8 ptr mem  保存双精度浮点数到mem             机器码  DD mm010mmm</span><br><span class="line"></span><br><span class="line">FIST    word ptr mem  保存二字节整数到mem              机器码  DF mm010mmm</span><br><span class="line">FIST   dword ptr mem  保存四字节整数到mem              机器码  DB mm010mmm</span><br><span class="line"></span><br><span class="line">FSTP   real4 ptr mem  保存单精度浮点数到mem并出栈      机器码  D9 mm011mmm</span><br><span class="line">FSTP   real8 ptr mem  保存双精度浮点数到mem并出栈      机器码  DD mm011mmm</span><br><span class="line">FSTP  real10 ptr mem  保存十字节浮点数到mem并出栈      机器码  DB mm111mmm</span><br><span class="line"></span><br><span class="line">FISTP   word ptr mem  保存二字节整数到mem并出栈           机器码  DF mm011mmm</span><br><span class="line">FISTP  dword ptr mem  保存四字节整数到mem并出栈           机器码  DB mm011mmm</span><br><span class="line">FISTP  qword ptr mem  保存八字节整数到mem并出栈           机器码  DF mm111mmm</span><br><span class="line"></span><br><span class="line">FBSTP  tbyte ptr mem  保存十字节BCD数到mem并出栈     机器码  DF mm110mmm</span><br><span class="line"></span><br><span class="line">FCMOVB                ST(0),ST(i) &lt;时传送              机器码  DA C0iii</span><br><span class="line">FCMOVBE               ST(0),ST(i) &lt;&#x3D;时传送             机器码  DA D0iii</span><br><span class="line">FCMOVE                ST(0),ST(i) &#x3D;时传送             机器码  DA C1iii</span><br><span class="line">FCMOVNB               ST(0),ST(i) &gt;&#x3D;时传送             机器码  DB C0iii</span><br><span class="line">FCMOVNBE              ST(0),ST(i) &gt;时传送              机器码  DB D0iii</span><br><span class="line">FCMOVNE               ST(0),ST(i) !&#x3D;时传送            机器码  DB C1iii</span><br><span class="line">FCMOVNU               ST(0),ST(i) 有序时传送        机器码  DB D1iii</span><br><span class="line">FCMOVU                ST(0),ST(i) 无序时传送        机器码  DA D1iii</span><br></pre></td></tr></table></figure><h2 id="8-3-比较指令"><a href="#8-3-比较指令" class="headerlink" title="8.3 比较指令"></a>8.3 比较指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">FCOM                  ST(0)-ST(1)                      机器码  D8 D1</span><br><span class="line">FCOMI                 ST(0),ST(i)  ST(0)-ST(1)         机器码  DB F0iii</span><br><span class="line">FCOMIP                ST(0),ST(i)  ST(0)-ST(1)并出栈   机器码  DF F0iii</span><br><span class="line">FCOM   real4 ptr mem  ST(0)-实数mem                      机器码  D8 mm010mmm</span><br><span class="line">FCOM   real8 ptr mem  ST(0)-实数mem                      机器码  DC mm010mmm</span><br><span class="line"></span><br><span class="line">FICOM   word ptr mem  ST(0)-整数mem                      机器码  DE mm010mmm</span><br><span class="line">FICOM  dword ptr mem  ST(0)-整数mem                      机器码  DA mm010mmm</span><br><span class="line">FICOMP  word ptr mem  ST(0)-整数mem并出栈               机器码  DE mm011mmm</span><br><span class="line">FICOMP dword ptr mem  ST(0)-整数mem并出栈               机器码  DA mm011mmm</span><br><span class="line"></span><br><span class="line">FTST                  ST(0)-0                          机器码  D9 E4</span><br><span class="line">FUCOM  ST(i)          ST(0)-ST(i)                      机器码  DD E0iii</span><br><span class="line">FUCOMP ST(i)          ST(0)-ST(i)并出栈                   机器码  DD E1iii</span><br><span class="line">FUCOMPP               ST(0)-ST(1)并二次出栈             机器码  DA E9</span><br><span class="line">FXAM                  ST(0)规格类型                    机器码  D9 E5</span><br></pre></td></tr></table></figure><h2 id="8-4-运算指令"><a href="#8-4-运算指令" class="headerlink" title="8.4 运算指令"></a>8.4 运算指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">FADD                  把目的操作数 (直接接在指令后的变量或堆栈缓存器) 与来源操作数 (接在目的操作数后的变量或堆栈缓存器)  相加，并将结果存入目的操作数</span><br><span class="line">FADDP  ST(i),ST       这个指令是使目的操作数加上 ST  缓存器，并弹出 ST 缓存器，而目的操作数必须是堆栈缓存器的其中之一，最后不管目的操作数为何，经弹出一次后，目的操作数会变成上一个堆栈缓存器了</span><br><span class="line">FIADD                 FIADD 是把 ST   加上来源操作数，然后再存入 ST 缓存器，来源操作数必须是字组整数或短整数形态的变数</span><br><span class="line"></span><br><span class="line">FSUB                  减</span><br><span class="line">FSUBP</span><br><span class="line">FSUBR                 减数与被减数互换</span><br><span class="line">FSUBRP</span><br><span class="line">FISUB</span><br><span class="line">FISUBR</span><br><span class="line"></span><br><span class="line">FMUL                  乘</span><br><span class="line">FMULP</span><br><span class="line">FIMUL</span><br><span class="line"></span><br><span class="line">FDIV                  除</span><br><span class="line">FDIVP</span><br><span class="line">FDIVR</span><br><span class="line">FDIVRP</span><br><span class="line">FIDIV</span><br><span class="line">FIDIVR</span><br><span class="line"></span><br><span class="line">FCHS                  改变 ST 的正负值</span><br><span class="line"></span><br><span class="line">FABS                  把 ST  之值取出，取其绝对值后再存回去。</span><br><span class="line"></span><br><span class="line">FSQRT                 将 ST  之值取出，开根号后再存回去。</span><br><span class="line"></span><br><span class="line">FSCALE                这个指令是计算 ST*2^ST(1)之值，再把结果存入 ST 里而 ST(1)   之值不变。ST(1)  必须是在 -32768 到 32768 (-215 到 215 )之间的整数，如果超过这个范围计算结果无法确定，如果不是整数 ST(1)    会先向零舍入成整数再计算。所以为安全起见，最好是由字组整数载入到 ST(1) 里。</span><br><span class="line"></span><br><span class="line">FRNDINT               这个指令是把 ST 的数值舍入成整数，FPU    提供四种舍入方式，由 FPU 的控制字组(control    word)中的 RC 两个位决定</span><br><span class="line">                          RC    舍入控制</span><br><span class="line">                          00    四舍五入</span><br><span class="line">                          01    向负无限大舍入</span><br><span class="line">                          10    向正无限大舍入</span><br><span class="line">                          11    向零舍去</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux 代码(原创) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>openvswitch 系列第二篇 API接口</title>
      <link href="2021/02/16/openvswitch_sesstion2_API_interface/"/>
      <url>2021/02/16/openvswitch_sesstion2_API_interface/</url>
      
        <content type="html"><![CDATA[<p>openvswitch 系列第二篇 API接口</p><h1 id="1-openvswitch"><a href="#1-openvswitch" class="headerlink" title="1. openvswitch"></a>1. openvswitch</h1><h2 id="1-1-基本描述"><a href="#1-1-基本描述" class="headerlink" title="1.1 基本描述"></a>1.1 基本描述</h2><p>datapath为ovs内核模块，负责执行数据交换，也就是把从接收端口收到的数据包在流表中进行匹配，并执行匹配到的动作。内核中可以实现多个datapath(可以理解为桥,就是我们用ovs-vsctl看到的br0/br1之类), 一个datapath类似一个物理交换机,它可以对应多个vport(vport类似物理交换机的端口概念)。一个datapth关联一个flow table，一个flow table包含多个条目，每个条目包括两个内容：一个是flow的 match/key; 另一个是对应的action. 最常见的action是在不同vport中进行转发。</p><p>当一个数据报到达vport, 内核首先将它的flow key解析出来,之后在内核模块datapath的flow cache (大小为(sizeof(struct sw_flow)+ (nr_cpu_ids * sizeof(struct flow_stats <em>) = ( 1248 + 6</em>8 )=1296, 根据系统实际的CUP的数量多少会稍有不同)中的flow table中查找. 如果找到匹配的flow 规则,则去执行对应的action. 如果没有找到匹配的flow规则,则将数据报通过netlink的方式发送到用户空间的ovs-vswitchd处理,而用户空间的流表空间(65536)大的多,所以匹配到的几率也更高,通过在用户空间查找,并执行对应的action;如果找到,会通过netlink把用户空间的流表推送到datapath的flow cache中,后续的报文就可以直接在内核态处理.如果最后还是没有找到,那就使用默认的流表规则(丢掉这个包,或者其他).</p><p>用户空间有两个进程组成：ovs-vswitchd和ovsdb-server。<br>ovsdb-server保存了ovs-vswitchd的配置信息,ovsdb通常是一个文件,并且保存在文件系统中,通常来说是/etc/openvswitch/conf.db<br>ovs-vswitchd是一个daemon,北向与Controller通过OpenFlow协议通信.南向与openvswitch内核模块通过netlink通信.东西向过OVSDB协议与ovsdb-server通信.</p><h1 id="2-openvswitch-API的分类"><a href="#2-openvswitch-API的分类" class="headerlink" title="2 openvswitch API的分类"></a>2 openvswitch API的分类</h1><p>在Linux中,可以使用Netlink来实现用户空间与内核的通信.而openvswitch也正是使用了netlink机制,使用其中的generic netlink来用来实现通信. openvswitch一共有4大类API: datapath, virtual port, flow, 和packet. 通常在使用这些时,我们需要CAP_NET_ADMIN的权限.</p><h2 id="2-1-datapath-API"><a href="#2-1-datapath-API" class="headerlink" title="2.1 datapath API"></a>2.1 datapath API</h2><p>有5种对应的操作NEW ,DEL,GET,SET和UNSPEC(预留的,现在不用).通过这些命令,用户可以建立,删除,查询和修改datapath.<br>定义为枚举类型,其实对应过来也就是操作码与数字的键值对.<br>enum ovs_datapath_cmd {<br>    OVS_DP_CMD_UNSPEC,<br>    OVS_DP_CMD_NEW,<br>    OVS_DP_CMD_DEL,<br>    OVS_DP_CMD_GET,<br>    OVS_DP_CMD_SET<br>};</p><h3 id="2-1-1-OVS-DP-CMD-NEW"><a href="#2-1-1-OVS-DP-CMD-NEW" class="headerlink" title="2.1.1 OVS_DP_CMD_NEW"></a>2.1.1 OVS_DP_CMD_NEW</h3><p>OVS_DP_CMD_NEW通过static int ovs_dp_cmd_new(struct sk_buff *skb, struct genl_info *info)实现.<br>当执行NEW操作的时候,ovs_dp_cmd_new 函数会被调用,此函数用于建立一个datapath.</p><h3 id="2-1-2-OVS-DP-CMD-DEL"><a href="#2-1-2-OVS-DP-CMD-DEL" class="headerlink" title="2.1.2 OVS_DP_CMD_DEL"></a>2.1.2 OVS_DP_CMD_DEL</h3><p>OVS_DP_CMD_DEL通过static int ovs_dp_cmd_del(struct sk_buff *skb, struct genl_info <em>info)实现.<br>当执行DEL操作的时候,ovs_dp_cmd_del函数会被调用,此函数用于删除一个datapath. 至于删除哪一个datapath的信息则是由</em>info获取的.</p><h3 id="2-1-3-OVS-DP-CMD-GET"><a href="#2-1-3-OVS-DP-CMD-GET" class="headerlink" title="2.1.3 OVS_DP_CMD_GET"></a>2.1.3 OVS_DP_CMD_GET</h3><p>OVS_DP_CMD_GET通过static int ovs_dp_cmd_get(struct sk_buff *skb, struct genl_info <em>info)实现.<br>当执行GET操作的时候,ovs_dp_cmd_get函数会被调用.通过从</em>info获取到的信息,最终通过调用ovs_dp_cmd_fill_info实现并通过genlmsg_reply返回.</p><h3 id="2-1-4-OVS-DP-CMD-SET"><a href="#2-1-4-OVS-DP-CMD-SET" class="headerlink" title="2.1.4 OVS_DP_CMD_SET"></a>2.1.4 OVS_DP_CMD_SET</h3><p>OVS_DP_CMD_SET通过static int ovs_dp_cmd_set(struct sk_buff *skb, struct genl_info *info)实现.<br>当执行SET操作的时候,ovs_dp_cmd_set函数会被调用.然后通过调用ovs_dp_change来进行属性的修改.</p><h2 id="2-2-virtual-port-API"><a href="#2-2-virtual-port-API" class="headerlink" title="2.2 virtual port API"></a>2.2 virtual port API</h2><p>有5种对应的操作NEW,DEL,GET,SET和UNSPEC(预留的,现在不用).通过这些命令,用户可以建立,删除,查询和修改vport.<br>定义为枚举类型,其实对应过来也就是操作码与数字的键值对.<br>enum ovs_vport_cmd {<br>    OVS_VPORT_CMD_UNSPEC,<br>    OVS_VPORT_CMD_NEW,<br>    OVS_VPORT_CMD_DEL,<br>    OVS_VPORT_CMD_GET,<br>    OVS_VPORT_CMD_SET<br>};</p><h3 id="2-2-1-OVS-VPORT-CMD-NEW"><a href="#2-2-1-OVS-VPORT-CMD-NEW" class="headerlink" title="2.2.1 OVS_VPORT_CMD_NEW"></a>2.2.1 OVS_VPORT_CMD_NEW</h3><p>OVS_VPORT_CMD_NEW通过static int ovs_vport_cmd_new(struct sk_buff *skb, struct genl_info <em>info)实现.<br>当执行NEW操作的时候,ovs_vport_cmd_new函数会被调用,然后给从</em>info获取到的datapath信息,给指定的datapath新建指定的端口.</p><h3 id="2-2-2-OVS-VPORT-CMD-DEL"><a href="#2-2-2-OVS-VPORT-CMD-DEL" class="headerlink" title="2.2.2 OVS_VPORT_CMD_DEL"></a>2.2.2 OVS_VPORT_CMD_DEL</h3><p>OVS_VPORT_CMD_DEL通过static int ovs_vport_cmd_del(struct sk_buff *skb, struct genl_info <em>info)实现.<br>当执行DEL操作的时候,ovs_vport_cmd_del函数会被调用,然后从</em>info中获取到指定的ports进行删除操作.</p><h3 id="2-2-3-OVS-VPORT-CMD-GET"><a href="#2-2-3-OVS-VPORT-CMD-GET" class="headerlink" title="2.2.3 OVS_VPORT_CMD_GET"></a>2.2.3 OVS_VPORT_CMD_GET</h3><p>OVS_VPORT_CMD_GET通过static int ovs_vport_cmd_get(struct sk_buff *skb, struct genl_info <em>info)实现.<br>当执行GET操作的时候,ovs_vport_cmd_get函数会被调用,然后从</em>info获取到指定端口的信息后,最后通过genlmsg_reply返回.</p><h3 id="2-2-4-OVS-VPORT-CMD-SET"><a href="#2-2-4-OVS-VPORT-CMD-SET" class="headerlink" title="2.2.4 OVS_VPORT_CMD_SET"></a>2.2.4 OVS_VPORT_CMD_SET</h3><p>OVS_VPORT_CMD_SET通过static int ovs_vport_cmd_set(struct sk_buff *skb, struct genl_info <em>info)实现.<br>当执行SET操作的时候,ovs_vport_cmd_set函数会被调用,然后从</em>info获取到指定的端口,然后调用ovs_vport_set_options来更新对应的vport属性.</p><h2 id="2-3-flow-API"><a href="#2-3-flow-API" class="headerlink" title="2.3 flow API"></a>2.3 flow API</h2><p>有5种对应的操作NEW,DEL,GET,SET和UNSPEC(预留的,现在不用).通过这些命令,用户可以建立,删除,查询和修改flow.<br>定义为枚举类型,其实对应过来也就是操作码与数字的键值对.<br>enum ovs_flow_cmd {<br>    OVS_FLOW_CMD_UNSPEC,<br>    OVS_FLOW_CMD_NEW,<br>    OVS_FLOW_CMD_DEL,<br>    OVS_FLOW_CMD_GET,<br>    OVS_FLOW_CMD_SET<br>};</p><h3 id="2-3-1-OVS-FLOW-CMD-NEW"><a href="#2-3-1-OVS-FLOW-CMD-NEW" class="headerlink" title="2.3.1 OVS_FLOW_CMD_NEW"></a>2.3.1 OVS_FLOW_CMD_NEW</h3><p>OVS_FLOW_CMD_NEW通过static int ovs_flow_cmd_new(struct sk_buff *skb, struct genl_info *info)实现.<br>当执行NEW操作的时候,ovs_flow_cmd_new会被调用然后一系列函数会被调用,比如ovs_flow_alloc,ovs_flow_tbl_insert,等等. 因为建立流表需要判断action是否有效,流表是否重复,而且还需要涉及同步加锁解锁等等.</p><h3 id="2-3-2-OVS-FLOW-CMD-DEL"><a href="#2-3-2-OVS-FLOW-CMD-DEL" class="headerlink" title="2.3.2 OVS_FLOW_CMD_DEL"></a>2.3.2 OVS_FLOW_CMD_DEL</h3><p>OVS_FLOW_CMD_DEL通过static int ovs_flow_cmd_del(struct sk_buff *skb, struct genl_info <em>info)实现.<br>当执行DEL操作的时候,ovs_flow_cmd_del会被调用,然后通过</em>info获取对应属性,找到对应datapath,对应的流表uuid,然后通过ovs_flow_tbl_remove,ovs_flow_free等等将对应流表删除.当然了,这个过程也得加锁解锁.</p><h3 id="2-3-3-OVS-FLOW-CMD-GET"><a href="#2-3-3-OVS-FLOW-CMD-GET" class="headerlink" title="2.3.3 OVS_FLOW_CMD_GET"></a>2.3.3 OVS_FLOW_CMD_GET</h3><p>OVS_FLOW_CMD_GET通过static int ovs_flow_cmd_get(struct sk_buff *skb, struct genl_info <em>info)实现.<br>当执行GET操作的时候,ovs_flow_cmd_get会被调用,然后通过</em>info获取对应属性,找到对应datapath,对应的流表uuid<br>最后通过ovs_flow_cmd_build_info获取到需要的信息,并返回.</p><h3 id="2-3-4-OVS-FLOW-CMD-SET"><a href="#2-3-4-OVS-FLOW-CMD-SET" class="headerlink" title="2.3.4 OVS_FLOW_CMD_SET"></a>2.3.4 OVS_FLOW_CMD_SET</h3><p>OVS_FLOW_CMD_SET通过static int ovs_flow_cmd_set(struct sk_buff *skb, struct genl_info <em>info)实现.<br>当执行SET操作的时候,ovs_flow_cmd_set会被调用,然后通过</em>info获取对应属性,找到对应datapath,对应的流表uuid,最后调用一系列函数,如ovsl_dereference更新action,用ovs_flow_stats_clear清除对应状态等等.当然,这个过程也得加锁解锁.</p><h2 id="2-4-packet-API"><a href="#2-4-packet-API" class="headerlink" title="2.4 packet API"></a>2.4 packet API</h2><p>有4种对应的操作MISS,ACTION,EXECUTE和和UNSPEC(预留的,现在不用),用于与用户空间应用进行数据包交互(发送,接收).<br>定义为枚举类型,其实对应过来也就是操作码与数字的键值对.<br>enum ovs_packet_cmd {<br>    OVS_PACKET_CMD_UNSPEC,<br>    OVS_PACKET_CMD_MISS,    /* 内核发向用户空间, 流表没有命中 <em>/<br>    OVS_PACKET_CMD_ACTION,  /</em> 内核发向用户空间, OVS_ACTION_ATTR_USERSPACE的操作. <em>/<br>    OVS_PACKET_CMD_EXECUTE  /</em> 用户空间命令,给对应的packet执行指定的动作 */<br>};</p><h3 id="2-4-1-OVS-PACKET-CMD-MISS"><a href="#2-4-1-OVS-PACKET-CMD-MISS" class="headerlink" title="2.4.1 OVS_PACKET_CMD_MISS"></a>2.4.1 OVS_PACKET_CMD_MISS</h3><p>内核函数ovs_dp_process_packet在处理datapath的packet的时候,如果出现流表没有匹配的话,ovs_flow_stats_update, u64_stats_update_begin等函数就会被调用,然后对应的datapath计数器会被更新.</p><h3 id="2-4-2-OVS-PACKET-CMD-ACTION"><a href="#2-4-2-OVS-PACKET-CMD-ACTION" class="headerlink" title="2.4.2 OVS_PACKET_CMD_ACTION"></a>2.4.2 OVS_PACKET_CMD_ACTION</h3><p>内核函数output_userspace通过初始化结构dp_upcall_indo将OVS_PACKET_CMD_ACTION传进去,然后调用ovs_dp_updacall实现对用户空间OVS_ACTION_ATTR_USERSPACE的操作.</p><h3 id="2-4-3-OVS-PACKET-CMD-EXECUTE"><a href="#2-4-3-OVS-PACKET-CMD-EXECUTE" class="headerlink" title="2.4.3 OVS_PACKET_CMD_EXECUTE"></a>2.4.3 OVS_PACKET_CMD_EXECUTE</h3><p>OVS_PACKET_CMD_EXECUTE通过static int ovs_packet_cmd_execute(struct sk_buff *skb, struct genl_info *info)实现. 当执行EXECUTE操作的时候,其实就是packet的发送(转发)过程. 一系列内核函数会被使用, __dev_alloc_skb建立一个skb, 通过ovs_flow_alloc建立一个sw_flow, 以及使用ovs_execute_actions来执行这个发送操作.</p><h1 id="3-OVS在Openshift和OpenStack的使用"><a href="#3-OVS在Openshift和OpenStack的使用" class="headerlink" title="3 OVS在Openshift和OpenStack的使用."></a>3 OVS在Openshift和OpenStack的使用.</h1><h2 id="3-1-Openshift在使用OVS时-并不是直接调用上面介绍到的API接口-而是使用OVS封装好的二进制工具比如ovs-appctl”-”ovs-dpctl”-”ovs-ofctl”-”ovs-vsctl”之类-通过”golang”调用的-例子如下"><a href="#3-1-Openshift在使用OVS时-并不是直接调用上面介绍到的API接口-而是使用OVS封装好的二进制工具比如ovs-appctl”-”ovs-dpctl”-”ovs-ofctl”-”ovs-vsctl”之类-通过”golang”调用的-例子如下" class="headerlink" title="3.1 Openshift在使用OVS时,并不是直接调用上面介绍到的API接口,而是使用OVS封装好的二进制工具比如ovs-appctl”,”ovs-dpctl”,”ovs-ofctl”,”ovs-vsctl”之类,通过”golang”调用的. 例子如下:"></a>3.1 Openshift在使用OVS时,并不是直接调用上面介绍到的API接口,而是使用OVS封装好的二进制工具比如ovs-appctl”,”ovs-dpctl”,”ovs-ofctl”,”ovs-vsctl”之类,通过”golang”调用的. 例子如下:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func (ovsif *ovsExec) AddPort(port string, ofportRequest int, properties ...string) (int, error) &#123;</span><br><span class="line">args :&#x3D; []string&#123;&quot;--may-exist&quot;, &quot;add-port&quot;, ovsif.bridge, port&#125;</span><br><span class="line">if ofportRequest &gt; 0 || len(properties) &gt; 0 &#123;</span><br><span class="line">args &#x3D; append(args, &quot;--&quot;, &quot;set&quot;, &quot;Interface&quot;, port)</span><br><span class="line">   &lt;truncated&gt;</span><br><span class="line">_, err :&#x3D; ovsif.exec(OVS_VSCTL, args...)</span><br><span class="line">   &lt;truncated&gt;</span><br></pre></td></tr></table></figure><h2 id="3-2-OpenStack在使用OVS时-同样也不是直接调用上面介绍到的API接口-而是使用OVS封装好的二进制工具比如ovs-appctl”-”ovs-dpctl”-”ovs-ofctl”-”ovs-vsctl”之类-通过”python”调用的-例子如下"><a href="#3-2-OpenStack在使用OVS时-同样也不是直接调用上面介绍到的API接口-而是使用OVS封装好的二进制工具比如ovs-appctl”-”ovs-dpctl”-”ovs-ofctl”-”ovs-vsctl”之类-通过”python”调用的-例子如下" class="headerlink" title="3.2 OpenStack在使用OVS时,同样也不是直接调用上面介绍到的API接口,而是使用OVS封装好的二进制工具比如ovs-appctl”,”ovs-dpctl”,”ovs-ofctl”,”ovs-vsctl”之类,通过”python”调用的.例子如下:"></a>3.2 OpenStack在使用OVS时,同样也不是直接调用上面介绍到的API接口,而是使用OVS封装好的二进制工具比如ovs-appctl”,”ovs-dpctl”,”ovs-ofctl”,”ovs-vsctl”之类,通过”python”调用的.例子如下:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class LinuxOVSInterfaceDriver(LinuxNetInterfaceDriver):</span><br><span class="line">&lt;truncated&gt;</span><br><span class="line">                _ovs_vsctl([&#39;--&#39;, &#39;--may-exist&#39;, &#39;add-port&#39;, bridge, dev,</span><br><span class="line">                        &#39;--&#39;, &#39;set&#39;, &#39;Interface&#39;, dev, &#39;type&#x3D;internal&#39;,</span><br><span class="line">                        &#39;--&#39;, &#39;set&#39;, &#39;Interface&#39;, dev,</span><br><span class="line">                        &#39;external-ids:iface-id&#x3D;%s&#39; % dev,</span><br><span class="line">                        &#39;--&#39;, &#39;set&#39;, &#39;Interface&#39;, dev,</span><br><span class="line">                        &#39;external-ids:iface-status&#x3D;active&#39;,</span><br><span class="line">                        &#39;--&#39;, &#39;set&#39;, &#39;Interface&#39;, dev,</span><br><span class="line">                        &#39;external-ids:attached-mac&#x3D;%s&#39; % mac_address])</span><br><span class="line">&lt;truncated&gt;</span><br><span class="line">                _execute(&#39;ovs-ofctl&#39;,</span><br><span class="line">                         &#39;add-flow&#39;, bridge, &#39;priority&#x3D;1,actions&#x3D;drop&#39;,</span><br><span class="line">                         run_as_root&#x3D;True)</span><br></pre></td></tr></table></figure><h1 id="4-到此-openvswitch的API就是简要地介绍完毕了"><a href="#4-到此-openvswitch的API就是简要地介绍完毕了" class="headerlink" title="4 到此,openvswitch的API就是简要地介绍完毕了."></a>4 到此,openvswitch的API就是简要地介绍完毕了.</h1>]]></content>
      
      
      <categories>
          
          <category> 网络 OVS(原创) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ovs-vsctl简明用户手册(基于版本openvswitch-2.11.0-4.el7.x86_64)</title>
      <link href="2021/02/16/ovs-vsctl_usage-guide-CHN/"/>
      <url>2021/02/16/ovs-vsctl_usage-guide-CHN/</url>
      
        <content type="html"><![CDATA[<h1 id="ovs-vsctl简明用户手册-基于版本openvswitch-2-11-0-4-el7-x86-64"><a href="#ovs-vsctl简明用户手册-基于版本openvswitch-2-11-0-4-el7-x86-64" class="headerlink" title="ovs-vsctl简明用户手册(基于版本openvswitch-2.11.0-4.el7.x86_64)"></a>ovs-vsctl简明用户手册(基于版本openvswitch-2.11.0-4.el7.x86_64)</h1><p><strong>ovs-vsctl</strong> 是一个用户命令行界面,可以用来操作ovs-vswitchd这个后台程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#x2F;usr&#x2F;share&#x2F;openvswitch&#x2F;scripts&#x2F;ovs-ctl start</span><br></pre></td></tr></table></figure><h1 id="1-操作虚拟网桥的命令"><a href="#1-操作虚拟网桥的命令" class="headerlink" title="1 操作虚拟网桥的命令."></a>1 操作虚拟网桥的命令.</h1><h2 id="1-1-初始化OVS数据库-这个命令没有输出"><a href="#1-1-初始化OVS数据库-这个命令没有输出" class="headerlink" title="1.1 初始化OVS数据库 (这个命令没有输出)"></a>1.1 初始化OVS数据库 (这个命令没有输出)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl init</span><br></pre></td></tr></table></figure><ul><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl init</span><br></pre></td></tr></table></figure><h2 id="1-2-输出当前OVS的状态-比如你可以看到OVS网桥-端口-port-接口-interface-和对应的类型"><a href="#1-2-输出当前OVS的状态-比如你可以看到OVS网桥-端口-port-接口-interface-和对应的类型" class="headerlink" title="1.2 输出当前OVS的状态, 比如你可以看到OVS网桥,端口(port),接口(interface)和对应的类型."></a>1.2 输出当前OVS的状态, 比如你可以看到OVS网桥,端口(port),接口(interface)和对应的类型.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl show</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl show</span><br><span class="line">Bridge &quot;samlee_br1&quot;</span><br><span class="line">    Port &quot;samlee_br1&quot;</span><br><span class="line">        Interface &quot;samlee_br1&quot;</span><br><span class="line">            type: internal</span><br><span class="line">    Port &quot;ens12&quot;</span><br><span class="line">        Interface &quot;ens12&quot;</span><br><span class="line">ovs_version: &quot;2.11.0&quot;</span><br></pre></td></tr></table></figure><h2 id="1-3-重新启动OVS网桥-这个命令没有输出"><a href="#1-3-重新启动OVS网桥-这个命令没有输出" class="headerlink" title="1.3 重新启动OVS网桥 (这个命令没有输出)"></a>1.3 重新启动OVS网桥 (这个命令没有输出)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl emer-reset</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl emer-reset</span><br></pre></td></tr></table></figure><h2 id="1-4-创建一个OVS网桥-这个命令没有输出"><a href="#1-4-创建一个OVS网桥-这个命令没有输出" class="headerlink" title="1.4 创建一个OVS网桥 (这个命令没有输出)"></a>1.4 创建一个OVS网桥 (这个命令没有输出)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl  add-br BRIDGE_NAME</span><br></pre></td></tr></table></figure></li><li>例子 (add a bridge, named samlee_br1)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl add-br samlee_br1</span><br></pre></td></tr></table></figure><h2 id="1-5-通过OVS父网桥创建一个桥中桥-并配上VLAN号-这个命令没有输出"><a href="#1-5-通过OVS父网桥创建一个桥中桥-并配上VLAN号-这个命令没有输出" class="headerlink" title="1.5 通过OVS父网桥创建一个桥中桥,并配上VLAN号(这个命令没有输出)"></a>1.5 通过OVS父网桥创建一个桥中桥,并配上VLAN号(这个命令没有输出)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl add-br BRIDGE_NAME PARENT_BR_NAME VLAN</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl add-br samlee_fake_br1 samlee_br1 200</span><br></pre></td></tr></table></figure><h2 id="1-6-删除OVS网桥并同时删除附在上面的端口与接口-这个命令没有输出"><a href="#1-6-删除OVS网桥并同时删除附在上面的端口与接口-这个命令没有输出" class="headerlink" title="1.6 删除OVS网桥并同时删除附在上面的端口与接口(这个命令没有输出)"></a>1.6 删除OVS网桥并同时删除附在上面的端口与接口(这个命令没有输出)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl del-br BRIDGE_NAME</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl del-br tobedeleted_br1</span><br></pre></td></tr></table></figure><h2 id="1-7-列出所有OVS网桥的名字"><a href="#1-7-列出所有OVS网桥的名字" class="headerlink" title="1.7 列出所有OVS网桥的名字"></a>1.7 列出所有OVS网桥的名字</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl list-br</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl list-br</span><br><span class="line">samlee_br1</span><br><span class="line">samlee_fake_br1</span><br></pre></td></tr></table></figure><h2 id="1-8-查询指定的OVS网桥是否存在-存在返回0-否则返回2-这个命令没有输出-我们通过echo来获得输出"><a href="#1-8-查询指定的OVS网桥是否存在-存在返回0-否则返回2-这个命令没有输出-我们通过echo来获得输出" class="headerlink" title="1.8 查询指定的OVS网桥是否存在,存在返回0,否则返回2(这个命令没有输出,我们通过echo来获得输出)"></a>1.8 查询指定的OVS网桥是否存在,存在返回0,否则返回2(这个命令没有输出,我们通过echo来获得输出)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl br-exists BRIDGE_NAME</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl br-exists samlee_br1 ; echo $?</span><br><span class="line">0</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl br-exists samlee_br2 ; echo $?</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="1-9-查看指定的VLAN在那个OVS网桥上面-这个命令输出VLAN-ID"><a href="#1-9-查看指定的VLAN在那个OVS网桥上面-这个命令输出VLAN-ID" class="headerlink" title="1.9 查看指定的VLAN在那个OVS网桥上面(这个命令输出VLAN ID)"></a>1.9 查看指定的VLAN在那个OVS网桥上面(这个命令输出VLAN ID)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl br-to-vlan BRIDGE_NAME</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl br-to-vlan samlee_fake_br1</span><br><span class="line">200</span><br></pre></td></tr></table></figure><h2 id="1-10-查看指定OVS网桥的父网桥名字-这个命令会输出父网桥的名字"><a href="#1-10-查看指定OVS网桥的父网桥名字-这个命令会输出父网桥的名字" class="headerlink" title="1.10 查看指定OVS网桥的父网桥名字(这个命令会输出父网桥的名字)"></a>1.10 查看指定OVS网桥的父网桥名字(这个命令会输出父网桥的名字)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl br-to-parent BRIDGE_NAME</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl br-to-parent samlee_fake_br1</span><br><span class="line">samlee_br1</span><br></pre></td></tr></table></figure><h2 id="1-11-给指定的OVS网桥设置键值对-这些键值对可以用来给指定OVS网桥作为标示-这个命令没有输出"><a href="#1-11-给指定的OVS网桥设置键值对-这些键值对可以用来给指定OVS网桥作为标示-这个命令没有输出" class="headerlink" title="1.11 给指定的OVS网桥设置键值对; 这些键值对可以用来给指定OVS网桥作为标示(这个命令没有输出)"></a>1.11 给指定的OVS网桥设置键值对; 这些键值对可以用来给指定OVS网桥作为标示(这个命令没有输出)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl BRIDGE_NAME KEY VALUE</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl br-set-external-id samlee_fake_br1 priority 3</span><br></pre></td></tr></table></figure><h2 id="1-12-清除指定OVS网桥的键值对-这个命令没有输出"><a href="#1-12-清除指定OVS网桥的键值对-这个命令没有输出" class="headerlink" title="1.12 清除指定OVS网桥的键值对(这个命令没有输出)"></a>1.12 清除指定OVS网桥的键值对(这个命令没有输出)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl br-set-external-id BRIDGE_NAME KEY</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ovs-vsctl br-set-external-id samlee_fake_br1 priority</span><br></pre></td></tr></table></figure><h2 id="1-13-输出指定OVS网桥的键值对的值-这个命令输出键值"><a href="#1-13-输出指定OVS网桥的键值对的值-这个命令输出键值" class="headerlink" title="1.13 输出指定OVS网桥的键值对的值 (这个命令输出键值)"></a>1.13 输出指定OVS网桥的键值对的值 (这个命令输出键值)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl br-get-external-id BRIDGE_NAME KEY</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl br-get-external-id samlee_fake_br1 priority</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="1-14-输出指定OVS网桥的键值对-这个命令输出键值对"><a href="#1-14-输出指定OVS网桥的键值对-这个命令输出键值对" class="headerlink" title="1.14 输出指定OVS网桥的键值对 (这个命令输出键值对)"></a>1.14 输出指定OVS网桥的键值对 (这个命令输出键值对)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl br-get-external-id BRIDGE_NAME</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl br-get-external-id samlee_fake_br1</span><br><span class="line">priority&#x3D;3</span><br></pre></td></tr></table></figure><h1 id="2-端口操作命令-注意-默认每一个OVS网桥都有一个与之同名的端口-一个聚合端口-bond-被看做一个端口"><a href="#2-端口操作命令-注意-默认每一个OVS网桥都有一个与之同名的端口-一个聚合端口-bond-被看做一个端口" class="headerlink" title="2 端口操作命令(注意:默认每一个OVS网桥都有一个与之同名的端口, 一个聚合端口(bond)被看做一个端口)"></a>2 端口操作命令(注意:默认每一个OVS网桥都有一个与之同名的端口, 一个聚合端口(bond)被看做一个端口)</h1></li></ul><h2 id="2-1-列出指定OVS网桥上面的所有的端口-这个命令将输出端口的名字"><a href="#2-1-列出指定OVS网桥上面的所有的端口-这个命令将输出端口的名字" class="headerlink" title="2.1 列出指定OVS网桥上面的所有的端口(这个命令将输出端口的名字)"></a>2.1 列出指定OVS网桥上面的所有的端口(这个命令将输出端口的名字)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl list-ports BRIDGE_NAME</span><br></pre></td></tr></table></figure><ul><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl list-ports samlee_br1</span><br><span class="line">ens12</span><br></pre></td></tr></table></figure><h2 id="2-2-给指定的OVS网桥添加一个端-这个命令没有输出"><a href="#2-2-给指定的OVS网桥添加一个端-这个命令没有输出" class="headerlink" title="2.2 给指定的OVS网桥添加一个端 (这个命令没有输出)"></a>2.2 给指定的OVS网桥添加一个端 (这个命令没有输出)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl add-port BRIDGE_NAME PORT</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl add-port samlee_br1 ens12</span><br></pre></td></tr></table></figure><h2 id="2-3-给指定的OVS网桥添加一个聚合端口-bond-并且将指定的接口加入聚合端口-这个命令没有输出"><a href="#2-3-给指定的OVS网桥添加一个聚合端口-bond-并且将指定的接口加入聚合端口-这个命令没有输出" class="headerlink" title="2.3 给指定的OVS网桥添加一个聚合端口(bond)并且将指定的接口加入聚合端口(这个命令没有输出)"></a>2.3 给指定的OVS网桥添加一个聚合端口(bond)并且将指定的接口加入聚合端口(这个命令没有输出)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl add-bond BRIDGE_NAME PORT_NAME IFACE...</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl add-bond samlee_br1 sam_bond0 ens11 ens12</span><br></pre></td></tr></table></figure><h2 id="2-4-查看指定聚合端口-bond-的参数-这个命令将输出端口的参数"><a href="#2-4-查看指定聚合端口-bond-的参数-这个命令将输出端口的参数" class="headerlink" title="2.4 查看指定聚合端口(bond)的参数(这个命令将输出端口的参数)"></a>2.4 查看指定聚合端口(bond)的参数(这个命令将输出端口的参数)</h2></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-appctl bond&#x2F;show BOND_PORT</span><br></pre></td></tr></table></figure><ul><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># ovs-appctl bond&#x2F;show sam_bond0</span><br><span class="line"> ---- sam_bond0 ----</span><br><span class="line">bond_mode: active-backup</span><br><span class="line">bond may use recirculation: no, Recirc-ID : -1</span><br><span class="line">bond-hash-basis: 0</span><br><span class="line">updelay: 0 ms</span><br><span class="line">downdelay: 0 ms</span><br><span class="line">lacp_status: off</span><br><span class="line">lacp_fallback_ab: false</span><br><span class="line">active slave mac: 52:54:00:cf:9f:59(ens12)</span><br><span class="line">slave ens11: enabled</span><br><span class="line">  may_enable: true</span><br><span class="line">slave ens12: enabled</span><br><span class="line">  active slave</span><br><span class="line">  may_enable: true</span><br></pre></td></tr></table></figure><h2 id="2-5-从指定的OVS网桥上删除指定的端口-这个命令没有输出"><a href="#2-5-从指定的OVS网桥上删除指定的端口-这个命令没有输出" class="headerlink" title="2.5 从指定的OVS网桥上删除指定的端口(这个命令没有输出)"></a>2.5 从指定的OVS网桥上删除指定的端口(这个命令没有输出)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl del-port [BRIDGE_NAME] PORT</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl del-port samlee_br1 ens12</span><br></pre></td></tr></table></figure><h2 id="2-6-通过指定端口查询它所在的OVS网桥-这个命令将输出网桥的名字"><a href="#2-6-通过指定端口查询它所在的OVS网桥-这个命令将输出网桥的名字" class="headerlink" title="2.6 通过指定端口查询它所在的OVS网桥(这个命令将输出网桥的名字)"></a>2.6 通过指定端口查询它所在的OVS网桥(这个命令将输出网桥的名字)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl port-to-br PORT</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl port-to-br ens12</span><br><span class="line">samlee_br1</span><br></pre></td></tr></table></figure><h2 id="2-7-给端口指定一个接口类型-类型可以是常规类型-内部类型-对接类型和隧道类型-这个命令没有输出"><a href="#2-7-给端口指定一个接口类型-类型可以是常规类型-内部类型-对接类型和隧道类型-这个命令没有输出" class="headerlink" title="2.7 给端口指定一个接口类型, 类型可以是常规类型,内部类型,对接类型和隧道类型(这个命令没有输出)"></a>2.7 给端口指定一个接口类型, 类型可以是常规类型,内部类型,对接类型和隧道类型(这个命令没有输出)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl set Interface PORT_NAME type&#x3D;TYPE_NAME</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl set Interface samlee_br1 type&#x3D;internal</span><br></pre></td></tr></table></figure><h2 id="TBD-2-8-给指定OVS网桥添加一个隧道-隧道的类型可以是gre或者vxlan-比如-给网桥samlee-br1添加一个名字为samlee-tunnel的隧道-并且指定这个隧道的端口-接口名字为samlee-tunnel-并且给接口指定IP地址-其中vxlan的默认端口号是4789-这个命令没有输出"><a href="#TBD-2-8-给指定OVS网桥添加一个隧道-隧道的类型可以是gre或者vxlan-比如-给网桥samlee-br1添加一个名字为samlee-tunnel的隧道-并且指定这个隧道的端口-接口名字为samlee-tunnel-并且给接口指定IP地址-其中vxlan的默认端口号是4789-这个命令没有输出" class="headerlink" title="TBD 2.8 给指定OVS网桥添加一个隧道. 隧道的类型可以是gre或者vxlan(比如,给网桥samlee_br1添加一个名字为samlee_tunnel的隧道.并且指定这个隧道的端口,接口名字为samlee_tunnel. 并且给接口指定IP地址. 其中vxlan的默认端口号是4789). (这个命令没有输出)"></a>TBD 2.8 给指定OVS网桥添加一个隧道. 隧道的类型可以是gre或者vxlan(比如,给网桥samlee_br1添加一个名字为samlee_tunnel的隧道.并且指定这个隧道的端口,接口名字为samlee_tunnel. 并且给接口指定IP地址. 其中vxlan的默认端口号是4789). (这个命令没有输出)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl add-port BRIDGE_NAME PORT_NAME -- set Interface INTERFACE_NAME type&#x3D;TUNNEL_TYPE options:remote_ip&#x3D;IPADDRESS</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl add-port samlee_br1 samlee_tunnel -- set Interface samlee_tunnel type&#x3D;gre options:remote_ip&#x3D;200.200.200.200</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl add-port samlee_br1 samlee_vxlan -- set Interface samlee_vxlan type&#x3D;vxlan options:remote_ip&#x3D;100.100.100.100 options:dst_port&#x3D;4789</span><br></pre></td></tr></table></figure><h1 id="3-接口操作命令-注意-一个聚合端口-bond-包含多个接口"><a href="#3-接口操作命令-注意-一个聚合端口-bond-包含多个接口" class="headerlink" title="3 接口操作命令(注意: 一个聚合端口(bond)包含多个接口):"></a>3 接口操作命令(注意: 一个聚合端口(bond)包含多个接口):</h1></li></ul><h2 id="3-1-列出指定OVS网桥上面的所有接口-这个命令将输出接口的名字"><a href="#3-1-列出指定OVS网桥上面的所有接口-这个命令将输出接口的名字" class="headerlink" title="3.1 列出指定OVS网桥上面的所有接口(这个命令将输出接口的名字)"></a>3.1 列出指定OVS网桥上面的所有接口(这个命令将输出接口的名字)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl list-ifaces BRIDGE_NAME</span><br></pre></td></tr></table></figure><ul><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl list-ifaces samlee_br1</span><br><span class="line">ens12</span><br></pre></td></tr></table></figure><h2 id="3-2-输出指定接口所在的OVS网桥-这个将输出网桥的名字"><a href="#3-2-输出指定接口所在的OVS网桥-这个将输出网桥的名字" class="headerlink" title="3.2 输出指定接口所在的OVS网桥(这个将输出网桥的名字)"></a>3.2 输出指定接口所在的OVS网桥(这个将输出网桥的名字)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl iface-to-br IFACE</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl iface-to-br ens12</span><br><span class="line">samlee_br1</span><br></pre></td></tr></table></figure><h1 id="4-控制OVS网桥的相关命令"><a href="#4-控制OVS网桥的相关命令" class="headerlink" title="4 控制OVS网桥的相关命令."></a>4 控制OVS网桥的相关命令.</h1></li><li>ovs-vswitchd这个后台程序可以实现对OVS网桥,OVS交换机的本地管理. 同时,它也可以支持符合Open-Flow规范的外部Open‐Flow控制器的远程管理. 如果这个外部的Open‐Flow控制器失效,会造成OVS网桥和OVS交换机的丢包. 但是我们可以通过相应的配置来避免此类情况. 我们可以将fail-mode模式设置为standalone或者是secure. 在standalone模式下面,如果Open‐Flow控制器失效,在一个指定的时间间隔内,重试3次都没有收到Open‐Flow控制器的数据包,ovs-vswitchd这个后台程序将会重新接管,并以本地模式运行,此时OVS网桥和OVS交换机将不受影响. 而如果设置为secure模式,在Open‐Flow控制器失效时,ovs-vswitchd这个后台程序将不会重新接管, 而此时OVS网桥和OVS交换机将受到影响</li></ul><h2 id="4-1-查询当前OVS网桥的Open‐Flow控制器-这个命令将输出Open‐Flow控制器的名字"><a href="#4-1-查询当前OVS网桥的Open‐Flow控制器-这个命令将输出Open‐Flow控制器的名字" class="headerlink" title="4.1 查询当前OVS网桥的Open‐Flow控制器(这个命令将输出Open‐Flow控制器的名字)"></a>4.1 查询当前OVS网桥的Open‐Flow控制器(这个命令将输出Open‐Flow控制器的名字)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl get-controller BRIDGE_NAME</span><br></pre></td></tr></table></figure><ul><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl get-controller samlee_br1</span><br><span class="line">tcp:127.0.0.1:6633</span><br></pre></td></tr></table></figure><h2 id="4-2-删除当前OVS网桥的Open‐Flow控制器-这个命令没有输出"><a href="#4-2-删除当前OVS网桥的Open‐Flow控制器-这个命令没有输出" class="headerlink" title="4.2 删除当前OVS网桥的Open‐Flow控制器(这个命令没有输出)"></a>4.2 删除当前OVS网桥的Open‐Flow控制器(这个命令没有输出)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl del-controller BRIDGE_NAME</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl del-controller samlee_br1</span><br></pre></td></tr></table></figure><h2 id="4-3-指定当前OVS网桥的Open‐Flow控制器-这个命令没有输出"><a href="#4-3-指定当前OVS网桥的Open‐Flow控制器-这个命令没有输出" class="headerlink" title="4.3 指定当前OVS网桥的Open‐Flow控制器 (这个命令没有输出)"></a>4.3 指定当前OVS网桥的Open‐Flow控制器 (这个命令没有输出)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl set-controller BRIDGE_NAME TARGET...</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl set-controller samlee_br1 tcp:127.0.0.1:6633</span><br></pre></td></tr></table></figure><h2 id="4-4-查询当前OVS网桥的Open‐Flow控制器的失效模式-这个命令将输出Open‐Flow控制器失效模式的名字"><a href="#4-4-查询当前OVS网桥的Open‐Flow控制器的失效模式-这个命令将输出Open‐Flow控制器失效模式的名字" class="headerlink" title="4.4 查询当前OVS网桥的Open‐Flow控制器的失效模式(这个命令将输出Open‐Flow控制器失效模式的名字)"></a>4.4 查询当前OVS网桥的Open‐Flow控制器的失效模式(这个命令将输出Open‐Flow控制器失效模式的名字)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl  get-fail-mode BRIDGE_NAME</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl get-fail-mode samlee_br1</span><br><span class="line">standalone</span><br></pre></td></tr></table></figure><h2 id="4-5-删除当前OVS网桥的Open‐Flow控制器的失效模式-这个命令没有输出"><a href="#4-5-删除当前OVS网桥的Open‐Flow控制器的失效模式-这个命令没有输出" class="headerlink" title="4.5 删除当前OVS网桥的Open‐Flow控制器的失效模式 (这个命令没有输出)"></a>4.5 删除当前OVS网桥的Open‐Flow控制器的失效模式 (这个命令没有输出)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl del-fail-mode BRIDGE_NAME</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl del-fail-mode samlee_br1</span><br></pre></td></tr></table></figure><h2 id="4-6-设置当前OVS网桥的Open‐Flow控制器的失效模式-这个命令没有输出"><a href="#4-6-设置当前OVS网桥的Open‐Flow控制器的失效模式-这个命令没有输出" class="headerlink" title="4.6 设置当前OVS网桥的Open‐Flow控制器的失效模式 (这个命令没有输出)"></a>4.6 设置当前OVS网桥的Open‐Flow控制器的失效模式 (这个命令没有输出)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl set-fail-mode BRIDGE_NAME FAIL_MODE_NAME</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl set-fail-mode samlee_br1 standalone</span><br></pre></td></tr></table></figure><h1 id="5-OVS交换机的命令"><a href="#5-OVS交换机的命令" class="headerlink" title="5 OVS交换机的命令:"></a>5 OVS交换机的命令:</h1></li></ul><h2 id="5-1-重新启动ovs交换机-这个命令没有输出"><a href="#5-1-重新启动ovs交换机-这个命令没有输出" class="headerlink" title="5.1 重新启动ovs交换机 (这个命令没有输出)"></a>5.1 重新启动ovs交换机 (这个命令没有输出)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl emer-reset</span><br></pre></td></tr></table></figure><ul><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl emer-reset</span><br></pre></td></tr></table></figure><pre><code></code></pre></li></ul><p>好, ovs-vsctl简明用户手册(基于版本openvswitch-2.11.0-4.el7.x86_64)就介绍完毕了. 想要了解更多?<br>也欢迎关注 <code>addos</code> 微信公众号获取更多 :-)</p>]]></content>
      
      
      <categories>
          
          <category> 网络 OVS(原创) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Red Hat Enterprise Linux 8 的新玩意 第2篇 之容器工具 buildah</title>
      <link href="2021/02/16/RHEL8-news-toys-section2-Buildah/"/>
      <url>2021/02/16/RHEL8-news-toys-section2-Buildah/</url>
      
        <content type="html"><![CDATA[<h1 id="Red-Hat-Enterprise-Linux-8-RHEL8-的新玩意-第2篇-之容器工具-buildah"><a href="#Red-Hat-Enterprise-Linux-8-RHEL8-的新玩意-第2篇-之容器工具-buildah" class="headerlink" title="Red Hat Enterprise Linux 8 (RHEL8) 的新玩意 第2篇 之容器工具 buildah"></a>Red Hat Enterprise Linux 8 (RHEL8) 的新玩意 第2篇 之容器工具 buildah</h1><h2 id="buildah"><a href="#buildah" class="headerlink" title="buildah"></a><strong>buildah</strong></h2><p>顾名思义,buildah 是一个用来生成,操作OCI (Open Container Initiative) 容器的工具. 那它都有些什么过人之处,要在RHEL8中引入它?<br>让我们来看一下:</p><ul><li>可以从无到有生成一个容器镜像; 也可以通过一个镜像来生成一个新的容器镜像</li><li>如同 podman 一样,不要daemon 的支持,轻量,快捷. 支持容器,容器镜像的查看</li><li>更安全,灵活.生成容器镜像时,可以移除make, gcc, fnd 等编译,开发,生级的工具,使生成容器镜像更稳固</li><li>直接挂载一个容器镜像,然后对其进行修改; 或者卸载容器的根文件系统</li><li>通过更新一个容器的根文件系统,由它作为基础生成一个新的容器镜像</li><li>对本地容器的重命名, 删除一个容器或者一个容器镜像</li></ul><p>下面我们来通过一些例子看具体看看buildah的特性</p><h2 id="容器的生成"><a href="#容器的生成" class="headerlink" title="容器的生成"></a>容器的生成</h2><h3 id="1-通过-dockerfile-来生成-也叫-from-scratch"><a href="#1-通过-dockerfile-来生成-也叫-from-scratch" class="headerlink" title="1 通过 dockerfile 来生成 (也叫 from scratch )."></a>1 通过 dockerfile 来生成 (也叫 from scratch ).</h3><ul><li><p>编写一个简单的Dockerfile, 生成一个镜像,然后输出 HELLO BUILDAH</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# cat Dockerfile</span><br><span class="line"># This is a test dockerfile</span><br><span class="line">FROM docker.io&#x2F;library&#x2F;fedora:29</span><br><span class="line">ENTRYPOINT [&quot;&#x2F;usr&#x2F;bin&#x2F;hello_buildah.sh&quot;]</span><br><span class="line">RUN echo $&#39;#!&#x2F;bin&#x2F;sh \n echo &quot; *** HELLO BUILDAH *** &quot;&#39;&gt;&#x2F;usr&#x2F;bin&#x2F;hello_buildah.sh &amp;&amp; chmod +x &#x2F;usr&#x2F;bin&#x2F;hello_buildah.sh</span><br></pre></td></tr></table></figure></li><li><p>执行命令生成一个容器镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# buildah build-using-dockerfile -t hello_buildah --format oci .</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# buildah build-using-dockerfile -t hello_buildah --format oci .</span><br><span class="line">STEP 1: FROM docker.io&#x2F;library&#x2F;fedora:29</span><br><span class="line">STEP 2: ENTRYPOINT [&quot;&#x2F;usr&#x2F;bin&#x2F;hello_buildah.sh&quot;]</span><br><span class="line">STEP 3: RUN echo $&#39;#!&#x2F;bin&#x2F;sh \n echo &quot; *** HELLO BUILDAH *** &quot;&#39;&gt;&#x2F;usr&#x2F;bin&#x2F;hello_buildah.sh &amp;&amp; chmod +x &#x2F;usr&#x2F;bin&#x2F;hello_buildah.sh</span><br><span class="line">STEP 4: COMMIT containers-storage:[overlay@&#x2F;var&#x2F;lib&#x2F;containers&#x2F;storage+&#x2F;var&#x2F;run&#x2F;containers&#x2F;storage:overlay.override_kernel_check&#x3D;true]localhost&#x2F;hello_buildah:latest</span><br><span class="line">Getting image source signatures</span><br><span class="line">Skipping fetch of repeat blob sha256:b7ba3be6a0d6426356fc49f538f0f929ed00e51a0a90906e354a345d46e23a8b</span><br><span class="line">Copying blob sha256:01e6ea24a0ce0bbd37204075038d46fb8fc345c2c0bf7b18153d01c361f0b3c7</span><br><span class="line"> 243 B &#x2F; 243 B [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] 0s</span><br><span class="line">Copying config sha256:33fdf51b925a6d02542c94fc3a4bf85a7375e2b039e5592985fdc1ba87498afa</span><br><span class="line"> 1.12 KiB &#x2F; 1.12 KiB [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] 0s</span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br><span class="line">--&gt; 33fdf51b925a6d02542c94fc3a4bf85a7375e2b039e5592985fdc1ba87498afa</span><br></pre></td></tr></table></figure></li><li><p>查看且运行测试我们刚刚生成的容器镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# podman image ls |grep buildah</span><br><span class="line">localhost&#x2F;hello_buildah   latest      33fdf51b925a   13 seconds ago   283 MB</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# podman run hello_buildah</span><br><span class="line"> *** HELLO BUILDAH ***</span><br></pre></td></tr></table></figure><h3 id="2-通过修改运行中的容器来生成一个新的容器镜像"><a href="#2-通过修改运行中的容器来生成一个新的容器镜像" class="headerlink" title="2 通过修改运行中的容器来生成一个新的容器镜像"></a>2 通过修改运行中的容器来生成一个新的容器镜像</h3></li><li><p>先找到我们想要作为基础的镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# buildah images |grep hello_buildah</span><br><span class="line">localhost&#x2F;hello_buildah  latest  33fdf51b925a   May 17, 2019 23:03    283 MB</span><br></pre></td></tr></table></figure></li><li><p>运行这个容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# buildah from hello_buildah</span><br><span class="line">hello_buildah-working-container</span><br></pre></td></tr></table></figure></li><li><p>我们基于这个运行中容器来进行修改.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# buildah containers</span><br><span class="line">CONTAINER ID  BUILDER  IMAGE ID     IMAGE NAME  CONTAINER NAME</span><br><span class="line">6d075a79f753   *  33fdf51b925a localhost&#x2F;hello_buildah:latest  hello_buildah-working-container</span><br></pre></td></tr></table></figure></li><li><p>挂载这个容器的根文件系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# buildah mount 6d075a79f753</span><br><span class="line">&#x2F;var&#x2F;lib&#x2F;containers&#x2F;storage&#x2F;overlay&#x2F;72f5d68a6659af57a198d28733baf8f64d279e29d02095ae2ef3d5c8f2cb9a42&#x2F;merged</span><br></pre></td></tr></table></figure></li><li><p>修改它的内容(使用vi 然后添加 AGAIN)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# vi &#x2F;var&#x2F;lib&#x2F;containers&#x2F;storage&#x2F;overlay&#x2F;72f5d68a6659af57a198d28733baf8f64d279e29d02095ae2ef3d5c8f2cb9a42&#x2F;merged&#x2F;usr&#x2F;bin&#x2F;hello_buildah.sh</span><br></pre></td></tr></table></figure></li><li><p>卸载这个容器的根文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# buildah unmount 6d075a79f753</span><br><span class="line">6d075a79f75303c4a8e58f38ebb2997bd11c8238dda43f1bbc4d3ead97e3db17</span><br></pre></td></tr></table></figure></li><li><p>提交我们刚刚作出的修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# buildah commit 6d075a79f753 hello_buildah:hello_buildah_again</span><br><span class="line">Getting image source signatures</span><br><span class="line">Skipping fetch of repeat blob sha256:b7ba3be6a0d6426356fc49f538f0f929ed00e51a0a90906e354a345d46e23a8b</span><br><span class="line">Skipping fetch of repeat blob sha256:f40cea9cee51b2055a9a2db587680e7ad77236c95af1466c8d61e6a5106f1d7d</span><br><span class="line">Copying blob sha256:31d09f99841c33a71ad2262826d65ca1e5a07cb153fd160519e6aa90a1dd727b</span><br><span class="line"> 219 B &#x2F; 219 B [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] 0s</span><br><span class="line">Copying config sha256:098b5186345f406c24a02cb18aa4bc26a5ab4e677b7cbd75500ce51a781387a1</span><br><span class="line"> 1.23 KiB &#x2F; 1.23 KiB [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] 0s</span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br><span class="line">098b5186345f406c24a02cb18aa4bc26a5ab4e677b7cbd75500ce51a781387a1</span><br></pre></td></tr></table></figure></li><li><p>运行测试验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# podman run localhost&#x2F;hello_buildah:hello_buildah_again</span><br><span class="line"> *** HELLO BUILDAH AGAIN***</span><br></pre></td></tr></table></figure><h3 id="3-通过-buildah-run-生成一个容器镜像-可以实时定制-比如此添加-删除包-作特殊配置等"><a href="#3-通过-buildah-run-生成一个容器镜像-可以实时定制-比如此添加-删除包-作特殊配置等" class="headerlink" title="3 通过 buildah run 生成一个容器镜像 (可以实时定制,比如此添加,删除包,作特殊配置等)."></a>3 通过 buildah run 生成一个容器镜像 (可以实时定制,比如此添加,删除包,作特殊配置等).</h3></li><li><p>启动一个容器镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# buildah from localhost&#x2F;fedora_29</span><br><span class="line">fedora_29-working-container</span><br></pre></td></tr></table></figure></li><li><p>安装gcc开发包(删除包的操作也类似)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# buildah  run fedora_29-working-container yum install gcc -y</span><br><span class="line">Fedora Modular 29 -x86_64                                 68 kB&#x2F;s | 1.5 MB     00:22</span><br><span class="line">Fedora Modular 29 - x86_64 - Updates                      246 kB&#x2F;s | 2.4 MB     00:10</span><br><span class="line">......</span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure></li><li><p>指定要执行的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# buildah config --cmd &quot;gcc -v&quot; fedora_29-working-container</span><br></pre></td></tr></table></figure></li><li><p>提交修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# buildah commit fedora_29-working-container fedora_29_with_gcc</span><br><span class="line">Getting image source signatures</span><br><span class="line">Skipping fetch of repeat blob sha256:b7ba3be6a0d6426356fc49f538f0f929ed00e51a0a90906e354a345d46e23a8b</span><br><span class="line">Copying blob sha256:bd3948f7d2c959300d42d56af86b97cdfedaf4c9b0268213905dbad7977d4dc1</span><br><span class="line"> 214.84 MiB &#x2F; 214.84 MiB [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] 10s</span><br><span class="line">Copying config sha256:789cb4f453c30271211fbc0a77c0cb913ff16746be2914377e5cba39839d855d</span><br><span class="line"> 1.09 KiB &#x2F; 1.09 KiB [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] 0s</span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br><span class="line">789cb4f453c30271211fbc0a77c0cb913ff16746be2914377e5cba39839d855d</span><br></pre></td></tr></table></figure></li><li><p>运行测试验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# podman run fedora_29_with_gcc</span><br><span class="line">Using built-in specs.</span><br><span class="line">COLLECT_GCC&#x3D;gcc</span><br><span class="line">COLLECT_LTO_WRAPPER&#x3D;&#x2F;usr&#x2F;libexec&#x2F;gcc&#x2F;x86_64-redhat-linux&#x2F;8&#x2F;lto-wrapper</span><br><span class="line">OFFLOAD_TARGET_NAMES&#x3D;nvptx-none</span><br><span class="line">OFFLOAD_TARGET_DEFAULT&#x3D;1</span><br><span class="line">Target: x86_64-redhat-linux</span><br><span class="line">Configured with: ..&#x2F;configure --enable-bootstrap --enable-languages&#x3D;c,c++,fortran,objc,obj-c++,ada,go,lto --prefix&#x3D;&#x2F;usr --mandir&#x3D;&#x2F;usr&#x2F;share&#x2F;man --infodir&#x3D;&#x2F;usr&#x2F;share&#x2F;info --with-bugurl&#x3D;http:&#x2F;&#x2F;bugzilla.redhat.com&#x2F;bugzilla --enable-shared --enable-threads&#x3D;posix --enable-checking&#x3D;release --enable-multilib --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-linker-build-id --with-gcc-major-version-only --with-linker-hash-style&#x3D;gnu --enable-plugin --enable-initfini-array --with-isl --enable-libmpx --enable-offload-targets&#x3D;nvptx-none --without-cuda-driver --enable-gnu-indirect-function --enable-cet --with-tune&#x3D;generic --with-arch_32&#x3D;i686 --build&#x3D;x86_64-redhat-linux</span><br><span class="line">Thread model: posix</span><br><span class="line">gcc version 8.3.1 20190223 (Red Hat 8.3.1-2) (GCC)</span><br></pre></td></tr></table></figure><h2 id="查看运行中的容器-查看容器镜像"><a href="#查看运行中的容器-查看容器镜像" class="headerlink" title="查看运行中的容器,查看容器镜像"></a>查看运行中的容器,查看容器镜像</h2></li><li><p>查看运行中的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# buildah containers</span><br><span class="line">CONTAINERIDBUILDERIMAGEIDIMAGENAMECONTAINERNAME</span><br><span class="line">3f71cb46good*a80dad1cgood registry.redhat.io&#x2F;rhel8-beta:latest rhel8-beta-working-container</span><br></pre></td></tr></table></figure></li><li><p>查看容器镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# buildah images</span><br><span class="line">IMAGE NAME           MAGE TAG       IMAGE ID       CREATED AT             SIZE</span><br><span class="line">registry.redhat.io&#x2F;rhel8-beta  latest      a80dad1c1953   Nov 14, 2018 02:11     210 MB</span><br><span class="line">docker.io&#x2F;library&#x2F;fedora  29              d09302f77cfc    Mar 12, 2019 08:20     283 MB</span><br><span class="line">localhost&#x2F;hello_buildah   latest     33fdf51b925a         May 17, 2019 23:03     283 MB</span><br></pre></td></tr></table></figure><h2 id="容器的重命名-删除容器或者删除容器镜像"><a href="#容器的重命名-删除容器或者删除容器镜像" class="headerlink" title="容器的重命名, 删除容器或者删除容器镜像"></a>容器的重命名, 删除容器或者删除容器镜像</h2></li><li><p>容器重新命名命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># buildah rename 6d075a79f753 localhost&#x2F;hello_buildah_again</span><br></pre></td></tr></table></figure></li><li><p>查看容器,找出容器ID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# buildah containers</span><br><span class="line">CONTAINER ID  BUILDER  IMAGE ID     IMAGE NAME  CONTAINER NAME</span><br><span class="line">6d075a79f753  * 33fdf51b925a localhost&#x2F;hello_buildah:latest   localhost&#x2F;hello_buildah_again</span><br></pre></td></tr></table></figure></li><li><p>容器重新命名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# buildah rename 6d075a79f753 localhost&#x2F;hello_buildah_again</span><br></pre></td></tr></table></figure></li><li><p>确认</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# buildah containers</span><br><span class="line">CONTAINER ID  BUILDER  IMAGE ID    IMAGE NAME  CONTAINER NAME</span><br><span class="line">6d075a79f753 * 33fdf51b925a localhost&#x2F;hello_buildah:latest   localhost&#x2F;hello_buildah_again</span><br></pre></td></tr></table></figure></li><li><p>容器删除命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># buildah rm 6d075a79f753</span><br></pre></td></tr></table></figure></li><li><p>查看容器,找出容器ID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# buildah containers</span><br><span class="line">CONTAINER ID  BUILDER  IMAGE ID     IMAGE NAME  CONTAINER NAME</span><br><span class="line">6d075a79f753 * 33fdf51b925a localhost&#x2F;hello_buildah:latest   localhost&#x2F;hello_buildah_again</span><br></pre></td></tr></table></figure></li><li><p>删除容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# buildah rm 6d075a79f753</span><br><span class="line">6d075a79f75303c4a8e58f38ebb2997bd11c8238dda43f1bbc4d3ead97e3db17</span><br></pre></td></tr></table></figure></li><li><p>确认</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# buildah containers</span><br><span class="line">CONTAINER ID  BUILDER  IMAGE ID   IMAGE NAME  CONTAINER NAME</span><br></pre></td></tr></table></figure></li><li><p>容器镜像删除命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># buildah rmi a292528dfb8c</span><br></pre></td></tr></table></figure></li><li><p>查看镜像,找出镜像ID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# buildah images |grep -w hello_podman</span><br><span class="line">localhost&#x2F;rhel8-beta   hello_podman  a292528dfb8c  May 16, 2019 10:43     210 MB</span><br></pre></td></tr></table></figure></li><li><p>删除镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# buildah rmi a292528dfb8c</span><br><span class="line">e010d561555d180015d6c0d30a3f67fa602ea1ae54628d5666235db42f43433a</span><br></pre></td></tr></table></figure></li><li><p>确认</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@rhel8 buildahbuild]# buildah images |grep -w hello_podman</span><br></pre></td></tr></table></figure><p>好, Red Hat Enterprise Linux 8 (RHEL8) 的新玩意 第2篇 之容器工具 buildah. 想要了解更多? 可以参考 man buildah 和 buildah -h<br>想要亲手玩一下新玩具? 请随时去 <a href="https://www.redhat.com/">https://www.redhat.com</a> 下载最新的 REHL 8 咯</p><p>也欢迎关注 <code>addos</code> 微信公众号获取更多的,有意思的新玩具 :-)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux 技巧(原创) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>查阅rpm的依赖关系</title>
      <link href="2021/02/16/rpm-relationship/"/>
      <url>2021/02/16/rpm-relationship/</url>
      
        <content type="html"><![CDATA[<h1 id="查阅rpm的依赖关系"><a href="#查阅rpm的依赖关系" class="headerlink" title="查阅rpm的依赖关系"></a>查阅rpm的依赖关系</h1><h2 id="1-使用RPM命令可以列出目标包所依赖的所有包，如下"><a href="#1-使用RPM命令可以列出目标包所依赖的所有包，如下" class="headerlink" title="1 使用RPM命令可以列出目标包所依赖的所有包，如下"></a>1 使用RPM命令可以列出目标包所依赖的所有包，如下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@sam Packages]# rpm -qR vim-enhanced</span><br><span class="line">&#x2F;bin&#x2F;sh</span><br><span class="line">config(vim-enhanced) &#x3D; 2:8.0.1763-15.el8</span><br><span class="line">libacl.so.1()(64bit)</span><br><span class="line">libacl.so.1(ACL_1.0)(64bit)</span><br><span class="line">libc.so.6()(64bit)</span><br><span class="line">libc.so.6(GLIBC_2.11)(64bit)</span><br><span class="line">libc.so.6(GLIBC_2.14)(64bit)</span><br><span class="line">libc.so.6(GLIBC_2.15)(64bit)</span><br><span class="line">libc.so.6(GLIBC_2.2.5)(64bit)</span><br><span class="line">libc.so.6(GLIBC_2.28)(64bit)</span><br><span class="line">libc.so.6(GLIBC_2.3)(64bit)</span><br><span class="line">libc.so.6(GLIBC_2.3.4)(64bit)</span><br><span class="line">libc.so.6(GLIBC_2.4)(64bit)</span><br><span class="line">libdl.so.2()(64bit)</span><br><span class="line">libdl.so.2(GLIBC_2.2.5)(64bit)</span><br><span class="line">libgpm.so.2()(64bit)</span><br><span class="line">libm.so.6()(64bit)</span><br><span class="line">libm.so.6(GLIBC_2.2.5)(64bit)</span><br><span class="line">libpthread.so.0()(64bit)</span><br><span class="line">libpthread.so.0(GLIBC_2.2.5)(64bit)</span><br><span class="line">libselinux.so.1()(64bit)</span><br><span class="line">libtinfo.so.6()(64bit)</span><br><span class="line">rpmlib(CompressedFileNames) &lt;&#x3D; 3.0.4-1</span><br><span class="line">rpmlib(FileDigests) &lt;&#x3D; 4.6.0-1</span><br><span class="line">rpmlib(PayloadFilesHavePrefix) &lt;&#x3D; 4.0-1</span><br><span class="line">rpmlib(PayloadIsXz) &lt;&#x3D; 5.2-1</span><br><span class="line">rtld(GNU_HASH)</span><br><span class="line">vim-common &#x3D; 2:8.0.1763-15.el8</span><br><span class="line">which</span><br></pre></td></tr></table></figure><h2 id="2-查还没有安装的"><a href="#2-查还没有安装的" class="headerlink" title="2 查还没有安装的"></a>2 查还没有安装的</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@sam Packages]# rpm -qpR &#x2F;tmp&#x2F;iso2&#x2F;Packages&#x2F;vim-common-7.4.160-5.el7.x86_64.rpm</span><br><span class="line">&#x2F;bin&#x2F;sh</span><br><span class="line">config(vim-common) &#x3D; 2:7.4.160-5.el7</span><br><span class="line">libc.so.6()(64bit)</span><br><span class="line">libc.so.6(GLIBC_2.2.5)(64bit)</span><br><span class="line">libc.so.6(GLIBC_2.3)(64bit)</span><br><span class="line">libc.so.6(GLIBC_2.3.4)(64bit)</span><br><span class="line">rpmlib(CompressedFileNames) &lt;&#x3D; 3.0.4-1</span><br><span class="line">rpmlib(FileDigests) &lt;&#x3D; 4.6.0-1</span><br><span class="line">rpmlib(PayloadFilesHavePrefix) &lt;&#x3D; 4.0-1</span><br><span class="line">rtld(GNU_HASH)</span><br><span class="line">vim-filesystem</span><br><span class="line">rpmlib(PayloadIsXz) &lt;&#x3D; 5.2-1</span><br></pre></td></tr></table></figure><h2 id="3-要下载一个-RPM-包而不安装，可以使用叫做’yumdownloader’的工具，下面我们先安装yumdownloader："><a href="#3-要下载一个-RPM-包而不安装，可以使用叫做’yumdownloader’的工具，下面我们先安装yumdownloader：" class="headerlink" title="3 要下载一个 RPM 包而不安装，可以使用叫做’yumdownloader’的工具，下面我们先安装yumdownloader："></a>3 要下载一个 RPM 包而不安装，可以使用叫做’yumdownloader’的工具，下面我们先安装yumdownloader：</h2><p>现在我们来检查一个未安装的RPM包的依赖关系(本例使用 tcpdump)。首先，我们使用yumdownloader把tcpdump的RPM包下载下来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@sam Packages]# yumdownloader --destdir&#x3D;. tcpdump</span><br></pre></td></tr></table></figure><h2 id="4-显示目标包所依赖的包：-为让repoquery正常的工作，需要保持网络的畅通，应为repoquery需要在Yum库中查找信息"><a href="#4-显示目标包所依赖的包：-为让repoquery正常的工作，需要保持网络的畅通，应为repoquery需要在Yum库中查找信息" class="headerlink" title="4 显示目标包所依赖的包：(为让repoquery正常的工作，需要保持网络的畅通，应为repoquery需要在Yum库中查找信息)"></a>4 显示目标包所依赖的包：(为让repoquery正常的工作，需要保持网络的畅通，应为repoquery需要在Yum库中查找信息)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@sam Packages]# repoquery --requires --resolve &lt;package-name&gt;</span><br></pre></td></tr></table></figure><h2 id="5-只需运行rpmreaper就可以看到RPM包的依赖关系："><a href="#5-只需运行rpmreaper就可以看到RPM包的依赖关系：" class="headerlink" title="5 只需运行rpmreaper就可以看到RPM包的依赖关系："></a>5 只需运行rpmreaper就可以看到RPM包的依赖关系：</h2><p>rpmrepater会向用户显示已安装包的列表，你可以使用上/下箭头来滚动屏幕。</p><p>你可以在指定包上使用”r”键来显示其依赖关系，循环在指定包上按下”r”键可以展示出余下的信息。</p><p>“L”标志的意思是说这个包是一片“孤叶”，意思说说没有任何包依赖它。</p><p>“o”标志是说这个包是整个依赖链的中间部分。</p><p>按下”b”键会显示其他依赖于该包的其他包。</p><h2 id="6-还有一个办法是使用rpmdep工具"><a href="#6-还有一个办法是使用rpmdep工具" class="headerlink" title="6 还有一个办法是使用rpmdep工具"></a>6 还有一个办法是使用rpmdep工具</h2><ul><li>rpmdep是一个命令行工具，可以显示已安装包的完整包依赖关系图。该工具会分析RPM包的依赖性，从完整的排完序的拓扑图中摘取部分包的信息，形成列表展示给用户。该工具的输出结果可以直接使用到Dotty（可视化展示工具）中去。</li></ul><p>在Fedora中安装rpmdep和dotty：<br>rpmdep.pl -dot gzip.dot gzip<br>$ dot -Tpng -o output.png gzip.dot</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># yes &quot;N&quot; | yum remove pciutils</span><br><span class="line">&lt;&lt;truncated..&gt;&gt;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"> Package                          Arch              Version                         Repository                               Size</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Removing:</span><br><span class="line"> pciutils                         x86_64            3.5.1-3.el7                     @anaconda&#x2F;7.6                           196 k</span><br><span class="line">Removing for dependencies:</span><br><span class="line"> gnome-boxes                      x86_64            3.28.5-2.el7                    @anaconda&#x2F;7.6                           5.5 M</span><br><span class="line"> libguestfs                       x86_64            1:1.38.2-12.el7_6.2             @rhel-7-server-rpms                     4.3 M</span><br><span class="line"> libguestfs-tools-c               x86_64            1:1.38.2-12.el7_6.2             @rhel-7-server-rpms                      19 M</span><br><span class="line"> libguestfs-winsupport            x86_64            7.2-2.el7                       @rhel-7-server-rpms                     2.2 M</span><br><span class="line"> libibverbs                       x86_64            17.2-3.el7                      @anaconda&#x2F;7.6                           677 k</span><br><span class="line"> librdmacm                        x86_64            17.2-3.el7                      @anaconda&#x2F;7.6                           122 k</span><br><span class="line"> libvirt-daemon-kvm               x86_64            4.5.0-10.el7                    @anaconda&#x2F;7.6                           0.0</span><br><span class="line"> open-vm-tools                    x86_64            10.2.5-3.el7                    @anaconda&#x2F;7.6                           2.1 M</span><br><span class="line"> open-vm-tools-desktop            x86_64            10.2.5-3.el7                    @anaconda&#x2F;7.6                           431 k</span><br><span class="line"> pciutils-devel                   x86_64            3.5.1-3.el7                     @rhel-7-server-optional-rpms             77 k</span><br><span class="line"> qemu-kvm                         x86_64            10:1.5.3-160.el7                @anaconda&#x2F;7.6                           5.8 M</span><br><span class="line"> rdma-core                        x86_64            17.2-3.el7                      @anaconda&#x2F;7.6                           105 k</span><br><span class="line"> virt-p2v-maker                   x86_64            1:1.38.2-12.el7_6.2             @rhel-7-server-rpms                     226 k</span><br><span class="line"> virt-v2v                         x86_64            1:1.38.2-12.el7_6.2             @rhel-7-server-rpms                      18 M</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Remove  1 Package (+14 Dependent packages)</span><br><span class="line"></span><br><span class="line">&lt;&lt;truncated..&gt;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">[root@vm2rhel76 (i_am_vm2_rhel76) ~]# rpm -q --whatrequires  pciutils</span><br><span class="line">rdma-core-17.2-3.el7.x86_64</span><br><span class="line">open-vm-tools-10.2.5-3.el7.x86_64</span><br><span class="line">pciutils-devel-3.5.1-3.el7.x86_64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">L      5.5M ┌*&lt; gnome-boxes               3.28.5-2.el7.x86_64</span><br><span class="line">        4.3M ├*&lt; libguestfs                1.38.2-12.el7_6.2.x86_64</span><br><span class="line">       19.1M ├*&lt; libguestfs-tools-c        1.38.2-12.el7_6.2.x86_64</span><br><span class="line">        2.2M ├*&lt; libguestfs-winsupport     7.2-2.el7.x86_64</span><br><span class="line">        678K ├*&lt; libibverbs                17.2-3.el7.x86_64</span><br><span class="line">        122K ├*&lt; librdmacm                 17.2-3.el7.x86_64</span><br><span class="line">          0K ├*&lt; libvirt-daemon-kvm        4.5.0-10.el7.x86_64</span><br><span class="line">        2.1M ├*&lt; open-vm-tools             10.2.5-3.el7.x86_64</span><br><span class="line"> L      432K ├*&lt; open-vm-tools-desktop     10.2.5-3.el7.x86_64</span><br><span class="line"> L       77K ├*&lt; pciutils-devel            3.5.1-3.el7.x86_64</span><br><span class="line">        5.8M ├*&lt; qemu-kvm                  1.5.3-160.el7.x86_64</span><br><span class="line">        106K ├*&lt; rdma-core                 17.2-3.el7.x86_64</span><br><span class="line"> L      227K ├*&lt; virt-p2v-maker            1.38.2-12.el7_6.2.x86_64</span><br><span class="line"> L     17.5M ├*&lt; virt-v2v                  1.38.2-12.el7_6.2.x86_64</span><br><span class="line">        196K pciutils                  3.5.1-3.el7.x86_64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        2.1M ┌─&lt; open-vm-tools             10.2.5-3.el7.x86_64</span><br><span class="line">  L       77K ├─&lt; pciutils-devel            3.5.1-3.el7.x86_64</span><br><span class="line">         106K ├─&lt; rdma-core                 17.2-3.el7.x86_64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@vm2rhel76 (i_am_vm2_rhel76) ~]# rpmdep.pl -depending pciutils</span><br><span class="line">         pciutils is needed by gnome-boxes,libguestfs,libguestfs-tools-c,libguestfs-winsupport,libibverbs,librdmacm,libvirt-daemon-kvm,open-vm-tools,open-vm-tools-desktop,pciutils-devel,qemu-kvm,rdma-core,virt-p2v-maker,virt-v2v</span><br><span class="line">[root@vm2rhel76 (i_am_vm2_rhel76) ~]#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # rpmdep.pl -depending -dot pciutils.dot pciutils &amp;&amp; dot -Tpng pciutils.dot -o pciutils.png</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@vm2rhel76 (i_am_vm2_rhel76) ~]# repoquery --alldeps --whatrequires pciutils</span><br><span class="line">dpdk-tools-0:2.0.0-8.el7.x86_64</span><br><span class="line">dpdk-tools-0:2.2.0-2.el7.x86_64</span><br><span class="line">dpdk-tools-0:2.2.0-3.el7.x86_64</span><br><span class="line">dpdk-tools-0:16.11.2-4.el7.x86_64</span><br><span class="line">dpdk-tools-0:17.11-7.el7.x86_64</span><br><span class="line">dpdk-tools-0:17.11-11.el7.x86_64</span><br><span class="line">dpdk-tools-0:17.11-13.el7.x86_64</span><br><span class="line">dpdk-tools-0:17.11-15.el7.x86_64</span><br><span class="line">dpdk-tools-0:18.11-2.el7_6.x86_64</span><br><span class="line">dpdk-tools-0:18.11-3.el7_6.x86_64</span><br><span class="line">dpdk-tools-0:18.11-4.el7_6.x86_64</span><br><span class="line">dpdk-tools-0:18.11.2-1.el7.x86_64</span><br><span class="line">facter-0:2.4.1-1.el7.x86_64</span><br><span class="line">hw-probe-0:1.4-12.el7.noarch</span><br><span class="line">insights-client-0:3.0.3-8.el7.noarch</span><br><span class="line">insights-client-0:3.0.3-9.el7_5.noarch</span><br><span class="line">insights-client-0:3.0.6-2.el7_6.noarch</span><br><span class="line">inxi-0:3.0.35-1.el7.noarch</span><br><span class="line">leapp-repository-deps-0:0.7.0-5.el7_6.noarch</span><br><span class="line">leapp-repository-deps-0:0.8.1-2.el7_6.noarch</span><br><span class="line">libguestfs-1:1.32.7-3.el7_3.2.x86_64</span><br><span class="line">libguestfs-1:1.32.7-3.el7_3.3.x86_64</span><br><span class="line">libguestfs-rescue-1:1.36.3-6.el7.x86_64</span><br><span class="line">libguestfs-rescue-1:1.36.3-6.el7_4.2.x86_64</span><br><span class="line">libguestfs-rescue-1:1.36.3-6.el7_4.3.x86_64</span><br><span class="line">libguestfs-rescue-1:1.36.10-6.el7.x86_64</span><br><span class="line">libguestfs-rescue-1:1.36.10-6.el7_5.2.x86_64</span><br><span class="line">libguestfs-rescue-1:1.38.2-12.el7.x86_64</span><br><span class="line">libguestfs-rescue-1:1.38.2-12.el7_6.1.x86_64</span><br><span class="line">libguestfs-rescue-1:1.38.2-12.el7_6.2.x86_64</span><br><span class="line">libguestfs-rescue-1:1.40.2-5.el7.x86_64</span><br><span class="line">libguestfs-rescue-1:1.40.2-5.el7_7.1.x86_64</span><br><span class="line">open-vm-tools-0:10.1.5-3.el7.x86_64</span><br><span class="line">open-vm-tools-0:10.1.10-3.el7.x86_64</span><br><span class="line">open-vm-tools-0:10.1.10-3.el7_5.1.x86_64</span><br><span class="line">open-vm-tools-0:10.2.5-3.el7.x86_64</span><br><span class="line">open-vm-tools-0:10.3.0-2.el7.x86_64</span><br><span class="line">pciutils-devel-0:3.2.1-4.el7.i686</span><br><span class="line">pciutils-devel-0:3.2.1-4.el7.x86_64</span><br><span class="line">pciutils-devel-0:3.5.1-1.el7.i686</span><br><span class="line">pciutils-devel-0:3.5.1-1.el7.x86_64</span><br><span class="line">pciutils-devel-0:3.5.1-2.el7.i686</span><br><span class="line">pciutils-devel-0:3.5.1-2.el7.x86_64</span><br><span class="line">pciutils-devel-0:3.5.1-3.el7.i686</span><br><span class="line">pciutils-devel-0:3.5.1-3.el7.x86_64</span><br><span class="line">qt-settings-0:19-23.4.el7.noarch</span><br><span class="line">qt-settings-0:19-23.5.el7.noarch</span><br><span class="line">qt-settings-0:19-23.7.el7.noarch</span><br><span class="line">qt-settings-0:19-23.8.el7.noarch</span><br><span class="line">qt-settings-0:19-23.9.el7.noarch</span><br><span class="line">rdma-0:7.3_4.7_rc2-5.el7.noarch</span><br><span class="line">rdma-0:7.3_4.7_rc2-6.el7_3.noarch</span><br><span class="line">rdma-core-0:13-7.el7.i686</span><br><span class="line">rdma-core-0:13-7.el7.x86_64</span><br><span class="line">rdma-core-0:15-6.el7.i686</span><br><span class="line">rdma-core-0:15-6.el7.x86_64</span><br><span class="line">rdma-core-0:15-7.el7_5.i686</span><br><span class="line">rdma-core-0:15-7.el7_5.x86_64</span><br><span class="line">rdma-core-0:17.2-3.el7.i686</span><br><span class="line">rdma-core-0:17.2-3.el7.x86_64</span><br><span class="line">rdma-core-0:22.1-3.el7.i686</span><br><span class="line">rdma-core-0:22.1-3.el7.x86_64</span><br><span class="line">redhat-access-insights-0:1.0.4-0.el7_1.noarch</span><br><span class="line">redhat-access-insights-0:1.0.6-0.el7.noarch</span><br><span class="line">redhat-access-insights-0:1.0.11-0.el7.noarch</span><br><span class="line">redhat-access-insights-0:1.0.13-2.el7.noarch</span><br><span class="line">salt-0:2015.5.10-2.el7.noarch</span><br><span class="line">tlp-0:1.1-1.el7.noarch</span><br><span class="line">[root@vm2rhel76 (i_am_vm2_rhel76) ~]#</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux 技巧(原创) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在RHEL8.2 上面快速搭建 etherpad</title>
      <link href="2021/02/16/setup_etherpad_on_rhel/"/>
      <url>2021/02/16/setup_etherpad_on_rhel/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Etherpad-是什么呢？"><a href="#1-Etherpad-是什么呢？" class="headerlink" title="1 Etherpad 是什么呢？"></a>1 Etherpad 是什么呢？</h1><ul><li>官网的介绍<br>Etherpad is a highly customizable open source online editor providing collaborative editing in really real-time.<br><a href="https://etherpad.org/">Etherpad</a></li><li>维基百科<br>Etherpad（曾用名EtherPad）是一个基于Web的在线文档协作工具。多个用户可以通过Etherpad同时编写一个文本文档，并看到所有的参与者的实时编辑。每个参与者的文本使用不同的颜色标记。在软件的侧边栏还有一个聊天框。</li></ul><h1 id="2-在RHEL上面快速搭建-Etherpad"><a href="#2-在RHEL上面快速搭建-Etherpad" class="headerlink" title="2 在RHEL上面快速搭建 Etherpad"></a>2 在RHEL上面快速搭建 Etherpad</h1><h2 id="2-1-先在RHEL上面安装-nodejs"><a href="#2-1-先在RHEL上面安装-nodejs" class="headerlink" title="2.1 先在RHEL上面安装 nodejs"></a>2.1 先在RHEL上面安装 nodejs</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install nodejs -y</span><br></pre></td></tr></table></figure><h2 id="2-2-把etherpad-下载回来（用git最方便了）"><a href="#2-2-把etherpad-下载回来（用git最方便了）" class="headerlink" title="2.2 把etherpad 下载回来（用git最方便了）"></a>2.2 把etherpad 下载回来（用git最方便了）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># git clone git:&#x2F;&#x2F;github.com&#x2F;ether&#x2F;etherpad-lite.git etherpad-lite</span><br></pre></td></tr></table></figure><h2 id="2-3-进入etherpad-lite的目录"><a href="#2-3-进入etherpad-lite的目录" class="headerlink" title="2.3 进入etherpad-lite的目录"></a>2.3 进入etherpad-lite的目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cd etherpad-lite&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure><h2 id="2-4-直接执行-run-sh-我直接使用root执行，所以要额外输入Etherpad-rocks-my-socks"><a href="#2-4-直接执行-run-sh-我直接使用root执行，所以要额外输入Etherpad-rocks-my-socks" class="headerlink" title="2.4 直接执行 run.sh (我直接使用root执行，所以要额外输入Etherpad rocks my socks )"></a>2.4 直接执行 run.sh (我直接使用root执行，所以要额外输入Etherpad rocks my socks )</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># .&#x2F;run.sh</span><br><span class="line">You shouldn&#39;t start Etherpad as root!</span><br><span class="line">Please type &#39;Etherpad rocks my socks&#39; (or restart with the &#39;--root&#39;</span><br><span class="line">argument) if you still want to start it as root:</span><br><span class="line">&gt; Etherpad rocks my socks</span><br><span class="line">Copy the settings template to settings.json...</span><br><span class="line">Ensure that all dependencies are up to date...  If this is the first time you have run Etherpad please be patient.</span><br><span class="line"></span><br><span class="line">&gt; wd@1.12.1 install &#x2F;mnt&#x2F;etherpad-lite&#x2F;src&#x2F;node_modules&#x2F;wd</span><br><span class="line">&gt; node scripts&#x2F;build-browser-scripts</span><br><span class="line"></span><br><span class="line">added 680 packages in 25.323s</span><br><span class="line">Clearing minified cache...</span><br><span class="line">Starting Etherpad...</span><br><span class="line">[2021-02-17 20:36:20.263] [DEBUG] console - Running on Node v10.23.1 (minimum required Node version: 10.17.0)</span><br><span class="line">[2021-02-17 20:36:20.291] [INFO] console - All relative paths will be interpreted relative to the identified Etherpad base dir: &#x2F;mnt&#x2F;etherpad-lite</span><br><span class="line">[2021-02-17 20:36:20.293] [INFO] console - Random string used for versioning assets: 6726ee68</span><br><span class="line">[2021-02-17 20:36:20.295] [DEBUG] AbsolutePaths - Relative path &quot;settings.json&quot; can be rewritten to &quot;&#x2F;mnt&#x2F;etherpad-lite&#x2F;settings.json&quot;</span><br><span class="line">[2021-02-17 20:36:20.296] [DEBUG] AbsolutePaths - Relative path &quot;credentials.json&quot; can be rewritten to &quot;&#x2F;mnt&#x2F;etherpad-lite&#x2F;credentials.json&quot;</span><br><span class="line">[2021-02-17 20:36:20.320] [INFO] console - settings loaded from: &#x2F;mnt&#x2F;etherpad-lite&#x2F;settings.json</span><br><span class="line">[2021-02-17 20:36:20.321] [INFO] console - No credentials file found in &#x2F;mnt&#x2F;etherpad-lite&#x2F;credentials.json. Ignoring.</span><br><span class="line">[2021-02-17 20:36:20.323] [INFO] console - Using skin &quot;colibris&quot; in dir: &#x2F;mnt&#x2F;etherpad-lite&#x2F;src&#x2F;static&#x2F;skins&#x2F;colibris</span><br><span class="line">[2021-02-17 20:36:20.324] [INFO] console - Session key file &quot;&#x2F;mnt&#x2F;etherpad-lite&#x2F;SESSIONKEY.txt&quot; not found. Creating with random contents.</span><br><span class="line">[2021-02-17 20:36:20.325] [WARN] console - DirtyDB is used. This is not recommended for production. File location: &#x2F;mnt&#x2F;etherpad-lite&#x2F;var&#x2F;dirty.db</span><br><span class="line">[2021-02-17 20:36:20.949] [INFO] server - Starting Etherpad...</span><br><span class="line">[2021-02-17 20:36:21.155] [INFO] runNpm - Executing command: npm ls --long --json --depth&#x3D;0</span><br><span class="line">[2021-02-17 20:36:21.587] [INFO] runNpm - npm --version: 6.14.11</span><br><span class="line">[2021-02-17 20:36:25.547] [INFO] runNpm - Successfully ran command: npm ls --long --json --depth&#x3D;0</span><br><span class="line">[2021-02-17 20:36:26.208] [INFO] APIHandler - Api key file &quot;&#x2F;mnt&#x2F;etherpad-lite&#x2F;APIKEY.txt&quot; not found.  Creating with random contents.</span><br><span class="line">[2021-02-17 20:36:26.403] [INFO] server - Installed plugins:</span><br><span class="line">[2021-02-17 20:36:26.406] [INFO] console - Report bugs at https:&#x2F;&#x2F;github.com&#x2F;ether&#x2F;etherpad-lite&#x2F;issues</span><br><span class="line">[2021-02-17 20:36:26.407] [INFO] console - Your Etherpad version is 1.8.8 (8ef0860)</span><br><span class="line">[2021-02-17 20:36:29.553] [INFO] http - HTTP server listening for connections</span><br><span class="line">[2021-02-17 20:36:29.554] [INFO] console - You can access your Etherpad instance at http:&#x2F;&#x2F;0.0.0.0:9001&#x2F;</span><br><span class="line">[2021-02-17 20:36:29.554] [WARN] console - Admin username and password not set in settings.json. To access admin please uncomment and edit &quot;users&quot; in settings.json</span><br><span class="line">[2021-02-17 20:36:29.554] [WARN] console - Etherpad is running in Development mode. This mode is slower for users and less secure than production mode. You should set the NODE_ENV environment variable to production by using: export NODE_ENV&#x3D;production</span><br><span class="line">[2021-02-17 20:36:29.555] [INFO] server - Etherpad is running</span><br><span class="line">......</span><br><span class="line">[2021-02-17 20:37:52.738] [INFO] Minify - Compress JS file js&#x2F;ace.js.</span><br><span class="line">[2021-02-17 20:37:53.298] [INFO] access - [CREATE] pad:ossTechPad socket:-uGaEi5dyAJi7iptAAAA IP:150.150.150.1 authorID:a.R9kht2nlTzuKSrsf</span><br><span class="line">......</span><br><span class="line">[2021-02-17 20:38:04.554] [INFO] Minify - Compress JS file js&#x2F;ace.js.</span><br></pre></td></tr></table></figure><h2 id="2-5-在可以连接到这个主机的机器上"><a href="#2-5-在可以连接到这个主机的机器上" class="headerlink" title="2.5 在可以连接到这个主机的机器上"></a>2.5 在可以连接到这个主机的机器上</h2><ul><li>打开比如 “<a href="http://150.150.150.30:9001/%E2%80%9D%EF%BC%8C%E7%84%B6%E5%90%8E%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E4%BA%86">http://150.150.150.30:9001/”，然后就可以使用了</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux 技巧(原创) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>当执行 echo &quot;X&quot; &gt; /proc/sysrq-trigger 的时候, 这个X究竟有些什么值可以输入?</title>
      <link href="2021/02/16/sysrq-trigger-operation/"/>
      <url>2021/02/16/sysrq-trigger-operation/</url>
      
        <content type="html"><![CDATA[<h1 id="1-当执行-echo-“X”-gt-proc-sysrq-trigger-的时候-这个X究竟有些什么值可以输入"><a href="#1-当执行-echo-“X”-gt-proc-sysrq-trigger-的时候-这个X究竟有些什么值可以输入" class="headerlink" title="1 当执行 echo “X” &gt; /proc/sysrq-trigger 的时候, 这个X究竟有些什么值可以输入?"></a>1 当执行 echo “X” &gt; /proc/sysrq-trigger 的时候, 这个X究竟有些什么值可以输入?</h1><h2 id="1-2-具体定义如下-每一个操作码都对应一个处理函数-“NULL”-就表示发了也白搭-空的-没人干活呀-虽然没人干活-发个提醒还是需要的-所以在message里面能看到类似help的信息"><a href="#1-2-具体定义如下-每一个操作码都对应一个处理函数-“NULL”-就表示发了也白搭-空的-没人干活呀-虽然没人干活-发个提醒还是需要的-所以在message里面能看到类似help的信息" class="headerlink" title="1.2 具体定义如下,每一个操作码都对应一个处理函数, “NULL” 就表示发了也白搭:-), 空的,没人干活呀.虽然没人干活,发个提醒还是需要的,所以在message里面能看到类似help的信息)."></a>1.2 具体定义如下,每一个操作码都对应一个处理函数, “NULL” 就表示发了也白搭:-), 空的,没人干活呀.虽然没人干活,发个提醒还是需要的,所以在message里面能看到类似help的信息).</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">static struct sysrq_key_op *sysrq_key_table[36] &#x3D; &#123;</span><br><span class="line">&amp;sysrq_loglevel_op,&#x2F;* 0 顾名思义就是设置console的log级别了 其实就是console_loglevel &#x3D; key - &#39;0&#39;;*&#x2F;</span><br><span class="line">&amp;sysrq_loglevel_op,&#x2F;* 1 *&#x2F;</span><br><span class="line">&amp;sysrq_loglevel_op,&#x2F;* 2 *&#x2F;</span><br><span class="line">&amp;sysrq_loglevel_op,&#x2F;* 3 *&#x2F;</span><br><span class="line">&amp;sysrq_loglevel_op,&#x2F;* 4 *&#x2F;</span><br><span class="line">&amp;sysrq_loglevel_op,&#x2F;* 5 *&#x2F;</span><br><span class="line">&amp;sysrq_loglevel_op,&#x2F;* 6 *&#x2F;</span><br><span class="line">&amp;sysrq_loglevel_op,&#x2F;* 7 *&#x2F;</span><br><span class="line">&amp;sysrq_loglevel_op,&#x2F;* 8 *&#x2F;</span><br><span class="line">&amp;sysrq_loglevel_op,&#x2F;* 9 *&#x2F;</span><br><span class="line">NULL,&#x2F;* a 不干活,预留的给sparc*&#x2F;</span><br><span class="line">&amp;sysrq_reboot_op,&#x2F;* b 就是reboot咯*&#x2F;</span><br><span class="line">&amp;sysrq_crash_op,&#x2F;* c 产生一个crash, 是对一个空指针操作来trigger*&#x2F;</span><br><span class="line">&amp;sysrq_showlocks_op,&#x2F;* d 根据是否有CONFIG_LOCKDEP定义输出locks*&#x2F;</span><br><span class="line">&amp;sysrq_term_op,&#x2F;* e 这个厉害了,发SIGTERM 给所有的用户进程.*&#x2F;</span><br><span class="line">&amp;sysrq_moom_op,&#x2F;* f 调用schedule_work来产生一个OOM execution, 最终是调用了out_of_memory函数,这里面就有点复杂了,下篇再总结这个*&#x2F;</span><br><span class="line">NULL,&#x2F;* g 预留给kernel的debug用*&#x2F;</span><br><span class="line">NULL,&#x2F;* h 预留给帮助用 *&#x2F;</span><br><span class="line">&amp;sysrq_kill_op,&#x2F;* i 这个更直接,发SIGKILL给所有的用户进程*&#x2F;</span><br><span class="line">&amp;sysrq_thaw_op,&#x2F;* j 通过SysRq来紧急解冻所有的文件系统,前提是有CONFIG_BLOCK内核配置 *&#x2F;</span><br><span class="line">&amp;sysrq_SAK_op,&#x2F;* k 如果有CONFIG_VT 这个调用schedule_work 来操作SAK_work 就是Secure Attention Key 了吧*&#x2F;</span><br><span class="line">&amp;sysrq_showallcpus_op,&#x2F;* l 如果定义了CONFIG_SMP, 就输出所有的CPU的back trace *&#x2F;</span><br><span class="line">&amp;sysrq_showmem_op,&#x2F;* m 输出内存的信息*&#x2F;</span><br><span class="line">&amp;sysrq_unrt_op,&#x2F;* n 这个就给所有RT Tasks 设置NICE*&#x2F;</span><br><span class="line">NULL,&#x2F;* o 预留,代表off吧.*&#x2F;</span><br><span class="line">&amp;sysrq_showregs_op,&#x2F;* p 输出寄存器的值*&#x2F;</span><br><span class="line">&amp;sysrq_show_timers_op,&#x2F;* q 输出时钟事件设备以及等待中的hrtimers*&#x2F;</span><br><span class="line">&amp;sysrq_unraw_op,&#x2F;* r 将键盘模式设置为系统默认值*&#x2F;</span><br><span class="line">&amp;sysrq_sync_op,&#x2F;* s 做一个临时紧急同步用*&#x2F;</span><br><span class="line">&amp;sysrq_showstate_op,&#x2F;* t 调用show_state和show_workqueue_state输出当前系统状态*&#x2F;</span><br><span class="line">&amp;sysrq_mountro_op,&#x2F;* u 调用emergency_remount做重新紧急remount*&#x2F;</span><br><span class="line">NULL,&#x2F;* v 预留给frame buffer*&#x2F;</span><br><span class="line">&amp;sysrq_showstate_blocked_op,&#x2F;* w 输出blocked 的信息*&#x2F;</span><br><span class="line">NULL,&#x2F;* x 给不同的体系的dump 预留*&#x2F;</span><br><span class="line">NULL,&#x2F;* y 给sparc64预留*&#x2F;</span><br><span class="line">&amp;sysrq_ftrace_dump_op,&#x2F;* z 把ftrace中存的信息输出.*&#x2F;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="2-主要的执行过程"><a href="#2-主要的执行过程" class="headerlink" title="2 主要的执行过程."></a>2 主要的执行过程.</h1><h2 id="2-1-write-sysrq-trigger-调用-handle-sysrq"><a href="#2-1-write-sysrq-trigger-调用-handle-sysrq" class="headerlink" title="2.1 write_sysrq_trigger 调用 __handle_sysrq"></a>2.1 write_sysrq_trigger 调用 __handle_sysrq</h2><h2 id="2-2-handle-sysrq-调用-sysrq-get-key-op-key-获取操作码"><a href="#2-2-handle-sysrq-调用-sysrq-get-key-op-key-获取操作码" class="headerlink" title="2.2 __handle_sysrq 调用 __sysrq_get_key_op(key) 获取操作码."></a>2.2 __handle_sysrq 调用 __sysrq_get_key_op(key) 获取操作码.</h2><h2 id="2-3-sysrq-get-key-op-key-通过两个for循环-找到sysrq-key-table对应操作码"><a href="#2-3-sysrq-get-key-op-key-通过两个for循环-找到sysrq-key-table对应操作码" class="headerlink" title="2.3 __sysrq_get_key_op(key)通过两个for循环, 找到sysrq_key_table对应操作码"></a>2.3 __sysrq_get_key_op(key)通过两个for循环, 找到sysrq_key_table对应操作码</h2><h2 id="2-4-而操作码又有对应的处理函数-然后调用它获取返回值-到此-整个过程也就完成了"><a href="#2-4-而操作码又有对应的处理函数-然后调用它获取返回值-到此-整个过程也就完成了" class="headerlink" title="2.4 而操作码又有对应的处理函数,然后调用它获取返回值.到此,整个过程也就完成了."></a>2.4 而操作码又有对应的处理函数,然后调用它获取返回值.到此,整个过程也就完成了.</h2>]]></content>
      
      
      <categories>
          
          <category> Linux 技巧(原创) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 实用小代码，基于stat 来显示文件的metadata</title>
      <link href="2021/02/15/simple-linux-code-to-show-the-file-metadata/"/>
      <url>2021/02/15/simple-linux-code-to-show-the-file-metadata/</url>
      
        <content type="html"><![CDATA[<h1 id="Simple-Linux-code-based-on-stat-to-display-file-metadata"><a href="#Simple-Linux-code-based-on-stat-to-display-file-metadata" class="headerlink" title="Simple Linux code based on stat to display file metadata"></a>Simple Linux code based on <code>stat</code> to display file metadata</h1><p>If you want to know the metadata of a file in Linux system, you can check the detail below. 如果你想了解关于Linux 文件的元数据信息,欢迎继续阅读此文.</p><h2 id="1-There-is-a-system-call-named-stat-which-can-retrive-the-metadata-of-a-file-so-we-can-write-a-simple-code-to-use-it-to-get-the-file-metatda-我们可以通过写一段简单的代码来使用系统调用-stat-然后执行它来获取到文件的元数据信息"><a href="#1-There-is-a-system-call-named-stat-which-can-retrive-the-metadata-of-a-file-so-we-can-write-a-simple-code-to-use-it-to-get-the-file-metatda-我们可以通过写一段简单的代码来使用系统调用-stat-然后执行它来获取到文件的元数据信息" class="headerlink" title="1 There is a system call named stat which can retrive the metadata of a file; so we can write a simple code to use it to get the file metatda. 我们可以通过写一段简单的代码来使用系统调用 stat, 然后执行它来获取到文件的元数据信息."></a>1 There is a system call named <code>stat</code> which can retrive the metadata of a file; so we can write a simple code to use it to get the file metatda. 我们可以通过写一段简单的代码来使用系统调用 <code>stat</code>, 然后执行它来获取到文件的元数据信息.</h2><h3 id="1-1-let’-check-the-struct-stat-first-so-that-we-can-know-what-info-we-can-retrive-by-this-system-call-首先看一下用到结构体-这样就可以知道可以从中得到一些什么元数据信息"><a href="#1-1-let’-check-the-struct-stat-first-so-that-we-can-know-what-info-we-can-retrive-by-this-system-call-首先看一下用到结构体-这样就可以知道可以从中得到一些什么元数据信息" class="headerlink" title="1.1 let’ check the struct stat first; so that we can know what info we can retrive by this system call. 首先看一下用到结构体,这样就可以知道可以从中得到一些什么元数据信息."></a>1.1 let’ check the <code>struct stat</code> first; so that we can know what info we can retrive by this system call. 首先看一下用到结构体,这样就可以知道可以从中得到一些什么元数据信息.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">struct stat &#123;</span><br><span class="line">    dev_t     st_dev;         &#x2F;* ID of device containing file   - 存储此文件的设备ID, 随后可以通过major,minor 解析*&#x2F;</span><br><span class="line">    ino_t     st_ino;         &#x2F;* inode number                   - inode 号码, 可以理解为索引节点*&#x2F;</span><br><span class="line">    mode_t    st_mode;        &#x2F;* file type and mode(detail below) - 文件的类型以及读,写,执行权限(下面st_mode有详细的描述)*&#x2F;</span><br><span class="line">    nlink_t   st_nlink;       &#x2F;* number of hard links           - 文件对应的硬链接数 *&#x2F;</span><br><span class="line">    uid_t     st_uid;         &#x2F;* user ID of owner               - 文件的用户ID*&#x2F;</span><br><span class="line">    gid_t     st_gid;         &#x2F;* group ID of owner              - 文件的组ID *&#x2F;</span><br><span class="line">    dev_t     st_rdev;        &#x2F;* device ID (if special file)    - 文件的设备ID, 针对一些特殊的文件(设备文件),比如块,字符等设备*&#x2F;</span><br><span class="line">    off_t     st_size;        &#x2F;* total size, in bytes           - 文件的大小,以byte为单位*&#x2F;</span><br><span class="line">    blksize_t st_blksize;     &#x2F;* blocksize for filesystem I&#x2F;O   - 文件在文件系统所占块大小*&#x2F;</span><br><span class="line">    blkcnt_t  st_blocks;      &#x2F;* number of 512B blocks allocated - 分配的磁盘块,已一个block为512Bytes*&#x2F;</span><br><span class="line">    struct timespec st_atim;  &#x2F;* time of last access             - 文件最近的访问时间 *&#x2F;</span><br><span class="line">    struct timespec st_mtim;  &#x2F;* time of last modification       - 文件最近的修改时间*&#x2F;</span><br><span class="line">    struct timespec st_ctim;  &#x2F;* time of last status change      - 文件最近的状态变化时间*&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-The-file-type-and-mode-st-mode-total-16-bit-the-lowest-12bit-represent-file-priviledge-and-the-highest-4-bit-represent-file-type-文件类型和权限存储在-st-mode-字段中-其中的低12位储存了对应的文件权限-而高4位则储存了对应文件类型"><a href="#1-2-The-file-type-and-mode-st-mode-total-16-bit-the-lowest-12bit-represent-file-priviledge-and-the-highest-4-bit-represent-file-type-文件类型和权限存储在-st-mode-字段中-其中的低12位储存了对应的文件权限-而高4位则储存了对应文件类型" class="headerlink" title="1.2 The file type and mode (st_mode); total 16 bit, the lowest 12bit represent file priviledge and the highest 4 bit represent file type. 文件类型和权限存储在 st_mode 字段中, 其中的低12位储存了对应的文件权限,而高4位则储存了对应文件类型."></a>1.2 The file type and mode (st_mode); total 16 bit, the lowest 12bit represent file priviledge and the highest 4 bit represent file type. 文件类型和权限存储在 <code>st_mode</code> 字段中, 其中的低12位储存了对应的文件权限,而高4位则储存了对应文件类型.</h3><h4 id="1-2-1-st-mode-file-type-文件类型"><a href="#1-2-1-st-mode-file-type-文件类型" class="headerlink" title="1.2.1 st_mode file type  文件类型"></a>1.2.1 <code>st_mode</code> file type  文件类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">S_IFSOCK      socket                               套接字文件</span><br><span class="line">S_IFLNK       symbolic link                        字符链接文件</span><br><span class="line">S_IFREG       regular file                         常规文件</span><br><span class="line">S_IFBLK       block device                         块设备文件</span><br><span class="line">S_IFDIR       directory                            文件夹</span><br><span class="line">S_IFCHR       character device                     字符文件</span><br><span class="line">S_IFIFO       FIFO                                 FIFO文件</span><br></pre></td></tr></table></figure><h4 id="1-2-1-st-mode-file-mode-文件权限"><a href="#1-2-1-st-mode-file-mode-文件权限" class="headerlink" title="1.2.1 st_mode file mode  文件权限"></a>1.2.1 <code>st_mode</code> file mode  文件权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Owner (also known as user): The permissions granted to the owner of the file. 这个文件的用户的对应权限.</span><br><span class="line"></span><br><span class="line">Group: The permissions granted to users who are members of the file’s group. 这个文件的用户组的对应权限</span><br><span class="line"></span><br><span class="line">Other: The permissions granted to everyone else. 这个文件的其他用户的对应权限</span><br><span class="line"></span><br><span class="line">Read: The contents of the file may be read. 读权限, 表明文件可以被对应的用户读取.</span><br><span class="line"></span><br><span class="line">Write: The contents of the file may be changed.写权限,表明文件可以被对应的用户写入.</span><br><span class="line"></span><br><span class="line">Execute: The file may be executed. In order to execute a script file, both read and execute permissions are required. 执行权限, 表明文件可以被对应的用户执行.如果对于要执行脚本文件来说,读和执行权限是必须的.</span><br></pre></td></tr></table></figure><h1 id="2-Let’s-have-a-quick-check-against-file-metadata-which-displayed-by-demo-app-快速的通过我们写的例子应用来看一下文件的元数据"><a href="#2-Let’s-have-a-quick-check-against-file-metadata-which-displayed-by-demo-app-快速的通过我们写的例子应用来看一下文件的元数据" class="headerlink" title="2 Let’s have a quick check against file metadata which displayed by demo app, 快速的通过我们写的例子应用来看一下文件的元数据."></a>2 Let’s have a quick check against file metadata which displayed by demo app, 快速的通过我们写的例子应用来看一下文件的元数据.</h1><h2 id="2-1-display-the-character-device-file-获取字符设备文件的信息"><a href="#2-1-display-the-character-device-file-获取字符设备文件的信息" class="headerlink" title="2.1 display the character device file 获取字符设备文件的信息."></a>2.1 display the character device file 获取字符设备文件的信息.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@sam samapplications]# filemetadata &#x2F;dev&#x2F;ttyS0</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; File Metadata &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Directory:&#x2F;dev&#x2F;ttyS0</span><br><span class="line">File type:Character device</span><br><span class="line">Device containing:major&#x3D;0   minor&#x3D;5</span><br><span class="line">inode number:1146</span><br><span class="line">Mode:rw-rw----</span><br><span class="line">Device number (st_rdev):major&#x3D;4; minor&#x3D;64</span><br><span class="line">Number of (hard) links:1</span><br><span class="line">Ownership:UID&#x3D;0   GID&#x3D;18</span><br><span class="line">File size:0 bytes : 0 KB</span><br><span class="line">I&#x2F;O block size:4096 bytes</span><br><span class="line">Number of (512B) blocks allocated:0</span><br><span class="line">Last file access:Sat Jun 15 19:45:34 2019</span><br><span class="line">Last file modification:Sat Jun 15 19:45:34 2019</span><br><span class="line">Last status change:Sat Jun 15 19:45:34 2019</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h2 id="2-2-display-block-device-file-获取块设备文件的信息"><a href="#2-2-display-block-device-file-获取块设备文件的信息" class="headerlink" title="2.2 display block device file; 获取块设备文件的信息"></a>2.2 display block device file; 获取块设备文件的信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@sam samapplications]# filemetadata &#x2F;dev&#x2F;nvme0n1p2</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; File Metadata &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Directory:&#x2F;dev&#x2F;nvme0n1p2</span><br><span class="line">File type:Block device</span><br><span class="line">Device containing:major&#x3D;0   minor&#x3D;5</span><br><span class="line">inode number:15059</span><br><span class="line">Mode:rw-rw----</span><br><span class="line">Device number (st_rdev):major&#x3D;259; minor&#x3D;2</span><br><span class="line">Number of (hard) links:1</span><br><span class="line">Ownership:UID&#x3D;0   GID&#x3D;6</span><br><span class="line">File size:0 bytes : 0 KB</span><br><span class="line">I&#x2F;O block size:4096 bytes</span><br><span class="line">Number of (512B) blocks allocated:0</span><br><span class="line">Last file access:Sat Jun 15 19:45:34 2019</span><br><span class="line">Last file modification:Sat Jun 15 19:45:34 2019</span><br><span class="line">Last status change:Sat Jun 15 19:45:34 2019</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h2 id="2-3-display-regular-file-获取常规文件的信息"><a href="#2-3-display-regular-file-获取常规文件的信息" class="headerlink" title="2.3 display regular file; 获取常规文件的信息"></a>2.3 display regular file; 获取常规文件的信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@sam samapplications]# filemetadata &#x2F;tmp&#x2F;rhel-server-7.3-x86_64-dvd.iso</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; File Metadata &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Directory:&#x2F;tmp&#x2F;rhel-server-7.3-x86_64-dvd.iso</span><br><span class="line">File type:Regular file</span><br><span class="line">Device containing:major&#x3D;259   minor&#x3D;2</span><br><span class="line">inode number:1137863993</span><br><span class="line">Mode:rw-r--r--</span><br><span class="line">Number of (hard) links:1</span><br><span class="line">Ownership:UID&#x3D;107   GID&#x3D;107</span><br><span class="line">File size:3793747968 bytes : 3704832 KB</span><br><span class="line">I&#x2F;O block size:4096 bytes</span><br><span class="line">Number of (512B) blocks allocated:7409672</span><br><span class="line">Last file access:Sat Jun 15 19:45:50 2019</span><br><span class="line">Last file modification:Sun Apr 28 09:11:51 2019</span><br><span class="line">Last status change:Sat Jun  1 21:35:50 2019</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">[root@sam samapplications]# filemetadata &#x2F;tmp&#x2F;metadata-link</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; File Metadata &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Directory:&#x2F;tmp&#x2F;metadata-link</span><br><span class="line">File type:Symbolic (soft) link</span><br><span class="line">Device containing:major&#x3D;0   minor&#x3D;40</span><br><span class="line">inode number:287970</span><br><span class="line">Mode:rwxrwxrwx</span><br><span class="line">Number of (hard) links:1</span><br><span class="line">Ownership:UID&#x3D;0   GID&#x3D;0</span><br><span class="line">File size:8 bytes : 0 KB</span><br><span class="line">I&#x2F;O block size:4096 bytes</span><br><span class="line">Number of (512B) blocks allocated:0</span><br><span class="line">Last file access:Sat Jun 15 21:58:29 2019</span><br><span class="line">Last file modification:Sat Jun 15 21:58:24 2019</span><br><span class="line">Last status change:Sat Jun 15 21:58:24 2019</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h1 id="3-Source-code-of-filemetadata-我们可以通过源代码看它的具体实现"><a href="#3-Source-code-of-filemetadata-我们可以通过源代码看它的具体实现" class="headerlink" title="3 Source code of filemetadata 我们可以通过源代码看它的具体实现."></a>3 Source code of <code>filemetadata</code> 我们可以通过源代码看它的具体实现.</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line"> * Draft by Sam at 06-16-2019</span><br><span class="line"> * show the metadata of a file</span><br><span class="line"> * *&#x2F;</span><br><span class="line">#include &lt;sys&#x2F;stat.h&gt;</span><br><span class="line">#include &lt;time.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;* display the file permision</span><br><span class="line"> * mode_t(file type and mode) of statBuffer as a parameter</span><br><span class="line"> * *&#x2F;</span><br><span class="line">void disFilePerm(mode_t filePerm)&#123;</span><br><span class="line">char userR &#x3D; 0, userW &#x3D; 0, userX &#x3D; 0;</span><br><span class="line">char groupR &#x3D; 0, groupW &#x3D; 0, groupX &#x3D; 0;</span><br><span class="line">char otherR &#x3D; 0, otherW &#x3D; 0, otherX &#x3D; 0;</span><br><span class="line"></span><br><span class="line">userR &#x3D; (filePerm &amp; S_IRUSR) ? &#39;r&#39; : &#39;-&#39;;</span><br><span class="line">userW &#x3D; (filePerm &amp; S_IWUSR) ? &#39;w&#39; : &#39;-&#39;;</span><br><span class="line">userX &#x3D; (filePerm &amp; S_IXUSR) ? &#39;x&#39; : &#39;-&#39;;</span><br><span class="line"></span><br><span class="line">groupR &#x3D; (filePerm &amp; S_IRGRP) ? &#39;r&#39; : &#39;-&#39;;</span><br><span class="line">groupW &#x3D; (filePerm &amp; S_IWGRP) ? &#39;w&#39; : &#39;-&#39;;</span><br><span class="line">groupX &#x3D; (filePerm &amp; S_IXGRP) ? &#39;x&#39; : &#39;-&#39;;</span><br><span class="line"></span><br><span class="line">otherR &#x3D; (filePerm &amp; S_IROTH) ? &#39;r&#39; : &#39;-&#39;;</span><br><span class="line">otherW &#x3D; (filePerm &amp; S_IWOTH) ? &#39;w&#39; : &#39;-&#39;;</span><br><span class="line">otherX &#x3D; (filePerm &amp; S_IXOTH) ? &#39;x&#39; : &#39;-&#39;;</span><br><span class="line"></span><br><span class="line">printf(&quot;Mode:\t\t\t\t\t%c%c%c%c%c%c%c%c%c\n&quot;,userR,userW,userX,groupR,groupW,groupX,otherR,otherW,otherX);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * display the stat buffer</span><br><span class="line"> * the pointer of statBuffer as parameter</span><br><span class="line"> * *&#x2F;</span><br><span class="line">void displayStatInfo(struct stat *statBuffer, const char *filepath)&#123;</span><br><span class="line">printf(&quot;\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; File Metadata &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n\n&quot;);</span><br><span class="line">&#x2F;* print the file type *&#x2F;</span><br><span class="line">printf(&quot;Directory:\t\t\t\t%s\n&quot;,filepath);</span><br><span class="line">    printf(&quot;File type:\t\t\t\t&quot;);</span><br><span class="line">    switch (statBuffer-&gt;st_mode &amp; S_IFMT) &#123;</span><br><span class="line">    case S_IFREG:  printf(&quot;Regular file\n&quot;);            break;</span><br><span class="line">    case S_IFDIR:  printf(&quot;Directory\n&quot;);               break;</span><br><span class="line">    case S_IFCHR:  printf(&quot;Character device\n&quot;);        break;</span><br><span class="line">    case S_IFBLK:  printf(&quot;Block device\n&quot;);            break;</span><br><span class="line">    case S_IFLNK:  printf(&quot;Symbolic (soft) link\n&quot;);    break;</span><br><span class="line">    case S_IFIFO:  printf(&quot;FIFO or pipe\n&quot;);            break;</span><br><span class="line">    case S_IFSOCK: printf(&quot;Socket\n&quot;);                  break;</span><br><span class="line">    default:       printf(&quot;Unknown file type\n&quot;);       break;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;Device containing:\t\t\tmajor&#x3D;%ld   minor&#x3D;%ld\n&quot;,(long) major(statBuffer-&gt;st_dev), (long) minor(statBuffer-&gt;st_dev));</span><br><span class="line">    printf(&quot;inode number:\t\t\t\t%ld\n&quot;, (long) statBuffer-&gt;st_ino);</span><br><span class="line">    disFilePerm(statBuffer-&gt;st_mode);</span><br><span class="line">    if (S_ISCHR(statBuffer-&gt;st_mode) || S_ISBLK(statBuffer-&gt;st_mode))&#123;</span><br><span class="line">printf(&quot;Device number (st_rdev):\t\tmajor&#x3D;%ld; minor&#x3D;%ld\n&quot;,(long) major(statBuffer-&gt;st_rdev), (long) minor(statBuffer-&gt;st_rdev));</span><br><span class="line">&#125;</span><br><span class="line">    printf(&quot;Number of (hard) links:\t\t\t%ld\n&quot;, (long) statBuffer-&gt;st_nlink);</span><br><span class="line">    printf(&quot;Ownership:\t\t\t\tUID&#x3D;%ld   GID&#x3D;%ld\n&quot;, (long) statBuffer-&gt;st_uid, (long) statBuffer-&gt;st_gid);</span><br><span class="line">    printf(&quot;File size:\t\t\t\t%lld bytes : %lld KB\n&quot;, (long long) statBuffer-&gt;st_size, statBuffer-&gt;st_size&#x2F;1024);</span><br><span class="line">    printf(&quot;I&#x2F;O block size:\t\t\t\t%ld bytes\n&quot;, (long) statBuffer-&gt;st_blksize);</span><br><span class="line">    printf(&quot;Number of (512B) blocks allocated:\t%lld\n&quot;, (long long) statBuffer-&gt;st_blocks);</span><br><span class="line">    printf(&quot;Last file access:\t\t\t%s&quot;, ctime(&amp;statBuffer-&gt;st_atime));</span><br><span class="line">    printf(&quot;Last file modification:\t\t\t%s&quot;, ctime(&amp;statBuffer-&gt;st_mtime));</span><br><span class="line">    printf(&quot;Last status change:\t\t\t%s&quot;, ctime(&amp;statBuffer-&gt;st_ctime));</span><br><span class="line">    printf(&quot;\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n\n&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> &#x2F;*</span><br><span class="line">  * return data</span><br><span class="line">  * 1 for Invalid patameters</span><br><span class="line">  * 2 for lstat error</span><br><span class="line">  * 0 for sucess</span><br><span class="line">  * *&#x2F;</span><br><span class="line">int main(int argc, char *argv[])&#123;</span><br><span class="line">    struct stat statBuffer;</span><br><span class="line">if (argc !&#x3D; 2 || argv[1] &#x3D;&#x3D; NULL)&#123;</span><br><span class="line">printf(&quot;Usage:  filemetadata &lt;FILENAME&gt; \n&quot;);</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* just use lstat to show the info; because lstat() is identical to stat(), except that if pathname is a symbolic link, then it returns information about the  link</span><br><span class="line">     * itself, not the file that it refers to.</span><br><span class="line"> *&#x2F;</span><br><span class="line">    if (lstat(argv[1], &amp;statBuffer) &#x3D;&#x3D; -1)&#123;</span><br><span class="line">perror(&quot;filemetadata&quot;);</span><br><span class="line">        return 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">displayStatInfo(&amp;statBuffer, argv[1]);</span><br><span class="line">    return 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>Ok, we know the Metadata of a file via <code>stat</code> system call as discripted above; you can please try the code and modify to study more about that.<br>到此为止,我们初步了解了Linux 文件的元数据大概有些什么信息,以及如何通过<code>stat</code>系统调用来获取它们. 如果向要深入了解,可以尝试修改上面的代码并编译看能否取更有意思的输出.</p><p>To know more? you can follow my wechat public account <code>ADVANZONE</code>.<br>想要了解更多? 欢迎关注 Addos 微信公众号获取更多的,有意思的玩意咯 :-)</p>]]></content>
      
      
      <categories>
          
          <category> Linux 代码(原创) </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
